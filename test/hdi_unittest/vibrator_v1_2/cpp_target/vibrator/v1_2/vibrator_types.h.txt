/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_VIBRATOR_V1_2_VIBRATORTYPES_H
#define OHOS_HDI_VIBRATOR_V1_2_VIBRATORTYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>
#include "vibrator/v1_1/vibrator_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {

using namespace OHOS;
using namespace OHOS::HDI::Vibrator::V1_1;

enum EVENT_TYPE : int32_t {
    CONTINUOUS = 0,
    TRANSIENT = 1,
};

enum HdfVibratorModeV1_2 : int32_t {
    HDF_VIBRATOR_MODE_ONCE,
    HDF_VIBRATOR_MODE_PRESET,
    HDF_VIBRATOR_MODE_HDHAPTIC,
    HDF_VIBRATOR_MODE_BUTT,
};

struct CurvePoint {
    int32_t time;
    int32_t intensity;
    int32_t frequency;
} __attribute__ ((aligned(8)));

struct HapticEvent {
    OHOS::HDI::Vibrator::V1_2::EVENT_TYPE type;
    int32_t time;
    int32_t duration;
    int32_t intensity;
    int32_t frequency;
    int32_t index;
    int32_t pointNum;
    std::vector<OHOS::HDI::Vibrator::V1_2::CurvePoint> points;
};

struct HapticPaket {
    int32_t time;
    int32_t eventNum;
    std::vector<OHOS::HDI::Vibrator::V1_2::HapticEvent> events;
};

struct HapticCapacity {
    bool isSupportHdHaptic;
    bool isSupportPresetMapping;
    bool isSupportTimeDelay;
    bool reserved0;
    int32_t reserved1;
} __attribute__ ((aligned(8)));

bool CurvePointBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_2::CurvePoint& dataBlock);

bool CurvePointBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_2::CurvePoint& dataBlock);

bool HapticEventBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_2::HapticEvent& dataBlock);

bool HapticEventBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_2::HapticEvent& dataBlock);

bool HapticPaketBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_2::HapticPaket& dataBlock);

bool HapticPaketBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_2::HapticPaket& dataBlock);

bool HapticCapacityBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_2::HapticCapacity& dataBlock);

bool HapticCapacityBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_2::HapticCapacity& dataBlock);

} // V1_2
} // Vibrator
} // HDI
} // OHOS

#endif // OHOS_HDI_VIBRATOR_V1_2_VIBRATORTYPES_H

