/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/vibrator_interface_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    vibrator_interface_service

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {
extern "C" IVibratorInterface *VibratorInterfaceImplGetInstance(void)
{
    return new (std::nothrow) VibratorInterfaceService();
}

int32_t VibratorInterfaceService::PlayHapticPattern(const OHOS::HDI::Vibrator::V1_2::HapticPaket& pkg)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::GetHapticCapacity(OHOS::HDI::Vibrator::V1_2::HapticCapacity& HapticCapacity)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::GetHapticStartUpTime(int32_t mode, int32_t& startUpTime)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::StopV1_2(int32_t mode)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::StartOnce(uint32_t duration)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::Start(const std::string& effectType)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::Stop(OHOS::HDI::Vibrator::V1_1::HdfVibratorMode mode)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::GetVibratorInfo(std::vector<OHOS::HDI::Vibrator::V1_1::HdfVibratorInfo>& vibratorInfo)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::EnableVibratorModulation(uint32_t duration, uint16_t intensity, int16_t frequency)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::EnableCompositeEffect(const OHOS::HDI::Vibrator::V1_1::HdfCompositeEffect& effect)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::GetEffectInfo(const std::string& effectType,
     OHOS::HDI::Vibrator::V1_1::HdfEffectInfo& effectInfo)
{
    return HDF_SUCCESS;
}

int32_t VibratorInterfaceService::IsVibratorRunning(bool& state)
{
    return HDF_SUCCESS;
}

} // V1_2
} // Vibrator
} // HDI
} // OHOS
