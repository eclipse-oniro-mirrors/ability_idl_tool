/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACEPROXY_H
#define OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACEPROXY_H

#include "v1_1/vibrator_interface_proxy.h"
#include "v1_2/ivibrator_interface.h"
#include <unistd.h>
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {

class VibratorInterfaceProxy : public IProxyBroker<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> {
public:
    class IServiceManagerDeathRecipient : public IRemoteObject::DeathRecipient {
    public:
        IServiceManagerDeathRecipient(wptr<OHOS::HDI::Vibrator::V1_2::VibratorInterfaceProxy> proxy) : proxy_(proxy) {} 
        ~IServiceManagerDeathRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject> &remote) override
        {
            int32_t result = HDF_FAILURE;
            const int sleepInterval = 500000;
            const int waitTimes = 10;
            int currentTime = waitTimes;
            do {
                usleep(sleepInterval);
                auto proxy = proxy_.promote();
                if (proxy != nullptr) {
                    result = OHOS::HDI::Vibrator::V1_2::VibratorInterfaceProxy::Reconnect(proxy);
                }
                --currentTime;
            } while (result != HDF_SUCCESS && currentTime >0);
        }
    private:
        wptr<OHOS::HDI::Vibrator::V1_2::VibratorInterfaceProxy> proxy_;
    };

    explicit VibratorInterfaceProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::Vibrator::V1_2::IVibratorInterface>(remote) {
        reconnectRemote_ = nullptr;
        isReconnected_ = false;
    }
    virtual ~VibratorInterfaceProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t PlayHapticPattern(const OHOS::HDI::Vibrator::V1_2::HapticPaket& pkg) override;

    int32_t GetHapticCapacity(OHOS::HDI::Vibrator::V1_2::HapticCapacity& HapticCapacity) override;

    int32_t GetHapticStartUpTime(int32_t mode, int32_t& startUpTime) override;

    int32_t StopV1_2(int32_t mode) override;

    int32_t StartOnce(uint32_t duration) override;

    int32_t Start(const std::string& effectType) override;

    int32_t Stop(OHOS::HDI::Vibrator::V1_1::HdfVibratorMode mode) override;

    int32_t GetVibratorInfo(std::vector<OHOS::HDI::Vibrator::V1_1::HdfVibratorInfo>& vibratorInfo) override;

    int32_t EnableVibratorModulation(uint32_t duration, uint16_t intensity, int16_t frequency) override;

    int32_t EnableCompositeEffect(const OHOS::HDI::Vibrator::V1_1::HdfCompositeEffect& effect) override;

    int32_t GetEffectInfo(const std::string& effectType, OHOS::HDI::Vibrator::V1_1::HdfEffectInfo& effectInfo) override;

    int32_t IsVibratorRunning(bool& state) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t PlayHapticPattern_(const OHOS::HDI::Vibrator::V1_2::HapticPaket& pkg,
         const sptr<IRemoteObject> remote);

    static int32_t GetHapticCapacity_(OHOS::HDI::Vibrator::V1_2::HapticCapacity& HapticCapacity,
         const sptr<IRemoteObject> remote);

    static int32_t GetHapticStartUpTime_(int32_t mode, int32_t& startUpTime, const sptr<IRemoteObject> remote);

    static int32_t StopV1_2_(int32_t mode, const sptr<IRemoteObject> remote);

    static int32_t Reconnect(sptr<OHOS::HDI::Vibrator::V1_2::VibratorInterfaceProxy> proxy);

    sptr<IRemoteObject> GetCurrentRemote() {
        return isReconnected_ ? reconnectRemote_ : Remote();
    }

    bool isReconnected_;
    std::string serviceName_;
    sptr<IRemoteObject> servMgr_;
    sptr<IRemoteObject> reconnectRemote_;
private:
    static inline BrokerDelegator<OHOS::HDI::Vibrator::V1_2::VibratorInterfaceProxy> delegator_;
};

} // V1_2
} // Vibrator
} // HDI
} // OHOS

#endif // OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACEPROXY_H

