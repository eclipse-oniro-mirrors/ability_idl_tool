/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/vibrator_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    vibrator_interface_stub

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {


sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> OHOS::HDI::Vibrator::V1_2::IVibratorInterface::Get(bool isStub)
{
    return OHOS::HDI::Vibrator::V1_2::IVibratorInterface::Get("vibrator_interface_service", isStub);
}

sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> OHOS::HDI::Vibrator::V1_2::IVibratorInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "vibrator_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Vibrator::V1_2::IVibratorInterface *>(impl);
}


OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStub(const sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::~VibratorInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_VIBRATOR_INTERFACE_GET_VERSION:
            return VibratorInterfaceStubGetVersion(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_PLAY_HAPTIC_PATTERN:
            return VibratorInterfaceStubPlayHapticPattern(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_GET_HAPTIC_CAPACITY:
            return VibratorInterfaceStubGetHapticCapacity(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_GET_HAPTIC_START_UP_TIME:
            return VibratorInterfaceStubGetHapticStartUpTime(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_STOP_V1_2:
            return VibratorInterfaceStubStopV1_2(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_START_ONCE:
            return VibratorInterfaceStubStartOnce(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_START:
            return VibratorInterfaceStubStart(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_STOP:
            return VibratorInterfaceStubStop(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_GET_VIBRATOR_INFO:
            return VibratorInterfaceStubGetVibratorInfo(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_ENABLE_VIBRATOR_MODULATION:
            return VibratorInterfaceStubEnableVibratorModulation(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_ENABLE_COMPOSITE_EFFECT:
            return VibratorInterfaceStubEnableCompositeEffect(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_GET_EFFECT_INFO:
            return VibratorInterfaceStubGetEffectInfo(data, reply, option);
        case CMD_VIBRATOR_INTERFACE_IS_VIBRATOR_RUNNING:
            return VibratorInterfaceStubIsVibratorRunning(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubPlayHapticPattern(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubPlayHapticPattern_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticCapacity(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticCapacity_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticStartUpTime(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticStartUpTime_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStopV1_2(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStopV1_2_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStartOnce(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubStartOnce_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStart(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubStart_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStop(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubStop_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetVibratorInfo(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubGetVibratorInfo_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubEnableVibratorModulation(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubEnableVibratorModulation_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubEnableCompositeEffect(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubEnableCompositeEffect_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetEffectInfo(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubGetEffectInfo_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubIsVibratorRunning(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubIsVibratorRunning_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetVersion(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption)
{
    return OHOS::HDI::Vibrator::V1_1::VibratorInterfaceStub::VibratorInterfaceStubGetVersion_(vibratorInterfaceData, vibratorInterfaceReply, vibratorInterfaceOption, impl_);
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubPlayHapticPattern_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl)
{
    if (vibratorInterfaceData.ReadInterfaceToken() != OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Vibrator::V1_2::HapticPaket pkg;
    if (!HapticPaketBlockUnmarshalling(vibratorInterfaceData, pkg)) {
        HDF_LOGE("%{public}s: read pkg failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t vibratorInterfaceRet = impl->PlayHapticPattern(pkg);
    if (vibratorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, vibratorInterfaceRet);
        return vibratorInterfaceRet;
    }

    return vibratorInterfaceRet;
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticCapacity_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl)
{
    if (vibratorInterfaceData.ReadInterfaceToken() != OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Vibrator::V1_2::HapticCapacity HapticCapacity;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t vibratorInterfaceRet = impl->GetHapticCapacity(HapticCapacity);
    if (vibratorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, vibratorInterfaceRet);
        return vibratorInterfaceRet;
    }

    if (!OHOS::HDI::Vibrator::V1_2::HapticCapacityBlockMarshalling(vibratorInterfaceReply, HapticCapacity)) {
        HDF_LOGE("%{public}s: write HapticCapacity failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return vibratorInterfaceRet;
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubGetHapticStartUpTime_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl)
{
    if (vibratorInterfaceData.ReadInterfaceToken() != OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mode = 0;
    if (!vibratorInterfaceData.ReadInt32(mode)) {
        HDF_LOGE("%{public}s: read mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t startUpTime = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t vibratorInterfaceRet = impl->GetHapticStartUpTime(mode, startUpTime);
    if (vibratorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, vibratorInterfaceRet);
        return vibratorInterfaceRet;
    }

    if (!vibratorInterfaceReply.WriteInt32(startUpTime)) {
        HDF_LOGE("%{public}s: write startUpTime failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return vibratorInterfaceRet;
}

int32_t OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub::VibratorInterfaceStubStopV1_2_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl)
{
    if (vibratorInterfaceData.ReadInterfaceToken() != OHOS::HDI::Vibrator::V1_2::IVibratorInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mode = 0;
    if (!vibratorInterfaceData.ReadInt32(mode)) {
        HDF_LOGE("%{public}s: read mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t vibratorInterfaceRet = impl->StopV1_2(mode);
    if (vibratorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, vibratorInterfaceRet);
        return vibratorInterfaceRet;
    }

    return vibratorInterfaceRet;
}
} // V1_2
} // Vibrator
} // HDI
} // OHOS
