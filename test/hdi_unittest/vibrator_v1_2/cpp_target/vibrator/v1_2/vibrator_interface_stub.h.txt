/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACESTUB_H
#define OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACESTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_1/vibrator_interface_stub.h"
#include "v1_2/ivibrator_interface.h"

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {

using namespace OHOS;
class VibratorInterfaceStub : public IPCObjectStub {
public:
    explicit VibratorInterfaceStub(const sptr<IVibratorInterface> &impl);
    virtual ~VibratorInterfaceStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t VibratorInterfaceStubPlayHapticPattern_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl);

    static int32_t VibratorInterfaceStubGetHapticCapacity_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl);

    static int32_t VibratorInterfaceStubGetHapticStartUpTime_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl);

    static int32_t VibratorInterfaceStubStopV1_2_(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption, sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl);

private:
    int32_t VibratorInterfaceStubPlayHapticPattern(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubGetHapticCapacity(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubGetHapticStartUpTime(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubStopV1_2(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubStartOnce(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubStart(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubStop(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubGetVibratorInfo(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubEnableVibratorModulation(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubEnableCompositeEffect(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubGetEffectInfo(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubIsVibratorRunning(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);

    int32_t VibratorInterfaceStubGetVersion(MessageParcel& vibratorInterfaceData, MessageParcel& vibratorInterfaceReply, MessageOption& vibratorInterfaceOption);


    static inline ObjectDelegator<OHOS::HDI::Vibrator::V1_2::VibratorInterfaceStub, OHOS::HDI::Vibrator::V1_2::IVibratorInterface> objDelegator_;
    sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> impl_;
};
} // V1_2
} // Vibrator
} // HDI
} // OHOS

#endif // OHOS_HDI_VIBRATOR_V1_2_VIBRATORINTERFACESTUB_H

