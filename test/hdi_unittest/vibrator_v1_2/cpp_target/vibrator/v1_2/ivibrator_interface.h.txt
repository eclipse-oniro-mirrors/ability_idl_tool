/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_VIBRATOR_V1_2_IVIBRATORINTERFACE_H
#define OHOS_HDI_VIBRATOR_V1_2_IVIBRATORINTERFACE_H

#include <stdint.h>
#include <hdf_base.h>
#include <hdi_base.h>
#include "vibrator/v1_1/ivibrator_interface.h"
#include "vibrator/v1_2/vibrator_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_2 {
using namespace OHOS;
using namespace OHOS::HDI;
using namespace OHOS::HDI::Vibrator::V1_1;

enum {
    CMD_VIBRATOR_INTERFACE_PLAY_HAPTIC_PATTERN = 9,
    CMD_VIBRATOR_INTERFACE_GET_HAPTIC_CAPACITY = 10,
    CMD_VIBRATOR_INTERFACE_GET_HAPTIC_START_UP_TIME = 11,
    CMD_VIBRATOR_INTERFACE_STOP_V1_2 = 12,
};

class IVibratorInterface : public OHOS::HDI::Vibrator::V1_1::IVibratorInterface {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.vibrator.v1_2.IVibratorInterface");

    virtual ~IVibratorInterface() = default;

    static sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> Get(bool isStub = false);
    static sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> Get(const std::string &serviceName, bool isStub = false);

    static sptr<OHOS::HDI::Vibrator::V1_2::IVibratorInterface> CastFrom(const sptr<OHOS::HDI::Vibrator::V1_1::IVibratorInterface> &parent);

    virtual int32_t PlayHapticPattern(const OHOS::HDI::Vibrator::V1_2::HapticPaket& pkg) = 0;

    virtual int32_t GetHapticCapacity(OHOS::HDI::Vibrator::V1_2::HapticCapacity& HapticCapacity) = 0;

    virtual int32_t GetHapticStartUpTime(int32_t mode, int32_t& startUpTime) = 0;

    virtual int32_t StopV1_2(int32_t mode) = 0;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override
    {
        majorVer = 1;
        minorVer = 2;
        return HDF_SUCCESS;
    }

    const std::u16string GetDesc() override
    {
        return metaDescriptor_;
    }
};
} // V1_2
} // Vibrator
} // HDI
} // OHOS

#endif // OHOS_HDI_VIBRATOR_V1_2_IVIBRATORINTERFACE_H

