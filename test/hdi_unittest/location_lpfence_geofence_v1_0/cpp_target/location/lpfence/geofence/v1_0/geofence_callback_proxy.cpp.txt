/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/geofence_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    geofence_callback_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Geofence {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceAddResultCb(const std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult>& res)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceAddResultCb_(res, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRemoveResultCb(const std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult>& res)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRemoveResultCb_(res, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceTransitionCb(int32_t geofenceId,
     const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& location, uint8_t transition, int64_t timestamp)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceTransitionCb_(geofenceId, location, transition, timestamp, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetGeofenceSizeCb(const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceSize& size)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetGeofenceSizeCb_(size, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRequestCellDb(const OHOS::HDI::Location::Lpfence::Geofence::V1_0::RequestCellDb& req)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRequestCellDb_(req, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetCurrentLocationCb(int32_t locSource,
     const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& location)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetCurrentLocationCb_(locSource, location, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceReset()
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceReset_(Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceAddResultCb_(const std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult>& res, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(geofenceCallbackData, res)) {
        HDF_LOGE("%{public}s: failed to write res", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GEOFENCE_ADD_RESULT_CB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRemoveResultCb_(const std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult>& res, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(geofenceCallbackData, res)) {
        HDF_LOGE("%{public}s: failed to write res", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GEOFENCE_REMOVE_RESULT_CB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceTransitionCb_(int32_t geofenceId,
     const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& location, uint8_t transition, int64_t timestamp, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt32(geofenceId)) {
        HDF_LOGE("%{public}s: write geofenceId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfoBlockMarshalling(geofenceCallbackData, location)) {
        HDF_LOGE("%{public}s: write location failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteUint8(transition)) {
        HDF_LOGE("%{public}s: write transition failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt64(timestamp)) {
        HDF_LOGE("%{public}s: write timestamp failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GEOFENCE_TRANSITION_CB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetGeofenceSizeCb_(const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceSize& size, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceSizeBlockMarshalling(geofenceCallbackData, size)) {
        HDF_LOGE("%{public}s: write size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GET_GEOFENCE_SIZE_CB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceRequestCellDb_(const OHOS::HDI::Location::Lpfence::Geofence::V1_0::RequestCellDb& req, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Lpfence::Geofence::V1_0::RequestCellDbBlockMarshalling(geofenceCallbackData, req)) {
        HDF_LOGE("%{public}s: write req failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GEOFENCE_REQUEST_CELL_DB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGetCurrentLocationCb_(int32_t locSource,
     const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& location, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt32(locSource)) {
        HDF_LOGE("%{public}s: write locSource failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfoBlockMarshalling(geofenceCallbackData, location)) {
        HDF_LOGE("%{public}s: write location failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GET_CURRENT_LOCATION_CB, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::OnGeofenceReset_(const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_ON_GEOFENCE_RESET, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_GET_VERSION, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    if (!geofenceCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return geofenceCallbackRet;
}

} // V1_0
} // Geofence
} // Lpfence
} // Location
} // HDI
} // OHOS
