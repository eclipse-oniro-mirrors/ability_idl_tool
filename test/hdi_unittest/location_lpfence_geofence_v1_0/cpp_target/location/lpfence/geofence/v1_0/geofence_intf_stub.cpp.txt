/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/geofence_intf_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "location/lpfence/geofence/v1_0/geofence_callback_proxy.h"

#define HDF_LOG_TAG    geofence_intf_stub

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Geofence {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), size, &sz);
    if (ok) { return false; }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sz));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::Get(bool isStub)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::Get("geofence_intf_service", isStub);
}

sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "geofence_intf_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf *>(impl);
}


OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStub(const sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> &impl)
    : IPCObjectStub(OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::~GeofenceIntfStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_GEOFENCE_INTF_GET_VERSION:
            return GeofenceIntfStubGetVersion(data, reply, option);
        case CMD_GEOFENCE_INTF_REGISTER_GEOFENCE_CALLBACK:
            return GeofenceIntfStubRegisterGeofenceCallback(data, reply, option);
        case CMD_GEOFENCE_INTF_UNREGISTER_GEOFENCE_CALLBACK:
            return GeofenceIntfStubUnregisterGeofenceCallback(data, reply, option);
        case CMD_GEOFENCE_INTF_ADD_CIRCLE_GEOFENCES:
            return GeofenceIntfStubAddCircleGeofences(data, reply, option);
        case CMD_GEOFENCE_INTF_ADD_POLYGON_GEOFENCES:
            return GeofenceIntfStubAddPolygonGeofences(data, reply, option);
        case CMD_GEOFENCE_INTF_REMOVE_GEOFENCES:
            return GeofenceIntfStubRemoveGeofences(data, reply, option);
        case CMD_GEOFENCE_INTF_GET_GEOFENCE_STATUS:
            return GeofenceIntfStubGetGeofenceStatus(data, reply, option);
        case CMD_GEOFENCE_INTF_GET_GEOFENCE_LOCATION:
            return GeofenceIntfStubGetGeofenceLocation(data, reply, option);
        case CMD_GEOFENCE_INTF_GET_GEOFENCE_SIZE:
            return GeofenceIntfStubGetGeofenceSize(data, reply, option);
        case CMD_GEOFENCE_INTF_SEND_CELL_OFFLINE_DB:
            return GeofenceIntfStubSendCellOfflineDb(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRegisterGeofenceCallback(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRegisterGeofenceCallback_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubUnregisterGeofenceCallback(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubUnregisterGeofenceCallback_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddCircleGeofences(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddCircleGeofences_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddPolygonGeofences(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddPolygonGeofences_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRemoveGeofences(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRemoveGeofences_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceStatus(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceStatus_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceLocation(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceLocation_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceSize(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceSize_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubSendCellOfflineDb(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubSendCellOfflineDb_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetVersion(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption)
{
    return OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetVersion_(geofenceIntfData, geofenceIntfReply, geofenceIntfOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRegisterGeofenceCallback_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = geofenceIntfData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->RegisterGeofenceCallback(callbackObj);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubUnregisterGeofenceCallback_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = geofenceIntfData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->UnregisterGeofenceCallback(callbackObj);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddCircleGeofences_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCircleRequest> circleGeofences;
    if (!ReadPodArray(geofenceIntfData, circleGeofences)) {
        HDF_LOGE("%{public}s: failed to read circleGeofences", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->AddCircleGeofences(circleGeofences);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubAddPolygonGeofences_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofencePolygonRequest> polygonGeofences;
    uint32_t polygonGeofencesSize = 0;
    if (!geofenceIntfData.ReadUint32(polygonGeofencesSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(polygonGeofencesSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofencePolygonRequest), HDF_ERR_INVALID_PARAM);
    polygonGeofences.clear();
    polygonGeofences.reserve(polygonGeofencesSize);
    for (uint32_t i0 = 0; i0 < polygonGeofencesSize; ++i0) {
        OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofencePolygonRequest value0;
        if (!GeofencePolygonRequestBlockUnmarshalling(geofenceIntfData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        polygonGeofences.push_back(value0);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->AddPolygonGeofences(polygonGeofences);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubRemoveGeofences_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<int32_t> geofenceId;
    if (!ReadPodArray(geofenceIntfData, geofenceId)) {
        HDF_LOGE("%{public}s: failed to read geofenceId", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->RemoveGeofences(geofenceId);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceStatus_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceId = 0;
    if (!geofenceIntfData.ReadInt32(geofenceId)) {
        HDF_LOGE("%{public}s: read geofenceId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->GetGeofenceStatus(geofenceId);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceLocation_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->GetGeofenceLocation();
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetGeofenceSize_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->GetGeofenceSize();
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubSendCellOfflineDb_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Location::Lpfence::Geofence::V1_0::OfflineDb dbData;
    if (!OfflineDbBlockUnmarshalling(geofenceIntfData, dbData)) {
        HDF_LOGE("%{public}s: read dbData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellType = 0;
    if (!geofenceIntfData.ReadInt32(cellType)) {
        HDF_LOGE("%{public}s: read cellType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->SendCellOfflineDb(dbData, cellType);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    return geofenceIntfRet;
}

int32_t OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceIntfStub::GeofenceIntfStubGetVersion_(MessageParcel& geofenceIntfData, MessageParcel& geofenceIntfReply, MessageOption& geofenceIntfOption, sptr<OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf> impl)
{
    if (geofenceIntfData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Geofence::V1_0::IGeofenceIntf::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t geofenceIntfRet = impl->GetVersion(majorVer, minorVer);
    if (geofenceIntfRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, geofenceIntfRet);
        return geofenceIntfRet;
    }

    if (!geofenceIntfReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceIntfReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return geofenceIntfRet;
}
} // V1_0
} // Geofence
} // Lpfence
} // Location
} // HDI
} // OHOS
