/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_LOCATION_LPFENCE_GEOFENCE_V1_0_GEOFENCETYPES_H
#define OHOS_HDI_LOCATION_LPFENCE_GEOFENCE_V1_0_GEOFENCETYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Geofence {
namespace V1_0 {

using namespace OHOS;

enum GeofenceTransition : int32_t {
    GEOFENCE_TRANSITION_ENTERED = (1 << 0),
    GEOFENCE_TRANSITION_EXITED = (1 << 1),
    GEOFENCE_TRANSITION_UNCERTAIN = (1 << 2),
    GEOFENCE_TRANSITION_DWELL = (1 << 3),
    GEOFENCE_TRANSITION_INDOOR = (1 << 4),
    GEOFENCE_TRANSITION_OUTDOOR = (1 << 5),
};

enum GeofenceAttribute : int32_t {
    GEOFENCE_ATTRI_COORDINATE_WGS84 = 16,
};

enum GeofenceAccuracy : int32_t {
    ACCURACY_FINE = 1,
    ACCURACY_BALANCE = 2,
    ACCURACY_COARSE = 3,
};

enum GeofenceCellType : int32_t {
    GEOFENCE_CELL_G4 = 0,
    GEOFENCE_CELL_NR = 1,
};

enum GeofenceLocSource : int32_t {
    GEOFENCE_GNSS = 1,
    GEOFENCE_WIFI = 2,
    GEOFENCE_SENSOR = 4,
    GEOFENCE_CELL = 8,
    GEOFENCE_BT = 16,
};

struct Point {
    double latitude;
    double longitude;
} __attribute__ ((aligned(8)));

struct GeofenceCircleRequest {
    int32_t geofenceId;
    OHOS::HDI::Location::Lpfence::Geofence::V1_0::Point point;
    double radius;
    uint16_t accuracy;
    uint32_t loiterTimeMs;
    uint8_t monitorTransitions;
    uint32_t attribute;
} __attribute__ ((aligned(8)));

struct GeofencePolygonRequest {
    int32_t geofenceId;
    std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::Point> points;
    uint16_t accuracy;
    uint32_t loiterTimeMs;
    uint8_t monitorTransitions;
    uint32_t attribute;
};

struct GeofenceResult {
    int32_t geofenceId;
    int32_t result;
} __attribute__ ((aligned(8)));

struct OfflineDb {
    uint32_t times;
    uint32_t totalTimes;
    std::vector<uint8_t> dbs;
};

struct GeoLocationInfo {
    uint16_t flags;
    double latitude;
    double longitude;
    double altitude;
    float accuracy;
    float speed;
    float bearing;
    int64_t timeStamp;
} __attribute__ ((aligned(8)));

struct GeofenceSize {
    uint32_t circleMaxNum;
    uint32_t polygonMaxNum;
    uint32_t circleUsedNum;
    uint32_t polygonUsedNum;
} __attribute__ ((aligned(8)));

struct CurrentCell {
    int64_t cellId;
    int32_t lac;
    uint16_t mcc;
    uint16_t mnc;
    int16_t rssi;
    uint16_t rat;
    uint32_t pci;
    int32_t bootTimeLow;
    int32_t bootTimeHigh;
} __attribute__ ((aligned(8)));

struct NeighborCell {
    int32_t physicalId;
    uint16_t mcc;
    uint16_t mnc;
    int16_t rssi;
    uint16_t rat;
    uint32_t pci;
} __attribute__ ((aligned(8)));

struct GeofenceCellInfo {
    OHOS::HDI::Location::Lpfence::Geofence::V1_0::CurrentCell cell;
    std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::NeighborCell> neighborCells;
};

struct RequestCellDb {
    int32_t requestSize;
    OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo location;
    std::vector<OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCellInfo> cellInfo;
};

bool PointBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::Point& dataBlock);

bool PointBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::Point& dataBlock);

bool GeofenceCircleRequestBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCircleRequest& dataBlock);

bool GeofenceCircleRequestBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCircleRequest& dataBlock);

bool GeofencePolygonRequestBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofencePolygonRequest& dataBlock);

bool GeofencePolygonRequestBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofencePolygonRequest& dataBlock);

bool GeofenceResultBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult& dataBlock);

bool GeofenceResultBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceResult& dataBlock);

bool OfflineDbBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::OfflineDb& dataBlock);

bool OfflineDbBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::OfflineDb& dataBlock);

bool GeoLocationInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& dataBlock);

bool GeoLocationInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeoLocationInfo& dataBlock);

bool GeofenceSizeBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceSize& dataBlock);

bool GeofenceSizeBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceSize& dataBlock);

bool CurrentCellBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::CurrentCell& dataBlock);

bool CurrentCellBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::CurrentCell& dataBlock);

bool NeighborCellBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::NeighborCell& dataBlock);

bool NeighborCellBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::NeighborCell& dataBlock);

bool GeofenceCellInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCellInfo& dataBlock);

bool GeofenceCellInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::GeofenceCellInfo& dataBlock);

bool RequestCellDbBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Geofence::V1_0::RequestCellDb& dataBlock);

bool RequestCellDbBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Geofence::V1_0::RequestCellDb& dataBlock);

} // V1_0
} // Geofence
} // Lpfence
} // Location
} // HDI
} // OHOS

#endif // OHOS_HDI_LOCATION_LPFENCE_GEOFENCE_V1_0_GEOFENCETYPES_H

