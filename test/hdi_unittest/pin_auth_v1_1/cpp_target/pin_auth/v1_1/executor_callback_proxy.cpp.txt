/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/executor_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    executor_callback_proxy

namespace OHOS {
namespace HDI {
namespace PinAuth {
namespace V1_1 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);

template<typename ChildType, typename ParentType>
static sptr<ChildType> CastFromTemplate(const sptr<ParentType> &parent)
{
    if (parent == nullptr) {
        HDF_LOGE("%{public}s:parent is nullptr!", __func__);
        return nullptr;
    }

    if (!parent->IsProxy()) {
        HDF_LOGE("%{public}s:not proxy, not support castfrom!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = OHOS::HDI::hdi_objcast<ParentType>(parent);
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:hdi_objcast failed!", __func__);
        return nullptr;
    }

    sptr<ChildType> proxy = OHOS::HDI::hdi_facecast<ChildType>(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:hdi_facecast failed!", __func__);
        return nullptr;
    }

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t executorCallbackRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (executorCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    if (serMinorVer < 1) {
        HDF_LOGE("%{public}s:check Minor version failed! "
            "client minor version(1) should be less or equal to server minor version(%u).", __func__, serMinorVer);
        return nullptr;
    }

    return proxy;
}

sptr<OHOS::HDI::PinAuth::V1_1::IExecutorCallback> OHOS::HDI::PinAuth::V1_1::IExecutorCallback::CastFrom(const sptr<OHOS::HDI::PinAuth::V1_0::IExecutorCallback> &parent)
{
    return CastFromTemplate<OHOS::HDI::PinAuth::V1_1::IExecutorCallback, OHOS::HDI::PinAuth::V1_0::IExecutorCallback>(parent);
}


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::OnGetDataV1_1(uint64_t scheduleId,
     const std::vector<uint8_t>& algoParameter, uint64_t authSubType, uint32_t algoVersion)
{
    return OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::OnGetDataV1_1_(scheduleId, algoParameter, authSubType, algoVersion, Remote());
}

int32_t OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::OnResult(int32_t result, const std::vector<uint8_t>& extraInfo)
{
    return OHOS::HDI::PinAuth::V1_0::ExecutorCallbackProxy::OnResult_(result, extraInfo, Remote());
}

int32_t OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::OnGetData(uint64_t scheduleId,
     const std::vector<uint8_t>& salt, uint64_t authSubType)
{
    return OHOS::HDI::PinAuth::V1_0::ExecutorCallbackProxy::OnGetData_(scheduleId, salt, authSubType, Remote());
}

int32_t OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::PinAuth::V1_0::ExecutorCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::PinAuth::V1_1::ExecutorCallbackProxy::OnGetDataV1_1_(uint64_t scheduleId,
     const std::vector<uint8_t>& algoParameter, uint64_t authSubType, uint32_t algoVersion, const sptr<IRemoteObject> remote)
{
    MessageParcel executorCallbackData;
    MessageParcel executorCallbackReply;
    MessageOption executorCallbackOption(MessageOption::TF_SYNC);

    if (!executorCallbackData.WriteInterfaceToken(OHOS::HDI::PinAuth::V1_1::IExecutorCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!executorCallbackData.WriteUint64(scheduleId)) {
        HDF_LOGE("%{public}s: write scheduleId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(executorCallbackData, algoParameter)) {
        HDF_LOGE("%{public}s: failed to write algoParameter", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!executorCallbackData.WriteUint64(authSubType)) {
        HDF_LOGE("%{public}s: write authSubType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!executorCallbackData.WriteUint32(algoVersion)) {
        HDF_LOGE("%{public}s: write algoVersion failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t executorCallbackRet = remote->SendRequest(CMD_EXECUTOR_CALLBACK_ON_GET_DATA_V1_1, executorCallbackData, executorCallbackReply, executorCallbackOption);
    if (executorCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, executorCallbackRet);
        return executorCallbackRet;
    }

    return executorCallbackRet;
}

} // V1_1
} // PinAuth
} // HDI
} // OHOS
