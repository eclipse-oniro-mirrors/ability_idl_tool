AST[name: INnrtDevice file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/nnrt_v2_0/foo/nnrt/v2_0/INnrtDevice.idl]
package ohos.hdi.nnrt.v2_0;

import ohos.hdi.nnrt.v2_0.IPreparedModel;
import ohos.hdi.nnrt.v2_0.ModelTypes;
import ohos.hdi.nnrt.v2_0.NnrtTypes;

[mini, lite, full] interface INnrtDevice {
    [mini, lite, full] GetDeviceName(
      [out] std::string name);

    [mini, lite, full] GetVendorName(
      [out] std::string name);

    [mini, lite, full] GetDeviceType(
      [out] ohos.hdi.nnrt.v2_0.DeviceType deviceType);

    [mini, lite, full] GetDeviceStatus(
      [out] ohos.hdi.nnrt.v2_0.DeviceStatus status);

    [mini, lite, full] GetSupportedOperation(
      [in] ohos.hdi.nnrt.v2_0.Model model,
      [out] boolean[] ops);

    [mini, lite, full] IsFloat16PrecisionSupported(
      [out] boolean isSupported);

    [mini, lite, full] IsPerformanceModeSupported(
      [out] boolean isSupported);

    [mini, lite, full] IsPrioritySupported(
      [out] boolean isSupported);

    [mini, lite, full] IsDynamicInputSupported(
      [out] boolean isSupported);

    [mini, lite, full] PrepareModel(
      [in] ohos.hdi.nnrt.v2_0.Model model,
      [in] ohos.hdi.nnrt.v2_0.ModelConfig config,
      [out] ohos.hdi.nnrt.v2_0.IPreparedModel preparedModel);

    [mini, lite, full] IsModelCacheSupported(
      [out] boolean isSupported);

    [mini, lite, full] PrepareModelFromModelCache(
      [in] ohos.hdi.nnrt.v2_0.SharedBuffer[] modelCache,
      [in] ohos.hdi.nnrt.v2_0.ModelConfig config,
      [out] ohos.hdi.nnrt.v2_0.IPreparedModel preparedModel);

    [mini, lite, full] PrepareOfflineModel(
      [in] ohos.hdi.nnrt.v2_0.SharedBuffer[] offlineModels,
      [in] ohos.hdi.nnrt.v2_0.ModelConfig config,
      [out] ohos.hdi.nnrt.v2_0.IPreparedModel preparedModel);

    [mini, lite, full] AllocateBuffer(
      [in] unsigned int length,
      [out] ohos.hdi.nnrt.v2_0.SharedBuffer buffer);

    [mini, lite, full] ReleaseBuffer(
      [in] ohos.hdi.nnrt.v2_0.SharedBuffer buffer);
}


AST[name: ModelTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/nnrt_v2_0/foo/nnrt/v2_0/ModelTypes.idl]
package ohos.hdi.nnrt.v2_0;

import ohos.hdi.nnrt.v2_0.NnrtTypes;

[mini, lite, full] struct Tensor {
  std::string name;
  ohos.hdi.nnrt.v2_0.DataType dataType;
  int[] dims;
  ohos.hdi.nnrt.v2_0.Format format;
  ohos.hdi.nnrt.v2_0.SharedBuffer data;
  ohos.hdi.nnrt.v2_0.QuantParam[] quantParams;
};

[mini, lite, full] struct Node {
  std::string name;
  ohos.hdi.nnrt.v2_0.NodeType nodeType;
  byte[] nodeAttr;
  unsigned int[] inputIndex;
  unsigned int[] outputIndex;
  ohos.hdi.nnrt.v2_0.QuantType quantType;
};

[mini, lite, full] struct SubGraph {
  std::string name;
  unsigned int[] inputIndices;
  unsigned int[] outputIndices;
  unsigned int[] nodeIndices;
};

[mini, lite, full] struct Model {
  std::string name;
  unsigned int[] inputIndex;
  unsigned int[] outputIndex;
  ohos.hdi.nnrt.v2_0.Node[] nodes;
  ohos.hdi.nnrt.v2_0.Tensor[] allTensors;
  ohos.hdi.nnrt.v2_0.SubGraph[] subGraph;
};


AST[name: IPreparedModel file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/nnrt_v2_0/foo/nnrt/v2_0/IPreparedModel.idl]
package ohos.hdi.nnrt.v2_0;

import ohos.hdi.nnrt.v2_0.NnrtTypes;

[mini, lite, full] interface IPreparedModel {
    [mini, lite, full] ExportModelCache(
      [out] ohos.hdi.nnrt.v2_0.SharedBuffer[] modelCache);

    [mini, lite, full] GetInputDimRanges(
      [out] unsigned int[][] minInputDims,
      [out] unsigned int[][] maxInputDims);

    [mini, lite, full] Run(
      [in] ohos.hdi.nnrt.v2_0.IOTensor[] inputs,
      [in] ohos.hdi.nnrt.v2_0.IOTensor[] outputs,
      [out] int[][] outputDims);
}


AST[name: NodeAttrTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/nnrt_v2_0/foo/nnrt/v2_0/NodeAttrTypes.idl]
package ohos.hdi.nnrt.v2_0;

import ohos.hdi.nnrt.v2_0.NnrtTypes;

[mini, lite, full] struct Activation {
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
  float alpha;
  float minVal;
  float maxVal;
  boolean approximate;
};

[mini, lite, full] struct AddFusion {
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct ArgMaxFusion {
  long axis;
  long topK;
  boolean keepDims;
  boolean outMaxValue;
};

[mini, lite, full] struct AvgPoolFusion {
  long[] kernelSize;
  long[] strides;
  long[] pad;
  ohos.hdi.nnrt.v2_0.PadMode padMode;
  ohos.hdi.nnrt.v2_0.RoundMode roundMode;
  ohos.hdi.nnrt.v2_0.Format format;
  boolean global;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct BatchToSpaceND {
  long[] blockShape;
  long[][] crops;
};

[mini, lite, full] struct BiasAdd {
};

[mini, lite, full] struct Cast {
};

[mini, lite, full] struct Concat {
  long axis;
};

[mini, lite, full] struct Conv2DFusion {
  long[] kernelSize;
  long[] stride;
  long[] dilation;
  ohos.hdi.nnrt.v2_0.PadMode padMode;
  long[] padList;
  long group;
  long inChannel;
  long outChannel;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct Conv2dTransposeFusion {
  long[] kernelSize;
  long[] stride;
  long[] dilation;
  ohos.hdi.nnrt.v2_0.PadMode padMode;
  long[] padList;
  long group;
  long inChannel;
  long outChannel;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
  long[] outputPaddings;
};

[mini, lite, full] struct DivFusion {
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct Eltwise {
  ohos.hdi.nnrt.v2_0.EltwiseMode mode;
};

[mini, lite, full] struct ExpandDims {
};

[mini, lite, full] struct Fill {
};

[mini, lite, full] struct FullConnection {
  boolean hasBias;
  boolean useAxis;
  long axis;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct FusedBatchNorm {
  float epsilon;
};

[mini, lite, full] struct Gather {
};

[mini, lite, full] struct LayerNormFusion {
  long beginNormAxis;
  float epsilon;
  boolean elementwiseAffine;
  long beginParamsAxis;
};

[mini, lite, full] struct LessEqual {
};

[mini, lite, full] struct MatMulFusion {
  boolean transposeA;
  boolean transposeB;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct Maximum {
};

[mini, lite, full] struct MaxPoolFusion {
  long[] kernelSize;
  long[] strides;
  long[] pad;
  ohos.hdi.nnrt.v2_0.PadMode padMode;
  ohos.hdi.nnrt.v2_0.Format format;
  ohos.hdi.nnrt.v2_0.RoundMode roundMode;
  boolean global;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct MulFusion {
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct OneHot {
  long axis;
};

[mini, lite, full] struct PadFusion {
  long[][] paddings;
  ohos.hdi.nnrt.v2_0.PaddingMode paddingMode;
  float constantValue;
};

[mini, lite, full] struct PowFusion {
  float scale;
  float shift;
};

[mini, lite, full] struct PReLUFusion {
  boolean channelShared;
};

[mini, lite, full] struct QuantDTypeCast {
  long srcT;
  long dstT;
};

[mini, lite, full] struct ReduceFusion {
  boolean keepDims;
  ohos.hdi.nnrt.v2_0.ReduceMode mode;
  boolean reduceToEnd;
  float coeff;
};

[mini, lite, full] struct Reshape {
};

[mini, lite, full] struct Resize {
  ohos.hdi.nnrt.v2_0.ResizeMethod method;
  long newHeight;
  long newWidth;
  boolean preserveAspectRatio;
  ohos.hdi.nnrt.v2_0.CoordinateTransformMode coordinateTransformMode;
  float cubicCoeff;
  long excludeOutside;
  float extrapolationValue;
  ohos.hdi.nnrt.v2_0.NearestMode nearestMode;
};

[mini, lite, full] struct Rsqrt {
};

[mini, lite, full] struct ScaleFusion {
  long axis;
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct Shape {
};

[mini, lite, full] struct SliceFusion {
  long[] axes;
};

[mini, lite, full] struct Softmax {
  long[] axis;
};

[mini, lite, full] struct SpaceToBatchND {
  long[] blockShape;
  long[][] paddings;
};

[mini, lite, full] struct Split {
  long outputNum;
  long[] sizeSplits;
  long axis;
};

[mini, lite, full] struct Sqrt {
};

[mini, lite, full] struct SquaredDifference {
};

[mini, lite, full] struct Squeeze {
  long[] axis;
};

[mini, lite, full] struct Stack {
  long axis;
};

[mini, lite, full] struct StridedSlice {
  long beginMask;
  long endMask;
  long ellipsisMask;
  long newAxisMask;
  long shrinkAxisMask;
};

[mini, lite, full] struct SubFusion {
  ohos.hdi.nnrt.v2_0.ActivationType activationType;
};

[mini, lite, full] struct TileFusion {
  long[] dims;
};

[mini, lite, full] struct TopKFusion {
  boolean sorted;
  long axis;
};

[mini, lite, full] struct Transpose {
};

[mini, lite, full] struct Unsqueeze {
  long[] axis;
};


AST[name: NnrtTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/nnrt_v2_0/foo/nnrt/v2_0/NnrtTypes.idl]
package ohos.hdi.nnrt.v2_0;

[mini, lite, full] struct SharedBuffer {
  FileDescriptor fd;
  unsigned int bufferSize;
  unsigned int offset;
  unsigned int dataSize;
};

[mini, lite, full] enum DeviceType : int {
  OTHER,
  CPU,
  GPU,
  ACCELERATOR,
};

[mini, lite, full] enum DeviceStatus : int {
  AVAILABLE,
  BUSY,
  OFFLINE,
  UNKNOWN,
};

[mini, lite, full] enum PerformanceMode : int {
  PERFORMANCE_NONE,
  PERFORMANCE_LOW,
  PERFORMANCE_MEDIUM,
  PERFORMANCE_HIGH,
  PERFORMANCE_EXTREME,
};

[mini, lite, full] enum Priority : int {
  PRIORITY_NONE,
  PRIORITY_LOW,
  PRIORITY_MEDIUM,
  PRIORITY_HIGH,
};

[mini, lite, full] struct ModelConfig {
  boolean enableFloat16;
  ohos.hdi.nnrt.v2_0.PerformanceMode mode;
  ohos.hdi.nnrt.v2_0.Priority priority;
  Map<std::string, byte[]> extensions;
};

[mini, lite, full] enum Format : byte {
  FORMAT_NONE = -1,
  FORMAT_NCHW = 0,
  FORMAT_NHWC = 1,
};

[mini, lite, full] struct QuantParam {
  int numBits;
  int zeroPoint;
  double scale;
};

[mini, lite, full] enum DataType : byte {
  DATA_TYPE_UNKNOWN = 0,
  DATA_TYPE_BOOL = 30,
  DATA_TYPE_INT8 = 32,
  DATA_TYPE_INT16 = 33,
  DATA_TYPE_INT32 = 34,
  DATA_TYPE_INT64 = 35,
  DATA_TYPE_UINT8 = 37,
  DATA_TYPE_UINT16 = 38,
  DATA_TYPE_UINT32 = 39,
  DATA_TYPE_UINT64 = 40,
  DATA_TYPE_FLOAT16 = 42,
  DATA_TYPE_FLOAT32 = 43,
  DATA_TYPE_FLOAT64 = 44,
};

[mini, lite, full] struct IOTensor {
  std::string name;
  ohos.hdi.nnrt.v2_0.DataType dataType;
  int[] dimensions;
  ohos.hdi.nnrt.v2_0.Format format;
  ohos.hdi.nnrt.v2_0.SharedBuffer data;
};

[mini, lite, full] enum QuantType : byte {
  QUANT_TYPE_NONE,
  QUANT_TYPE_ALL,
};

[mini, lite, full] enum NodeType : unsigned int {
  NODE_TYPE_NONE = 0,
  NODE_TYPE_ACTIVATION = 2,
  NODE_TYPE_ADD_FUSION = 5,
  NODE_TYPE_ARGMAX_FUSION = 11,
  NODE_TYPE_AVGPOOL_FUSION = 17,
  NODE_TYPE_BATCH_TO_SPACE_ND = 22,
  NODE_TYPE_BIAS_ADD = 23,
  NODE_TYPE_CAST = 28,
  NODE_TYPE_CONCAT = 31,
  NODE_TYPE_CONV2D_FUSION = 35,
  NODE_TYPE_CONV2D_TRANSPOSE_FUSION = 36,
  NODE_TYPE_DIV_FUSION = 47,
  NODE_TYPE_ELTWISE = 52,
  NODE_TYPE_EXPAND_DIMS = 56,
  NODE_TYPE_FILL = 66,
  NODE_TYPE_FULL_CONNECTION = 67,
  NODE_TYPE_FUSED_BATCH_NORM = 68,
  NODE_TYPE_GATHER = 69,
  NODE_TYPE_LAYER_NORM_FUSION = 75,
  NODE_TYPE_LESS_EQUAL = 78,
  NODE_TYPE_MATMUL_FUSION = 89,
  NODE_TYPE_MAXIMUM = 90,
  NODE_TYPE_MAX_POOL_FUSION = 92,
  NODE_TYPE_MUL_FUSION = 99,
  NODE_TYPE_ONE_HOT = 105,
  NODE_TYPE_PAD_FUSION = 107,
  NODE_TYPE_POW_FUSION = 110,
  NODE_TYPE_PRELU_FUSION = 112,
  NODE_TYPE_QUANT_DTYPE_CAST = 113,
  NODE_TYPE_REDUCE_FUSION = 118,
  NODE_TYPE_RESHAPE = 119,
  NODE_TYPE_RESIZE = 120,
  NODE_TYPE_RSQRT = 126,
  NODE_TYPE_SCALE_FUSION = 127,
  NODE_TYPE_SHAPE = 130,
  NODE_TYPE_SLICE_FUSION = 135,
  NODE_TYPE_SOFTMAX = 138,
  NODE_TYPE_SPACE_TO_BATCH_ND = 141,
  NODE_TYPE_SPLIT = 145,
  NODE_TYPE_SQRT = 146,
  NODE_TYPE_SQUEEZE = 147,
  NODE_TYPE_SQUARED_DIFFERENCE = 149,
  NODE_TYPE_STACK = 150,
  NODE_TYPE_STRIDED_SLICE = 151,
  NODE_TYPE_SUB_FUSION = 152,
  NODE_TYPE_TILE_FUSION = 160,
  NODE_TYPE_TOPK_FUSION = 161,
  NODE_TYPE_TRANSPOSE = 162,
  NODE_TYPE_UNSQUEEZE = 165,
};

[mini, lite, full] enum ResizeMethod : byte {
  RESIZE_METHOD_UNKNOWN = -1,
  RESIZE_METHOD_LINEAR = 0,
  RESIZE_METHOD_NEAREST = 1,
  RESIZE_METHOD_CUBIC = 2,
};

[mini, lite, full] enum CoordinateTransformMode : byte {
  COORDINATE_TRANSFORM_MODE_ASYMMETRIC = 0,
  COORDINATE_TRANSFORM_MODE_ALIGN_CORNERS = 1,
  COORDINATE_TRANSFORM_MODE_HALF_PIXEL = 2,
};

[mini, lite, full] enum NearestMode : byte {
  NEAREST_MODE_NORMAL = 0,
  NEAREST_MODE_ROUND_HALF_DOWN = 1,
  NEAREST_MODE_ROUND_HALF_UP = 2,
  NEAREST_MODE_FLOOR = 3,
  NEAREST_MODE_CEIL = 4,
};

[mini, lite, full] enum ActivationType : byte {
  ACTIVATION_TYPE_NO_ACTIVATION = 0,
  ACTIVATION_TYPE_RELU = 1,
  ACTIVATION_TYPE_SIGMOID = 2,
  ACTIVATION_TYPE_RELU6 = 3,
  ACTIVATION_TYPE_ELU = 4,
  ACTIVATION_TYPE_LEAKY_RELU = 5,
  ACTIVATION_TYPE_ABS = 6,
  ACTIVATION_TYPE_RELU1 = 7,
  ACTIVATION_TYPE_SOFTSIGN = 8,
  ACTIVATION_TYPE_SOFTPLUS = 9,
  ACTIVATION_TYPE_TANH = 10,
  ACTIVATION_TYPE_SELU = 11,
  ACTIVATION_TYPE_HSWISH = 12,
  ACTIVATION_TYPE_HSIGMOID = 13,
  ACTIVATION_TYPE_THRESHOLDRELU = 14,
  ACTIVATION_TYPE_LINEAR = 15,
  ACTIVATION_TYPE_HARD_TANH = 16,
  ACTIVATION_TYPE_SIGN = 17,
  ACTIVATION_TYPE_SWISH = 18,
  ACTIVATION_TYPE_GELU = 19,
  ACTIVATION_TYPE_UNKNOWN = 20,
};

[mini, lite, full] enum ReduceMode : byte {
  REDUCE_MODE_MEAN = 0,
  REDUCE_MODE_MAX = 1,
  REDUCE_MODE_MIN = 2,
  REDUCE_MODE_PROD = 3,
  REDUCE_MODE_SUM = 4,
  REDUCE_MODE_SUM_SQUARE = 5,
  REDUCE_MODE_ASUM = 6,
  REDUCE_MODE_ALL = 7,
};

[mini, lite, full] enum EltwiseMode : byte {
  ELTWISE_MODE_PROD = 0,
  ELTWISE_MODE_SUM = 1,
  ELTWISE_MODE_MAXIMUM = 2,
  ELTWISE_MODE_UNKNOWN = 3,
};

[mini, lite, full] enum PadMode : byte {
  PAD_MODE_PAD = 0,
  PAD_MODE_SAME = 1,
  PAD_MODE_VALID = 2,
};

[mini, lite, full] enum RoundMode : byte {
  ROUND_MODE_FLOOR = 0,
  ROUND_MODE_CEIL = 1,
};

[mini, lite, full] enum PaddingMode : byte {
  PADDING_MODE_CONSTANT = 0,
  PADDING_MODE_REFLECT = 1,
  PADDING_MODE_SYMMETRIC = 2,
  PADDING_MODE_RESERVED = 3,
};

[mini, lite, full] enum NNRT_ReturnCode : unsigned int {
  NNRT_SUCCESS = 0,
  NNRT_FAILED = 1,
  NNRT_NULL_PTR = 2,
  NNRT_INVALID_PARAMETER = 3,
  NNRT_MEMORY_ERROR = 4,
  NNRT_OUT_OF_MEMORY = 5,
  NNRT_OPERATION_FORBIDDEN = 6,
  NNRT_INVALID_FILE = 7,
  NNRT_INVALID_PATH = 8,
  NNRT_INSUFFICIENT_BUFFER = 9,
  NNRT_NO_CHANGE = 10,
  NNRT_NOT_SUPPORT = 11,
  NNRT_SERVICE_ERROR = 12,
  NNRT_DEVICE_ERROR = 13,
  NNRT_DEVICE_BUSY = 14,
  NNRT_CANCELLED = 15,
  NNRT_PERMISSION_DENIED = 16,
  NNRT_TIME_OUT = 17,
  NNRT_INVALID_TENSOR = 18,
  NNRT_INVALID_NODE = 19,
  NNRT_INVALID_INPUT = 20,
  NNRT_INVALID_OUTPUT = 21,
  NNRT_INVALID_DATATYPE = 22,
  NNRT_INVALID_FORMAT = 23,
  NNRT_INVALID_TENSOR_NAME = 24,
  NNRT_INVALID_SHAPE = 25,
  NNRT_OUT_OF_DIMENTION_RANGES = 26,
  NNRT_INVALID_BUFFER = 27,
  NNRT_INVALID_BUFFER_SIZE = 28,
  NNRT_INVALID_PERFORMANCE_MODE = 29,
  NNRT_INVALID_PRIORITY = 30,
  NNRT_INVALID_MODEL = 31,
  NNRT_INVALID_MODEL_CACHE = 32,
  NNRT_UNSUPPORTED_OP = 33,
};


