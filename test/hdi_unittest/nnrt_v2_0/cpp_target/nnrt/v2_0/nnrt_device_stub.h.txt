/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V2_0_NNRTDEVICESTUB_H
#define OHOS_HDI_NNRT_V2_0_NNRTDEVICESTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v2_0/innrt_device.h"

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V2_0 {

using namespace OHOS;
class NnrtDeviceStub : public IPCObjectStub {
public:
    explicit NnrtDeviceStub(const sptr<INnrtDevice> &impl);
    virtual ~NnrtDeviceStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t NnrtDeviceStubGetDeviceName_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubGetVendorName_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubGetDeviceType_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubGetDeviceStatus_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubGetSupportedOperation_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubIsFloat16PrecisionSupported_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubIsPerformanceModeSupported_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubIsPrioritySupported_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubIsDynamicInputSupported_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubPrepareModel_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubIsModelCacheSupported_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubPrepareModelFromModelCache_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubPrepareOfflineModel_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubAllocateBuffer_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubReleaseBuffer_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

    static int32_t NnrtDeviceStubGetVersion_(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption, sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl);

private:
    int32_t NnrtDeviceStubGetDeviceName(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubGetVendorName(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubGetDeviceType(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubGetDeviceStatus(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubGetSupportedOperation(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubIsFloat16PrecisionSupported(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubIsPerformanceModeSupported(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubIsPrioritySupported(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubIsDynamicInputSupported(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubPrepareModel(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubIsModelCacheSupported(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubPrepareModelFromModelCache(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubPrepareOfflineModel(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubAllocateBuffer(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubReleaseBuffer(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);

    int32_t NnrtDeviceStubGetVersion(MessageParcel& nnrtDeviceData, MessageParcel& nnrtDeviceReply, MessageOption& nnrtDeviceOption);


    static inline ObjectDelegator<OHOS::HDI::Nnrt::V2_0::NnrtDeviceStub, OHOS::HDI::Nnrt::V2_0::INnrtDevice> objDelegator_;
    sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> impl_;
};
} // V2_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V2_0_NNRTDEVICESTUB_H

