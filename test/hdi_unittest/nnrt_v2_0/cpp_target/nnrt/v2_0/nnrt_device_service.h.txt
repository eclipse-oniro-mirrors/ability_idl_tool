/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V2_0_NNRTDEVICESERVICE_H
#define OHOS_HDI_NNRT_V2_0_NNRTDEVICESERVICE_H

#include "v2_0/innrt_device.h"

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V2_0 {
class NnrtDeviceService : public OHOS::HDI::Nnrt::V2_0::INnrtDevice {
public:
    NnrtDeviceService() = default;
    virtual ~NnrtDeviceService() = default;

    int32_t GetDeviceName(std::string& name) override;

    int32_t GetVendorName(std::string& name) override;

    int32_t GetDeviceType(OHOS::HDI::Nnrt::V2_0::DeviceType& deviceType) override;

    int32_t GetDeviceStatus(OHOS::HDI::Nnrt::V2_0::DeviceStatus& status) override;

    int32_t GetSupportedOperation(const OHOS::HDI::Nnrt::V2_0::Model& model, std::vector<bool>& ops) override;

    int32_t IsFloat16PrecisionSupported(bool& isSupported) override;

    int32_t IsPerformanceModeSupported(bool& isSupported) override;

    int32_t IsPrioritySupported(bool& isSupported) override;

    int32_t IsDynamicInputSupported(bool& isSupported) override;

    int32_t PrepareModel(const OHOS::HDI::Nnrt::V2_0::Model& model, const OHOS::HDI::Nnrt::V2_0::ModelConfig& config,
         sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) override;

    int32_t IsModelCacheSupported(bool& isSupported) override;

    int32_t PrepareModelFromModelCache(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& modelCache,
         const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) override;

    int32_t PrepareOfflineModel(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& offlineModels,
         const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) override;

    int32_t AllocateBuffer(uint32_t length, OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer) override;

    int32_t ReleaseBuffer(const OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer) override;

};
} // V2_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V2_0_NNRTDEVICESERVICE_H

