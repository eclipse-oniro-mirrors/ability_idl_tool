/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/nnrt_device_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    nnrt_device_service

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V2_0 {
extern "C" INnrtDevice *NnrtDeviceImplGetInstance(void)
{
    return new (std::nothrow) NnrtDeviceService();
}

int32_t NnrtDeviceService::GetDeviceName(std::string& name)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::GetVendorName(std::string& name)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::GetDeviceType(OHOS::HDI::Nnrt::V2_0::DeviceType& deviceType)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::GetDeviceStatus(OHOS::HDI::Nnrt::V2_0::DeviceStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::GetSupportedOperation(const OHOS::HDI::Nnrt::V2_0::Model& model, std::vector<bool>& ops)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::IsFloat16PrecisionSupported(bool& isSupported)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::IsPerformanceModeSupported(bool& isSupported)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::IsPrioritySupported(bool& isSupported)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::IsDynamicInputSupported(bool& isSupported)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::PrepareModel(const OHOS::HDI::Nnrt::V2_0::Model& model,
     const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::IsModelCacheSupported(bool& isSupported)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::PrepareModelFromModelCache(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& modelCache, const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::PrepareOfflineModel(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& offlineModels,
     const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::AllocateBuffer(uint32_t length, OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer)
{
    return HDF_SUCCESS;
}

int32_t NnrtDeviceService::ReleaseBuffer(const OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer)
{
    return HDF_SUCCESS;
}

} // V2_0
} // Nnrt
} // HDI
} // OHOS
