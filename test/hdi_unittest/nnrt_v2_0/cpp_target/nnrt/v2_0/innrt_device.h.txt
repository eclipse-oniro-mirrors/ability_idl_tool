/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V2_0_INNRTDEVICE_H
#define OHOS_HDI_NNRT_V2_0_INNRTDEVICE_H

#include <stdint.h>
#include <string>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "nnrt/v2_0/iprepared_model.h"
#include "nnrt/v2_0/model_types.h"
#include "nnrt/v2_0/nnrt_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V2_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_NNRT_DEVICE_GET_VERSION = 0,
    CMD_NNRT_DEVICE_GET_DEVICE_NAME = 1,
    CMD_NNRT_DEVICE_GET_VENDOR_NAME = 2,
    CMD_NNRT_DEVICE_GET_DEVICE_TYPE = 3,
    CMD_NNRT_DEVICE_GET_DEVICE_STATUS = 4,
    CMD_NNRT_DEVICE_GET_SUPPORTED_OPERATION = 5,
    CMD_NNRT_DEVICE_IS_FLOAT16_PRECISION_SUPPORTED = 6,
    CMD_NNRT_DEVICE_IS_PERFORMANCE_MODE_SUPPORTED = 7,
    CMD_NNRT_DEVICE_IS_PRIORITY_SUPPORTED = 8,
    CMD_NNRT_DEVICE_IS_DYNAMIC_INPUT_SUPPORTED = 9,
    CMD_NNRT_DEVICE_PREPARE_MODEL = 10,
    CMD_NNRT_DEVICE_IS_MODEL_CACHE_SUPPORTED = 11,
    CMD_NNRT_DEVICE_PREPARE_MODEL_FROM_MODEL_CACHE = 12,
    CMD_NNRT_DEVICE_PREPARE_OFFLINE_MODEL = 13,
    CMD_NNRT_DEVICE_ALLOCATE_BUFFER = 14,
    CMD_NNRT_DEVICE_RELEASE_BUFFER = 15,
};

class INnrtDevice : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.nnrt.v2_0.INnrtDevice");

    virtual ~INnrtDevice() = default;

    static sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> Get(bool isStub = false);
    static sptr<OHOS::HDI::Nnrt::V2_0::INnrtDevice> Get(const std::string &serviceName, bool isStub = false);

    virtual int32_t GetDeviceName(std::string& name) = 0;

    virtual int32_t GetVendorName(std::string& name) = 0;

    virtual int32_t GetDeviceType(OHOS::HDI::Nnrt::V2_0::DeviceType& deviceType) = 0;

    virtual int32_t GetDeviceStatus(OHOS::HDI::Nnrt::V2_0::DeviceStatus& status) = 0;

    virtual int32_t GetSupportedOperation(const OHOS::HDI::Nnrt::V2_0::Model& model, std::vector<bool>& ops) = 0;

    virtual int32_t IsFloat16PrecisionSupported(bool& isSupported) = 0;

    virtual int32_t IsPerformanceModeSupported(bool& isSupported) = 0;

    virtual int32_t IsPrioritySupported(bool& isSupported) = 0;

    virtual int32_t IsDynamicInputSupported(bool& isSupported) = 0;

    virtual int32_t PrepareModel(const OHOS::HDI::Nnrt::V2_0::Model& model,
         const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) = 0;

    virtual int32_t IsModelCacheSupported(bool& isSupported) = 0;

    virtual int32_t PrepareModelFromModelCache(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& modelCache,
         const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) = 0;

    virtual int32_t PrepareOfflineModel(const std::vector<OHOS::HDI::Nnrt::V2_0::SharedBuffer>& offlineModels,
         const OHOS::HDI::Nnrt::V2_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V2_0::IPreparedModel>& preparedModel) = 0;

    virtual int32_t AllocateBuffer(uint32_t length, OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer) = 0;

    virtual int32_t ReleaseBuffer(const OHOS::HDI::Nnrt::V2_0::SharedBuffer& buffer) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 2;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V2_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V2_0_INNRTDEVICE_H

