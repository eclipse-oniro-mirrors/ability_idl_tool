AST[name: IWlanCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_v1_1/foo/wlan/v1_1/IWlanCallback.idl]
package ohos.hdi.wlan.v1_1;

import ohos.hdi.wlan.v1_1.WlanTypes;

[mini, lite, full, callback] interface IWlanCallback {
    [mini, lite, full, callback] ResetDriverResult(
      [in] unsigned int event,
      [in] int code,
      [in] std::string ifName);

    [mini, lite, full, callback] ScanResult(
      [in] unsigned int event,
      [in] ohos.hdi.wlan.v1_1.HdfWifiScanResult scanResult,
      [in] std::string ifName);

    [mini, lite, full, callback] WifiNetlinkMessage(
      [in] unsigned char[] recvMsg);

    [mini, lite, full, callback] ScanResults(
      [in] unsigned int event,
      [in] ohos.hdi.wlan.v1_1.HdfWifiScanResults scanResults,
      [in] std::string ifName);
}


AST[name: IWlanInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_v1_1/foo/wlan/v1_1/IWlanInterface.idl]
package ohos.hdi.wlan.v1_1;

import ohos.hdi.wlan.v1_1.IWlanCallback;
import ohos.hdi.wlan.v1_1.WlanTypes;

[mini, lite, full] interface IWlanInterface {
    [mini, lite, full] Start();

    [mini, lite, full] Stop();

    [mini, lite, full] CreateFeature(
      [in] int type,
      [out] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature);

    [mini, lite, full] DestroyFeature(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature);

    [mini, lite, full] GetAssociatedStas(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] ohos.hdi.wlan.v1_1.HdfStaInfo[] staInfo,
      [out] unsigned int num);

    [mini, lite, full] GetChipId(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] unsigned char chipId);

    [mini, lite, full] GetDeviceMacAddress(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] unsigned char[] mac,
      [in] unsigned char len);

    [mini, lite, full] GetFeatureByIfName(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature);

    [mini, lite, full] GetFeatureType(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] int featureType);

    [mini, lite, full] GetFreqsWithBand(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] ohos.hdi.wlan.v1_1.HdfWifiInfo wifiInfo,
      [out] int[] freq);

    [mini, lite, full] GetIfNamesByChipId(
      [in] unsigned char chipId,
      [out] std::string ifName,
      [out] unsigned int num);

    [mini, lite, full] GetNetworkIfaceName(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] std::string ifName);

    [mini, lite, full] GetSupportCombo(
      [out] unsigned long combo);

    [mini, lite, full] GetSupportFeature(
      [out] unsigned char[] supType);

    [mini, lite, full] RegisterEventCallback(
      [in] ohos.hdi.wlan.v1_1.IWlanCallback cbFunc,
      [in] std::string ifName);

    [mini, lite, full] UnregisterEventCallback(
      [in] ohos.hdi.wlan.v1_1.IWlanCallback cbFunc,
      [in] std::string ifName);

    [mini, lite, full] ResetDriver(
      [in] unsigned char chipId,
      [in] std::string ifName);

    [mini, lite, full] SetCountryCode(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] std::string code,
      [in] unsigned int len);

    [mini, lite, full] SetMacAddress(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] unsigned char[] mac);

    [mini, lite, full] SetScanningMacAddress(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] unsigned char[] scanMac);

    [mini, lite, full] SetTxPower(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] int power);

    [mini, lite, full] GetNetDevInfo(
      [out] ohos.hdi.wlan.v1_1.HdfNetDeviceInfoResult netDeviceInfoResult);

    [mini, lite, full] StartScan(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] ohos.hdi.wlan.v1_1.HdfWifiScan scan);

    [mini, lite, full] GetPowerMode(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [out] unsigned char mode);

    [mini, lite, full] SetPowerMode(
      [in] ohos.hdi.wlan.v1_1.HdfFeatureInfo ifeature,
      [in] unsigned char mode);

    [mini, lite, full, oneway] StartChannelMeas(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.v1_1.MeasChannelParam measChannelParam);

    [mini, lite, full] GetChannelMeasResult(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.v1_1.MeasChannelResult measChannelResult);

    [mini, lite, full] SetProjectionScreenParam(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.v1_1.ProjectionScreenCmdParam param);

    [mini, lite, full] WifiSendCmdIoctl(
      [in] std::string ifName,
      [in] int cmdId,
      [in] byte[] paramBuf);

    [mini, lite, full] GetStaInfo(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.v1_1.WifiStationInfo info,
      [in] unsigned char[] mac);

    [mini, lite, full] StartPnoScan(
      [in] std::string interfaceName,
      [in] ohos.hdi.wlan.v1_1.PnoSettings pnoSettings);

    [mini, lite, full] StopPnoScan(
      [in] std::string interfaceName);

    [mini, lite, full] GetSignalPollInfo(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.v1_1.SignalPollResult signalResult);
}


AST[name: WlanTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_v1_1/foo/wlan/v1_1/WlanTypes.idl]
package ohos.hdi.wlan.v1_1;

[mini, lite, full] struct HdfFeatureInfo {
  std::string ifName;
  int type;
};

[mini, lite, full] struct HdfStaInfo {
  unsigned char[] mac;
};

[mini, lite, full] struct HdfWifiDriverScanSsid {
  std::string ssid;
  int ssidLen;
};

[mini, lite, full] struct HdfWifiScan {
  ohos.hdi.wlan.v1_1.HdfWifiDriverScanSsid[] ssids;
  int[] freqs;
  unsigned char[] extraIes;
  unsigned char[] bssid;
  unsigned char prefixSsidScanFlag;
  unsigned char fastConnectFlag;
};

[mini, lite, full] struct HdfNetDeviceInfo {
  unsigned int index;
  std::string ifName;
  unsigned int ifNameLen;
  unsigned char iftype;
  unsigned char[] mac;
};

[mini, lite, full] struct HdfNetDeviceInfoResult {
  ohos.hdi.wlan.v1_1.HdfNetDeviceInfo[] deviceInfos;
};

[mini, lite, full] struct HdfWifiScanResult {
  unsigned int flags;
  unsigned char[] bssid;
  unsigned short caps;
  unsigned int freq;
  unsigned short beaconInt;
  int qual;
  int level;
  unsigned int age;
  unsigned char[] variable;
  unsigned char[] ie;
  unsigned char[] beaconIe;
};

[mini, lite, full] struct HdfWifiScanResultExt {
  unsigned int flags;
  unsigned char[] bssid;
  unsigned short caps;
  unsigned int freq;
  unsigned short beaconInt;
  int qual;
  int level;
  unsigned int age;
  unsigned long tsf;
  unsigned char[] variable;
  unsigned char[] ie;
  unsigned char[] beaconIe;
};

[mini, lite, full] struct HdfWifiScanResults {
  ohos.hdi.wlan.v1_1.HdfWifiScanResultExt[] res;
};

[mini, lite, full] struct HdfWifiInfo {
  int band;
  unsigned int size;
};

[mini, lite, full] struct MeasChannelParam {
  int channelId;
  int measTime;
};

[mini, lite, full] struct MeasChannelResult {
  int channelId;
  int chload;
  int noise;
};

[mini, lite, full] struct ProjectionScreenCmdParam {
  int cmdId;
  byte[] buf;
};

[mini, lite, full] struct WifiStationInfo {
  unsigned int rxRate;
  unsigned int txRate;
  unsigned int flags;
  unsigned char rxVhtmcs;
  unsigned char txVhtmcs;
  unsigned char rxMcs;
  unsigned char txMcs;
  unsigned char rxVhtNss;
  unsigned char txVhtNss;
};

[mini, lite, full] struct AdjustChannelInfo {
  int msgId;
  unsigned char chanNumber;
  unsigned char bandwidth;
  unsigned char switchType;
  unsigned char statusCode;
};

[mini, lite, full] struct PnoNetwork {
  boolean isHidden;
  int[] freqs;
  ohos.hdi.wlan.v1_1.HdfWifiDriverScanSsid ssid;
};

[mini, lite, full] struct PnoSettings {
  int min2gRssi;
  int min5gRssi;
  int scanIntervalMs;
  int scanIterations;
  ohos.hdi.wlan.v1_1.PnoNetwork[] pnoNetworks;
};

[mini, lite, full] struct SignalPollResult {
  int currentRssi;
  int associatedFreq;
  int txBitrate;
  int rxBitrate;
  int currentNoise;
  int currentSnr;
  int currentChload;
  int currentUlDelay;
  int currentTxBytes;
  int currentRxBytes;
  int currentTxFailed;
  int currentTxPackets;
  int currentRxPackets;
};


