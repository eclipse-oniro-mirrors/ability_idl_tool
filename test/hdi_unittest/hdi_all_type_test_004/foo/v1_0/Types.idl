/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.hdi.foo.v1_0;

enum FooType {
    FOO_TYPE_ONE = 1,
    FOO_TYPE_TWO = 2,
};

struct FooInfo {
    unsigned int id;
    String name;
    enum FooType type;
    boolean data1;
    boolean[] data2;
    byte data3;
    short data4;
    int data5;
    long data6;
    String data7;
    List<int> data14;
    Map<String, byte[]> data15;
    unsigned int data17;
    unsigned char[] data18;
    unsigned short[] data19;
    unsigned int data20;
    unsigned long data21;
};

enum AudioPortPin {
    PIN_NONE                     = 0,                 /**< Invalid pin */
    PIN_OUT_SPEAKER              = 1 << 0,            /**< Speaker output pin */
    PIN_OUT_HEADSET              = 1 << 1,            /**< Wired headset pin for output */
    PIN_OUT_LINEOUT              = 1 << 2,            /**< Line-out pin */
    PIN_OUT_HDMI                 = 1 << 3,            /**< HDMI output pin */
    PIN_OUT_USB                  = 1 << 4,            /**< USB output pin */
    PIN_OUT_USB_EXT              = 1 << 5,            /**< Extended USB output pin*/
    PIN_OUT_EARPIECE             = 1 << 5 | 1 << 4,   /**< Earpiece output pin */
    PIN_OUT_BLUETOOTH_SCO        = 1 << 6,            /**< Bluetooth SCO output pin */
    PIN_OUT_DAUDIO_DEFAULT       = 1 << 7,            /**< Daudio default output pin */
    PIN_OUT_HEADPHONE            = 1 << 8,            /**< Wired headphone output pin*/
    PIN_OUT_USB_HEADSET          = 1 << 9,            /**< ARM USB out pin */
    PIN_IN_MIC                   = 1 << 27 | 1 << 0,  /**< Microphone input pin */
    PIN_IN_HS_MIC                = 1 << 27 | 1 << 1,  /**< Wired headset microphone pin for input */
    PIN_IN_LINEIN                = 1 << 27 | 1 << 2,  /**< Line-in pin */
    PIN_IN_USB_EXT               = 1 << 27 | 1 << 3,  /**< Extended USB input pin*/
    PIN_IN_BLUETOOTH_SCO_HEADSET = 1 << 27 | 1 << 4,  /**< Bluetooth SCO headset input pin */
    PIN_IN_DAUDIO_DEFAULT        = 1 << 27 | 1 << 5,  /**< Daudio default input pin */
    PIN_IN_USB_HEADSET           = 1 << 27 | 1 << 6,  /**< ARM USB input pin */
};

union SceneDesc {
    unsigned int id; /**< Audio scene ID */
};

struct AudioDeviceDescriptor {
    unsigned int portId;    /**< Audio port ID */
    enum AudioPortPin pins; /**< Pins of audio ports (input and output). For details, see {@link AudioPortPin}. */
    String desc;            /**< Audio device name */
};

struct AudioSceneDescriptor {
    union SceneDesc scene;             /**< Describes the audio scene */
    struct AudioDeviceDescriptor desc; /**< Audio device descriptor */
};

struct RGBColor {
    unsigned char r;
    unsigned char g;
    unsigned char b;
    unsigned char reserved;
};

struct WRGBColor {
    unsigned char w;
    unsigned char r;
    unsigned char g;
    unsigned char b;
};

union ColorValue
{
    int singleColor;
    struct WRGBColor wrgbColor;
    struct RGBColor rgbColor;
};
