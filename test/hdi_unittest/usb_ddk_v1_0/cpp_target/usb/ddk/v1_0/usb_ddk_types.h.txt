/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USB_DDK_V1_0_USBDDKTYPES_H
#define OHOS_HDI_USB_DDK_V1_0_USBDDKTYPES_H

#include <cstdbool>
#include <cstdint>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Ddk {
namespace V1_0 {

using namespace OHOS;

struct UsbControlRequestSetup {
    uint8_t requestType;
    uint8_t requestCmd;
    uint16_t value;
    uint16_t index;
    uint16_t length;
} __attribute__ ((aligned(8)));

struct UsbDeviceDescriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t bcdUSB;
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint16_t idVendor;
    uint16_t idProduct;
    uint16_t bcdDevice;
    uint8_t iManufacturer;
    uint8_t iProduct;
    uint8_t iSerialNumber;
    uint8_t bNumConfigurations;
} __attribute__ ((aligned(8)));

struct UsbRequestPipe {
    uint64_t interfaceHandle;
    uint32_t timeout;
    uint8_t endpoint;
} __attribute__ ((aligned(8)));

bool UsbControlRequestSetupBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Usb::Ddk::V1_0::UsbControlRequestSetup& dataBlock);

bool UsbControlRequestSetupBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Usb::Ddk::V1_0::UsbControlRequestSetup& dataBlock);

bool UsbDeviceDescriptorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Usb::Ddk::V1_0::UsbDeviceDescriptor& dataBlock);

bool UsbDeviceDescriptorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Usb::Ddk::V1_0::UsbDeviceDescriptor& dataBlock);

bool UsbRequestPipeBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Usb::Ddk::V1_0::UsbRequestPipe& dataBlock);

bool UsbRequestPipeBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Usb::Ddk::V1_0::UsbRequestPipe& dataBlock);

} // V1_0
} // Ddk
} // Usb
} // HDI
} // OHOS

#endif // OHOS_HDI_USB_DDK_V1_0_USBDDKTYPES_H

