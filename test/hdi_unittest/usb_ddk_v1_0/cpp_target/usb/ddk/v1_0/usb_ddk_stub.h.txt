/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USB_DDK_V1_0_USBDDKSTUB_H
#define OHOS_HDI_USB_DDK_V1_0_USBDDKSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/iusb_ddk.h"

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Ddk {
namespace V1_0 {

using namespace OHOS;
class UsbDdkStub : public IPCObjectStub {
public:
    explicit UsbDdkStub(const sptr<IUsbDdk> &impl);
    virtual ~UsbDdkStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t UsbDdkStubInit_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubRelease_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubGetDeviceDescriptor_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubGetConfigDescriptor_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubClaimInterface_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubReleaseInterface_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubSelectInterfaceSetting_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubGetCurrentInterfaceSetting_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubSendControlReadRequest_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubSendControlWriteRequest_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubSendPipeRequest_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubGetDeviceMemMapFd_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

    static int32_t UsbDdkStubGetVersion_(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption, sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl);

private:
    int32_t UsbDdkStubInit(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubRelease(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubGetDeviceDescriptor(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubGetConfigDescriptor(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubClaimInterface(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubReleaseInterface(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubSelectInterfaceSetting(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubGetCurrentInterfaceSetting(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubSendControlReadRequest(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubSendControlWriteRequest(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubSendPipeRequest(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubGetDeviceMemMapFd(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);

    int32_t UsbDdkStubGetVersion(MessageParcel& usbDdkData, MessageParcel& usbDdkReply, MessageOption& usbDdkOption);


    static inline ObjectDelegator<OHOS::HDI::Usb::Ddk::V1_0::UsbDdkStub, OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> objDelegator_;
    sptr<OHOS::HDI::Usb::Ddk::V1_0::IUsbDdk> impl_;
};
} // V1_0
} // Ddk
} // Usb
} // HDI
} // OHOS

#endif // OHOS_HDI_USB_DDK_V1_0_USBDDKSTUB_H

