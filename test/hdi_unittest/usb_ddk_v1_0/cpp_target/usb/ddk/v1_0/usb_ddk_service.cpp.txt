/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/usb_ddk_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    usb_ddk_service

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Ddk {
namespace V1_0 {
extern "C" IUsbDdk *UsbDdkImplGetInstance(void)
{
    return new (std::nothrow) UsbDdkService();
}

int32_t UsbDdkService::Init()
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::Release()
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::GetDeviceDescriptor(uint64_t deviceId, OHOS::HDI::Usb::Ddk::V1_0::UsbDeviceDescriptor& desc)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::GetConfigDescriptor(uint64_t deviceId, uint8_t configIndex, std::vector<uint8_t>& configDesc)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::ClaimInterface(uint64_t deviceId, uint8_t interfaceIndex, uint64_t& interfaceHandle)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::ReleaseInterface(uint64_t interfaceHandle)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::SelectInterfaceSetting(uint64_t interfaceHandle, uint8_t settingIndex)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::GetCurrentInterfaceSetting(uint64_t interfaceHandle, uint8_t& settingIndex)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::SendControlReadRequest(uint64_t interfaceHandle,
     const OHOS::HDI::Usb::Ddk::V1_0::UsbControlRequestSetup& setup, uint32_t timeout, std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::SendControlWriteRequest(uint64_t interfaceHandle,
     const OHOS::HDI::Usb::Ddk::V1_0::UsbControlRequestSetup& setup, uint32_t timeout, const std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::SendPipeRequest(const OHOS::HDI::Usb::Ddk::V1_0::UsbRequestPipe& pipe, uint32_t size,
     uint32_t offset, uint32_t length, uint32_t& transferedLength)
{
    return HDF_SUCCESS;
}

int32_t UsbDdkService::GetDeviceMemMapFd(uint64_t deviceId, int& fd)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Ddk
} // Usb
} // HDI
} // OHOS
