/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/image_process_session_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>

#define HDF_LOG_TAG    image_process_session_stub

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {



OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStub(const sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> &impl)
    : IPCObjectStub(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::~ImageProcessSessionStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_IMAGE_PROCESS_SESSION_GET_VERSION:
            return ImageProcessSessionStubGetVersion(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_GET_COUCURRENCY:
            return ImageProcessSessionStubGetCoucurrency(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_GET_PENDING_IMAGES:
            return ImageProcessSessionStubGetPendingImages(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_SET_EXECUTION_MODE:
            return ImageProcessSessionStubSetExecutionMode(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_PROCESS_IMAGE:
            return ImageProcessSessionStubProcessImage(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_REMOVE_IMAGE:
            return ImageProcessSessionStubRemoveImage(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_INTERRUPT:
            return ImageProcessSessionStubInterrupt(data, reply, option);
        case CMD_IMAGE_PROCESS_SESSION_RESET:
            return ImageProcessSessionStubReset(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetCoucurrency(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetCoucurrency_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetPendingImages(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetPendingImages_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubSetExecutionMode(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubSetExecutionMode_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubProcessImage(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubProcessImage_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubRemoveImage(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubRemoveImage_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubInterrupt(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubInterrupt_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubReset(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubReset_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetVersion(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetVersion_(imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetCoucurrency_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Camera::V1_2::ExecutionMode mode = static_cast<enum ExecutionMode>(0);
    {
        uint64_t enumTmp = 0;
        if (!imageProcessSessionData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write mode failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        mode = static_cast<enum ExecutionMode>(enumTmp);
    }

    int32_t taskCount = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->GetCoucurrency(mode, taskCount);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    if (!imageProcessSessionReply.WriteInt32(taskCount)) {
        HDF_LOGE("%{public}s: write taskCount failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetPendingImages_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool imageProcessSessionMemSet = false;
    if (!imageProcessSessionData.ReadBool(imageProcessSessionMemSet)) {
        HDF_LOGE("%{public}s: failed to read imageProcessSessionMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<std::string> imageIds;
    if (imageProcessSessionMemSet) {
        uint32_t capacity = 0;
        if (!imageProcessSessionData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(std::string), HDF_ERR_INVALID_PARAM);
        imageIds.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->GetPendingImages(imageIds);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    if (!imageProcessSessionReply.WriteUint32(imageIds.size())) {
        HDF_LOGE("%{public}s: write imageIds size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : imageIds) {
        if (!imageProcessSessionReply.WriteCString(it0.c_str())) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubSetExecutionMode_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Camera::V1_2::ExecutionMode mode = static_cast<enum ExecutionMode>(0);
    {
        uint64_t enumTmp = 0;
        if (!imageProcessSessionData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write mode failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        mode = static_cast<enum ExecutionMode>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->SetExecutionMode(mode);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubProcessImage_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* imageIdCp = imageProcessSessionData.ReadCString();
    if (imageIdCp == nullptr) {
        HDF_LOGE("%{public}s: read imageId failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string imageId = imageIdCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->ProcessImage(imageId);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubRemoveImage_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* imageIdCp = imageProcessSessionData.ReadCString();
    if (imageIdCp == nullptr) {
        HDF_LOGE("%{public}s: read imageId failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string imageId = imageIdCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->RemoveImage(imageId);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubInterrupt_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->Interrupt();
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubReset_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->Reset();
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionStub::ImageProcessSessionStubGetVersion_(MessageParcel& imageProcessSessionData, MessageParcel& imageProcessSessionReply, MessageOption& imageProcessSessionOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> impl)
{
    if (imageProcessSessionData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessSessionRet = impl->GetVersion(majorVer, minorVer);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    if (!imageProcessSessionReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessSessionRet;
}
} // V1_2
} // Camera
} // HDI
} // OHOS
