/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CAMERA_V1_2_STREAMOPERATORSTUB_H
#define OHOS_HDI_CAMERA_V1_2_STREAMOPERATORSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_1/stream_operator_stub.h"
#include "v1_2/istream_operator.h"

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {

using namespace OHOS;
class StreamOperatorStub : public IPCObjectStub {
public:
    explicit StreamOperatorStub(const sptr<IStreamOperator> &impl);
    virtual ~StreamOperatorStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t StreamOperatorStubUpdateStreams_(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption, sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> impl);

    static int32_t StreamOperatorStubConfirmCapture_(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption, sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> impl);

private:
    int32_t StreamOperatorStubUpdateStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubConfirmCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubIsStreamsSupported_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCreateStreams_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCommitStreams_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubIsStreamsSupported(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCreateStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubReleaseStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCommitStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubGetStreamAttributes(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubAttachBufferQueue(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubDetachBufferQueue(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubCancelCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubChangeToOfflineStream(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);

    int32_t StreamOperatorStubGetVersion(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption);


    static inline ObjectDelegator<OHOS::HDI::Camera::V1_2::StreamOperatorStub, OHOS::HDI::Camera::V1_2::IStreamOperator> objDelegator_;
    sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> impl_;
};
} // V1_2
} // Camera
} // HDI
} // OHOS

#endif // OHOS_HDI_CAMERA_V1_2_STREAMOPERATORSTUB_H

