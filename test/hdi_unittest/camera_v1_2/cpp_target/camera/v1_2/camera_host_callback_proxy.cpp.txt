/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/camera_host_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    camera_host_callback_proxy

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {


template<typename ChildType, typename ParentType>
static sptr<ChildType> CastFromTemplate(const sptr<ParentType> &parent)
{
    if (parent == nullptr) {
        HDF_LOGE("%{public}s:parent is nullptr!", __func__);
        return nullptr;
    }

    if (!parent->IsProxy()) {
        HDF_LOGE("%{public}s:not proxy, not support castfrom!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = OHOS::HDI::hdi_objcast<ParentType>(parent);
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:hdi_objcast failed!", __func__);
        return nullptr;
    }

    sptr<ChildType> proxy = OHOS::HDI::hdi_facecast<ChildType>(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:hdi_facecast failed!", __func__);
        return nullptr;
    }

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t cameraHostCallbackRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (cameraHostCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.2", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    if (serMinorVer < 2) {
        HDF_LOGE("%{public}s:check Minor version failed! "
            "client minor version(2) should be less or equal to server minor version(%u).", __func__, serMinorVer);
        return nullptr;
    }

    return proxy;
}

sptr<OHOS::HDI::Camera::V1_2::ICameraHostCallback> OHOS::HDI::Camera::V1_2::ICameraHostCallback::CastFrom(const sptr<OHOS::HDI::Camera::V1_0::ICameraHostCallback> &parent)
{
    return CastFromTemplate<OHOS::HDI::Camera::V1_2::ICameraHostCallback, OHOS::HDI::Camera::V1_0::ICameraHostCallback>(parent);
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnFlashlightStatus_V1_2(OHOS::HDI::Camera::V1_0::FlashlightStatus status)
{
    return OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnFlashlightStatus_V1_2_(status, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnCameraStatus(const std::string& cameraId,
     OHOS::HDI::Camera::V1_0::CameraStatus status)
{
    return OHOS::HDI::Camera::V1_0::CameraHostCallbackProxy::OnCameraStatus_(cameraId, status, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnFlashlightStatus(const std::string& cameraId,
     OHOS::HDI::Camera::V1_0::FlashlightStatus status)
{
    return OHOS::HDI::Camera::V1_0::CameraHostCallbackProxy::OnFlashlightStatus_(cameraId, status, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnCameraEvent(const std::string& cameraId,
     OHOS::HDI::Camera::V1_0::CameraEvent event)
{
    return OHOS::HDI::Camera::V1_0::CameraHostCallbackProxy::OnCameraEvent_(cameraId, event, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Camera::V1_0::CameraHostCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::CameraHostCallbackProxy::OnFlashlightStatus_V1_2_(OHOS::HDI::Camera::V1_0::FlashlightStatus status, const sptr<IRemoteObject> remote)
{
    MessageParcel cameraHostCallbackData;
    MessageParcel cameraHostCallbackReply;
    MessageOption cameraHostCallbackOption(MessageOption::TF_SYNC);

    if (!cameraHostCallbackData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::ICameraHostCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cameraHostCallbackData.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cameraHostCallbackRet = remote->SendRequest(CMD_CAMERA_HOST_CALLBACK_ON_FLASHLIGHT_STATUS__V1_2, cameraHostCallbackData, cameraHostCallbackReply, cameraHostCallbackOption);
    if (cameraHostCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cameraHostCallbackRet);
        return cameraHostCallbackRet;
    }

    return cameraHostCallbackRet;
}

} // V1_2
} // Camera
} // HDI
} // OHOS
