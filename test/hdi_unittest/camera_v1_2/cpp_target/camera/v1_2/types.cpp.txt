/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {



bool ImageBufferInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Camera::V1_2::ImageBufferInfo& dataBlock)
{
    if (!data.WriteStrongParcelable(dataBlock.metadata)) {
        HDF_LOGE("%{public}s: write dataBlock.metadata failed!", __func__);
        return false;
    }

    if (!data.WriteStrongParcelable(dataBlock.imageHandle)) {
        HDF_LOGE("%{public}s: write dataBlock.imageHandle failed!", __func__);
        return false;
    }

    if (!data.WriteBool(dataBlock.isGainMapValid)) {
        HDF_LOGE("%{public}s: write dataBlock.isGainMapValid failed!", __func__);
        return false;
    }

    if (!data.WriteStrongParcelable(dataBlock.gainMapHandle)) {
        HDF_LOGE("%{public}s: write dataBlock.gainMapHandle failed!", __func__);
        return false;
    }

    if (!data.WriteBool(dataBlock.isDepthMapValid)) {
        HDF_LOGE("%{public}s: write dataBlock.isDepthMapValid failed!", __func__);
        return false;
    }

    if (!data.WriteStrongParcelable(dataBlock.depthMapHandle)) {
        HDF_LOGE("%{public}s: write dataBlock.depthMapHandle failed!", __func__);
        return false;
    }
    return true;
}

bool ImageBufferInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Camera::V1_2::ImageBufferInfo& dataBlock)
{
    dataBlock.metadata = data.ReadStrongParcelable<MapDataSequenceable>();

    dataBlock.imageHandle = data.ReadStrongParcelable<BufferHandleSequenceable>();

    if (!data.ReadBool(dataBlock.isGainMapValid)) {
        HDF_LOGE("%{public}s: read dataBlock.isGainMapValid failed!", __func__);
        return false;
    }

    dataBlock.gainMapHandle = data.ReadStrongParcelable<BufferHandleSequenceable>();

    if (!data.ReadBool(dataBlock.isDepthMapValid)) {
        HDF_LOGE("%{public}s: read dataBlock.isDepthMapValid failed!", __func__);
        return false;
    }

    dataBlock.depthMapHandle = data.ReadStrongParcelable<BufferHandleSequenceable>();
    return true;
}

bool CaptureStartedInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Camera::V1_2::CaptureStartedInfo& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Camera::V1_2::CaptureStartedInfo))) {
        return false;
    }
    return true;
}

bool CaptureStartedInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Camera::V1_2::CaptureStartedInfo& dataBlock)
{
    const OHOS::HDI::Camera::V1_2::CaptureStartedInfo *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Camera::V1_2::CaptureStartedInfo*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Camera::V1_2::CaptureStartedInfo)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Camera::V1_2::CaptureStartedInfo), dataBlockPtr, sizeof(OHOS::HDI::Camera::V1_2::CaptureStartedInfo)) != EOK) {
        return false;
    }
    return true;
}

} // V1_2
} // Camera
} // HDI
} // OHOS
