/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CAMERA_V1_2_CAMERAHOSTSERVICE_H
#define OHOS_HDI_CAMERA_V1_2_CAMERAHOSTSERVICE_H

#include "v1_2/icamera_host.h"

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {
class CameraHostService : public OHOS::HDI::Camera::V1_2::ICameraHost {
public:
    CameraHostService() = default;
    virtual ~CameraHostService() = default;

    int32_t OpenCamera_V1_2(const std::string& cameraId,
         const sptr<OHOS::HDI::Camera::V1_0::ICameraDeviceCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_2::ICameraDevice>& device) override;

    int32_t NotifyDeviceStateChangeInfo(int32_t notifyType, int32_t deviceState) override;

    int32_t SetCallback_V1_2(const sptr<OHOS::HDI::Camera::V1_2::ICameraHostCallback>& callbackObj) override;

    int32_t SetFlashlight_V1_2(float level) override;

    int32_t PreCameraSwitch(const std::string& cameraId) override;

    int32_t PrelaunchWithOpMode(const OHOS::HDI::Camera::V1_1::PrelaunchConfig& config, int32_t operationMode) override;

    int32_t OpenCamera_V1_1(const std::string& cameraId,
         const sptr<OHOS::HDI::Camera::V1_0::ICameraDeviceCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_1::ICameraDevice>& device) override;

    int32_t Prelaunch(const OHOS::HDI::Camera::V1_1::PrelaunchConfig& config) override;

    int32_t SetCallback(const sptr<OHOS::HDI::Camera::V1_0::ICameraHostCallback>& callbackObj) override;

    int32_t GetCameraIds(std::vector<std::string>& cameraIds) override;

    int32_t GetCameraAbility(const std::string& cameraId, std::vector<uint8_t>& cameraAbility) override;

    int32_t OpenCamera(const std::string& cameraId,
         const sptr<OHOS::HDI::Camera::V1_0::ICameraDeviceCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_0::ICameraDevice>& device) override;

    int32_t SetFlashlight(const std::string& cameraId, bool isEnable) override;

};
} // V1_2
} // Camera
} // HDI
} // OHOS

#endif // OHOS_HDI_CAMERA_V1_2_CAMERAHOSTSERVICE_H

