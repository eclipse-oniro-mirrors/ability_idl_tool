/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CAMERA_V1_2_CAMERADEVICESERVICE_H
#define OHOS_HDI_CAMERA_V1_2_CAMERADEVICESERVICE_H

#include "v1_2/icamera_device.h"

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {
class CameraDeviceService : public OHOS::HDI::Camera::V1_2::ICameraDevice {
public:
    CameraDeviceService() = default;
    virtual ~CameraDeviceService() = default;

    int32_t GetStreamOperator_V1_2(const sptr<OHOS::HDI::Camera::V1_2::IStreamOperatorCallback>& callbackObj,
         sptr<OHOS::HDI::Camera::V1_2::IStreamOperator>& streamOperator) override;

    int32_t GetStatus(const std::vector<uint8_t>& metaIn, std::vector<uint8_t>& metaOut) override;

    int32_t Reset() override;

    int32_t GetStreamOperator_V1_1(const sptr<OHOS::HDI::Camera::V1_0::IStreamOperatorCallback>& callbackObj,
         sptr<OHOS::HDI::Camera::V1_1::IStreamOperator>& streamOperator) override;

    int32_t GetDefaultSettings(std::vector<uint8_t>& settings) override;

    int32_t GetStreamOperator(const sptr<OHOS::HDI::Camera::V1_0::IStreamOperatorCallback>& callbackObj,
         sptr<OHOS::HDI::Camera::V1_0::IStreamOperator>& streamOperator) override;

    int32_t UpdateSettings(const std::vector<uint8_t>& settings) override;

    int32_t SetResultMode(OHOS::HDI::Camera::V1_0::ResultCallbackMode mode) override;

    int32_t GetEnabledResults(std::vector<int32_t>& results) override;

    int32_t EnableResult(const std::vector<int32_t>& results) override;

    int32_t DisableResult(const std::vector<int32_t>& results) override;

    int32_t Close() override;

};
} // V1_2
} // Camera
} // HDI
} // OHOS

#endif // OHOS_HDI_CAMERA_V1_2_CAMERADEVICESERVICE_H

