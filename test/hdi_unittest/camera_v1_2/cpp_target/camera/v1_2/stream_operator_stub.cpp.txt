/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/stream_operator_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>

#define HDF_LOG_TAG    stream_operator_stub

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {



OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStub(const sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> &impl)
    : IPCObjectStub(OHOS::HDI::Camera::V1_2::IStreamOperator::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Camera::V1_2::StreamOperatorStub::~StreamOperatorStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_STREAM_OPERATOR_GET_VERSION:
            return StreamOperatorStubGetVersion(data, reply, option);
        case CMD_STREAM_OPERATOR_UPDATE_STREAMS:
            return StreamOperatorStubUpdateStreams(data, reply, option);
        case CMD_STREAM_OPERATOR_CONFIRM_CAPTURE:
            return StreamOperatorStubConfirmCapture(data, reply, option);
        case CMD_STREAM_OPERATOR_IS_STREAMS_SUPPORTED__V1_1:
            return StreamOperatorStubIsStreamsSupported_V1_1(data, reply, option);
        case CMD_STREAM_OPERATOR_CREATE_STREAMS__V1_1:
            return StreamOperatorStubCreateStreams_V1_1(data, reply, option);
        case CMD_STREAM_OPERATOR_COMMIT_STREAMS__V1_1:
            return StreamOperatorStubCommitStreams_V1_1(data, reply, option);
        case CMD_STREAM_OPERATOR_IS_STREAMS_SUPPORTED:
            return StreamOperatorStubIsStreamsSupported(data, reply, option);
        case CMD_STREAM_OPERATOR_CREATE_STREAMS:
            return StreamOperatorStubCreateStreams(data, reply, option);
        case CMD_STREAM_OPERATOR_RELEASE_STREAMS:
            return StreamOperatorStubReleaseStreams(data, reply, option);
        case CMD_STREAM_OPERATOR_COMMIT_STREAMS:
            return StreamOperatorStubCommitStreams(data, reply, option);
        case CMD_STREAM_OPERATOR_GET_STREAM_ATTRIBUTES:
            return StreamOperatorStubGetStreamAttributes(data, reply, option);
        case CMD_STREAM_OPERATOR_ATTACH_BUFFER_QUEUE:
            return StreamOperatorStubAttachBufferQueue(data, reply, option);
        case CMD_STREAM_OPERATOR_DETACH_BUFFER_QUEUE:
            return StreamOperatorStubDetachBufferQueue(data, reply, option);
        case CMD_STREAM_OPERATOR_CAPTURE:
            return StreamOperatorStubCapture(data, reply, option);
        case CMD_STREAM_OPERATOR_CANCEL_CAPTURE:
            return StreamOperatorStubCancelCapture(data, reply, option);
        case CMD_STREAM_OPERATOR_CHANGE_TO_OFFLINE_STREAM:
            return StreamOperatorStubChangeToOfflineStream(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubUpdateStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubUpdateStreams_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubConfirmCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubConfirmCapture_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubIsStreamsSupported_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorStub::StreamOperatorStubIsStreamsSupported_V1_1_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCreateStreams_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorStub::StreamOperatorStubCreateStreams_V1_1_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCommitStreams_V1_1(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorStub::StreamOperatorStubCommitStreams_V1_1_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubIsStreamsSupported(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubIsStreamsSupported_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCreateStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubCreateStreams_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubReleaseStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubReleaseStreams_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCommitStreams(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubCommitStreams_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubGetStreamAttributes(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubGetStreamAttributes_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubAttachBufferQueue(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubAttachBufferQueue_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubDetachBufferQueue(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubDetachBufferQueue_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubCapture_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubCancelCapture(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubCancelCapture_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubChangeToOfflineStream(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubChangeToOfflineStream_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubGetVersion(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorStub::StreamOperatorStubGetVersion_(streamOperatorData, streamOperatorReply, streamOperatorOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubUpdateStreams_(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption, sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> impl)
{
    if (streamOperatorData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IStreamOperator::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1> streamInfos;
    uint32_t streamInfosSize = 0;
    if (!streamOperatorData.ReadUint32(streamInfosSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(streamInfosSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Camera::V1_1::StreamInfo_V1_1), HDF_ERR_INVALID_PARAM);
    streamInfos.clear();
    streamInfos.reserve(streamInfosSize);
    for (uint32_t i0 = 0; i0 < streamInfosSize; ++i0) {
        OHOS::HDI::Camera::V1_1::StreamInfo_V1_1 value0;
        if (!StreamInfo_V1_1BlockUnmarshalling(streamOperatorData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        streamInfos.push_back(value0);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t streamOperatorRet = impl->UpdateStreams(streamInfos);
    if (streamOperatorRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, streamOperatorRet);
        return streamOperatorRet;
    }

    return streamOperatorRet;
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorStub::StreamOperatorStubConfirmCapture_(MessageParcel& streamOperatorData, MessageParcel& streamOperatorReply, MessageOption& streamOperatorOption, sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> impl)
{
    if (streamOperatorData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IStreamOperator::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t captureId = 0;
    if (!streamOperatorData.ReadInt32(captureId)) {
        HDF_LOGE("%{public}s: read captureId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t streamOperatorRet = impl->ConfirmCapture(captureId);
    if (streamOperatorRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, streamOperatorRet);
        return streamOperatorRet;
    }

    return streamOperatorRet;
}
} // V1_2
} // Camera
} // HDI
} // OHOS
