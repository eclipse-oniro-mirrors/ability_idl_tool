/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/image_process_session_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    image_process_session_proxy

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {


int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetCoucurrency(OHOS::HDI::Camera::V1_2::ExecutionMode mode,
     int32_t& taskCount)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetCoucurrency_(mode, taskCount, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetPendingImages(std::vector<std::string>& imageIds)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetPendingImages_(imageIds, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::SetExecutionMode(OHOS::HDI::Camera::V1_2::ExecutionMode mode)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::SetExecutionMode_(mode, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::ProcessImage(const std::string& imageId)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::ProcessImage_(imageId, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::RemoveImage(const std::string& imageId)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::RemoveImage_(imageId, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Interrupt()
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Interrupt_(Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Reset()
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Reset_(Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetCoucurrency_(OHOS::HDI::Camera::V1_2::ExecutionMode mode,
     int32_t& taskCount, const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionData.WriteUint64(static_cast<uint64_t>(mode))) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_GET_COUCURRENCY, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    if (!imageProcessSessionReply.ReadInt32(taskCount)) {
        HDF_LOGE("%{public}s: read taskCount failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetPendingImages_(std::vector<std::string>& imageIds,
     const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_GET_PENDING_IMAGES, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    uint32_t imageIdsSize = 0;
    if (!imageProcessSessionReply.ReadUint32(imageIdsSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(imageIdsSize, >, HDI_BUFF_MAX_SIZE / sizeof(std::string), HDF_ERR_INVALID_PARAM);
    imageIds.clear();
    imageIds.reserve(imageIdsSize);
    for (uint32_t i0 = 0; i0 < imageIdsSize; ++i0) {
        const char* value0Cp = imageProcessSessionReply.ReadCString();
        if (value0Cp == nullptr) {
            HDF_LOGE("%{public}s: read value0 failed", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        std::string value0 = value0Cp;
        imageIds.push_back(value0);
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::SetExecutionMode_(OHOS::HDI::Camera::V1_2::ExecutionMode mode, const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionData.WriteUint64(static_cast<uint64_t>(mode))) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_SET_EXECUTION_MODE, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::ProcessImage_(const std::string& imageId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionData.WriteCString(imageId.c_str())) {
        HDF_LOGE("%{public}s: write imageId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_PROCESS_IMAGE, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::RemoveImage_(const std::string& imageId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionData.WriteCString(imageId.c_str())) {
        HDF_LOGE("%{public}s: write imageId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_REMOVE_IMAGE, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Interrupt_(const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_INTERRUPT, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::Reset_(const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_RESET, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    return imageProcessSessionRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessSessionProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel imageProcessSessionData;
    MessageParcel imageProcessSessionReply;
    MessageOption imageProcessSessionOption(MessageOption::TF_SYNC);

    if (!imageProcessSessionData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t imageProcessSessionRet = remote->SendRequest(CMD_IMAGE_PROCESS_SESSION_GET_VERSION, imageProcessSessionData, imageProcessSessionReply, imageProcessSessionOption);
    if (imageProcessSessionRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, imageProcessSessionRet);
        return imageProcessSessionRet;
    }

    if (!imageProcessSessionReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessSessionReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessSessionRet;
}

} // V1_2
} // Camera
} // HDI
} // OHOS
