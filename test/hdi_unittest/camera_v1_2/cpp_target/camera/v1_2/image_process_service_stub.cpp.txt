/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/image_process_service_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <object_collector.h>
#include <securec.h>
#include <string_ex.h>
#include "camera/v1_2/image_process_callback_proxy.h"

#define HDF_LOG_TAG    image_process_service_stub

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {


sptr<OHOS::HDI::Camera::V1_2::IImageProcessService> OHOS::HDI::Camera::V1_2::IImageProcessService::Get(bool isStub)
{
    return OHOS::HDI::Camera::V1_2::IImageProcessService::Get("image_process_service_service", isStub);
}

sptr<OHOS::HDI::Camera::V1_2::IImageProcessService> OHOS::HDI::Camera::V1_2::IImageProcessService::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Camera::V1_2::IImageProcessService::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "image_process_service_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Camera::V1_2::IImageProcessService *>(impl);
}


OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStub(const sptr<OHOS::HDI::Camera::V1_2::IImageProcessService> &impl)
    : IPCObjectStub(OHOS::HDI::Camera::V1_2::IImageProcessService::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::~ImageProcessServiceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_IMAGE_PROCESS_SERVICE_GET_VERSION:
            return ImageProcessServiceStubGetVersion(data, reply, option);
        case CMD_IMAGE_PROCESS_SERVICE_CREATE_IMAGE_PROCESS_SESSION:
            return ImageProcessServiceStubCreateImageProcessSession(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubCreateImageProcessSession(MessageParcel& imageProcessServiceData, MessageParcel& imageProcessServiceReply, MessageOption& imageProcessServiceOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubCreateImageProcessSession_(imageProcessServiceData, imageProcessServiceReply, imageProcessServiceOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubGetVersion(MessageParcel& imageProcessServiceData, MessageParcel& imageProcessServiceReply, MessageOption& imageProcessServiceOption)
{
    return OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubGetVersion_(imageProcessServiceData, imageProcessServiceReply, imageProcessServiceOption, impl_);
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubCreateImageProcessSession_(MessageParcel& imageProcessServiceData, MessageParcel& imageProcessServiceReply, MessageOption& imageProcessServiceOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessService> impl)
{
    if (imageProcessServiceData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessService::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t userId = 0;
    if (!imageProcessServiceData.ReadInt32(userId)) {
        HDF_LOGE("%{public}s: read userId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Camera::V1_2::IImageProcessCallback> imageProcessCallback;
    sptr<IRemoteObject> imageProcessCallbackRemote = imageProcessServiceData.ReadRemoteObject();
    if (imageProcessCallbackRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    imageProcessCallback = new OHOS::HDI::Camera::V1_2::ImageProcessCallbackProxy(imageProcessCallbackRemote);
    if (imageProcessCallback == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Camera::V1_2::IImageProcessSession> imageProcessSession;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessServiceRet = impl->CreateImageProcessSession(userId, imageProcessCallback, imageProcessSession);
    if (imageProcessServiceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, imageProcessServiceRet);
        return imageProcessServiceRet;
    }

    if (imageProcessSession == nullptr) {
        HDF_LOGE("%{public}s: parameter imageProcessSession is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessServiceReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(imageProcessSession, OHOS::HDI::Camera::V1_2::IImageProcessSession::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write imageProcessSession failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessServiceRet;
}

int32_t OHOS::HDI::Camera::V1_2::ImageProcessServiceStub::ImageProcessServiceStubGetVersion_(MessageParcel& imageProcessServiceData, MessageParcel& imageProcessServiceReply, MessageOption& imageProcessServiceOption, sptr<OHOS::HDI::Camera::V1_2::IImageProcessService> impl)
{
    if (imageProcessServiceData.ReadInterfaceToken() != OHOS::HDI::Camera::V1_2::IImageProcessService::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t imageProcessServiceRet = impl->GetVersion(majorVer, minorVer);
    if (imageProcessServiceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, imageProcessServiceRet);
        return imageProcessServiceRet;
    }

    if (!imageProcessServiceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!imageProcessServiceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return imageProcessServiceRet;
}
} // V1_2
} // Camera
} // HDI
} // OHOS
