/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/stream_operator_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    stream_operator_proxy

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_2 {


template<typename ChildType, typename ParentType>
static sptr<ChildType> CastFromTemplate(const sptr<ParentType> &parent)
{
    if (parent == nullptr) {
        HDF_LOGE("%{public}s:parent is nullptr!", __func__);
        return nullptr;
    }

    if (!parent->IsProxy()) {
        HDF_LOGE("%{public}s:not proxy, not support castfrom!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = OHOS::HDI::hdi_objcast<ParentType>(parent);
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:hdi_objcast failed!", __func__);
        return nullptr;
    }

    sptr<ChildType> proxy = OHOS::HDI::hdi_facecast<ChildType>(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:hdi_facecast failed!", __func__);
        return nullptr;
    }

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t streamOperatorRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (streamOperatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.2", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> OHOS::HDI::Camera::V1_2::IStreamOperator::CastFrom(const sptr<OHOS::HDI::Camera::V1_1::IStreamOperator> &parent)
{
    return CastFromTemplate<OHOS::HDI::Camera::V1_2::IStreamOperator, OHOS::HDI::Camera::V1_1::IStreamOperator>(parent);
}

sptr<OHOS::HDI::Camera::V1_2::IStreamOperator> OHOS::HDI::Camera::V1_2::IStreamOperator::CastFrom(const sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> &parent)
{
    return CastFromTemplate<OHOS::HDI::Camera::V1_2::IStreamOperator, OHOS::HDI::Camera::V1_0::IStreamOperator>(parent);
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::UpdateStreams(const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& streamInfos)
{
    return OHOS::HDI::Camera::V1_2::StreamOperatorProxy::UpdateStreams_(streamInfos, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::ConfirmCapture(int32_t captureId)
{
    return OHOS::HDI::Camera::V1_2::StreamOperatorProxy::ConfirmCapture_(captureId, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::IsStreamsSupported_V1_1(OHOS::HDI::Camera::V1_1::OperationMode_V1_1 mode, const std::vector<uint8_t>& modeSetting, const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& infos, OHOS::HDI::Camera::V1_0::StreamSupportType& type)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorProxy::IsStreamsSupported_V1_1_(mode, modeSetting, infos, type, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::CreateStreams_V1_1(const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& streamInfos)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorProxy::CreateStreams_V1_1_(streamInfos, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::CommitStreams_V1_1(OHOS::HDI::Camera::V1_1::OperationMode_V1_1 mode, const std::vector<uint8_t>& modeSetting)
{
    return OHOS::HDI::Camera::V1_1::StreamOperatorProxy::CommitStreams_V1_1_(mode, modeSetting, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::IsStreamsSupported(OHOS::HDI::Camera::V1_0::OperationMode mode,
     const std::vector<uint8_t>& modeSetting, const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& infos, OHOS::HDI::Camera::V1_0::StreamSupportType& type)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::IsStreamsSupported_(mode, modeSetting, infos, type, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::CreateStreams(const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& streamInfos)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::CreateStreams_(streamInfos, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::ReleaseStreams(const std::vector<int32_t>& streamIds)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::ReleaseStreams_(streamIds, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::CommitStreams(OHOS::HDI::Camera::V1_0::OperationMode mode,
     const std::vector<uint8_t>& modeSetting)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::CommitStreams_(mode, modeSetting, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::GetStreamAttributes(std::vector<OHOS::HDI::Camera::V1_0::StreamAttribute>& attributes)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::GetStreamAttributes_(attributes, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::AttachBufferQueue(int32_t streamId,
     const sptr<OHOS::HDI::Camera::V1_0::BufferProducerSequenceable>& bufferProducer)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::AttachBufferQueue_(streamId, bufferProducer, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::DetachBufferQueue(int32_t streamId)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::DetachBufferQueue_(streamId, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::Capture(int32_t captureId,
     const OHOS::HDI::Camera::V1_0::CaptureInfo& info, bool isStreaming)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::Capture_(captureId, info, isStreaming, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::CancelCapture(int32_t captureId)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::CancelCapture_(captureId, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::ChangeToOfflineStream(const std::vector<int32_t>& streamIds,
     const sptr<OHOS::HDI::Camera::V1_0::IStreamOperatorCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_0::IOfflineStreamOperator>& offlineOperator)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::ChangeToOfflineStream_(streamIds, callbackObj, offlineOperator, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Camera::V1_0::StreamOperatorProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::UpdateStreams_(const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& streamInfos, const sptr<IRemoteObject> remote)
{
    MessageParcel streamOperatorData;
    MessageParcel streamOperatorReply;
    MessageOption streamOperatorOption(MessageOption::TF_SYNC);

    if (!streamOperatorData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IStreamOperator::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!streamOperatorData.WriteUint32(streamInfos.size())) {
        HDF_LOGE("%{public}s: write streamInfos size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : streamInfos) {
        if (!OHOS::HDI::Camera::V1_1::StreamInfo_V1_1BlockMarshalling(streamOperatorData, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t streamOperatorRet = remote->SendRequest(CMD_STREAM_OPERATOR_UPDATE_STREAMS, streamOperatorData, streamOperatorReply, streamOperatorOption);
    if (streamOperatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, streamOperatorRet);
        return streamOperatorRet;
    }

    return streamOperatorRet;
}

int32_t OHOS::HDI::Camera::V1_2::StreamOperatorProxy::ConfirmCapture_(int32_t captureId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel streamOperatorData;
    MessageParcel streamOperatorReply;
    MessageOption streamOperatorOption(MessageOption::TF_SYNC);

    if (!streamOperatorData.WriteInterfaceToken(OHOS::HDI::Camera::V1_2::IStreamOperator::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!streamOperatorData.WriteInt32(captureId)) {
        HDF_LOGE("%{public}s: write captureId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t streamOperatorRet = remote->SendRequest(CMD_STREAM_OPERATOR_CONFIRM_CAPTURE, streamOperatorData, streamOperatorReply, streamOperatorOption);
    if (streamOperatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, streamOperatorRet);
        return streamOperatorRet;
    }

    return streamOperatorRet;
}

} // V1_2
} // Camera
} // HDI
} // OHOS
