/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/gnss_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    gnss_callback_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Gnss {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportLocation(const OHOS::HDI::Location::Gnss::V1_0::LocationInfo& location)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportLocation_(location, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssWorkingStatus(OHOS::HDI::Location::Gnss::V1_0::GnssWorkingStatus status)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssWorkingStatus_(status, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportNmea(int64_t timestamp, const std::string& nmea,
     int32_t length)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportNmea_(timestamp, nmea, length, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssCapabilities(OHOS::HDI::Location::Gnss::V1_0::GnssCapabilities capabilities)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssCapabilities_(capabilities, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportSatelliteStatusInfo(const OHOS::HDI::Location::Gnss::V1_0::SatelliteStatusInfo& info)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportSatelliteStatusInfo_(info, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestGnssReferenceInfo(OHOS::HDI::Location::Gnss::V1_0::GnssRefInfoType type)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestGnssReferenceInfo_(type, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestPredictGnssData()
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestPredictGnssData_(Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportCachedLocation(const std::vector<OHOS::HDI::Location::Gnss::V1_0::LocationInfo>& gnssLocations)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportCachedLocation_(gnssLocations, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportLocation_(const OHOS::HDI::Location::Gnss::V1_0::LocationInfo& location, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Gnss::V1_0::LocationInfoBlockMarshalling(gnssCallbackData, location)) {
        HDF_LOGE("%{public}s: write location failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_LOCATION, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssWorkingStatus_(OHOS::HDI::Location::Gnss::V1_0::GnssWorkingStatus status, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_GNSS_WORKING_STATUS, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportNmea_(int64_t timestamp, const std::string& nmea,
     int32_t length, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteInt64(timestamp)) {
        HDF_LOGE("%{public}s: write timestamp failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteCString(nmea.c_str())) {
        HDF_LOGE("%{public}s: write nmea failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteInt32(length)) {
        HDF_LOGE("%{public}s: write length failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_NMEA, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportGnssCapabilities_(OHOS::HDI::Location::Gnss::V1_0::GnssCapabilities capabilities, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteUint64(static_cast<uint64_t>(capabilities))) {
        HDF_LOGE("%{public}s: write capabilities failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_GNSS_CAPABILITIES, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportSatelliteStatusInfo_(const OHOS::HDI::Location::Gnss::V1_0::SatelliteStatusInfo& info, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Gnss::V1_0::SatelliteStatusInfoBlockMarshalling(gnssCallbackData, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_SATELLITE_STATUS_INFO, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestGnssReferenceInfo_(OHOS::HDI::Location::Gnss::V1_0::GnssRefInfoType type, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackData.WriteUint64(static_cast<uint64_t>(type))) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REQUEST_GNSS_REFERENCE_INFO, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::RequestPredictGnssData_(const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REQUEST_PREDICT_GNSS_DATA, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::ReportCachedLocation_(const std::vector<OHOS::HDI::Location::Gnss::V1_0::LocationInfo>& gnssLocations, const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(gnssCallbackData, gnssLocations)) {
        HDF_LOGE("%{public}s: failed to write gnssLocations", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_REPORT_CACHED_LOCATION, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    return gnssCallbackRet;
}

int32_t OHOS::HDI::Location::Gnss::V1_0::GnssCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel gnssCallbackData;
    MessageParcel gnssCallbackReply;
    MessageOption gnssCallbackOption(MessageOption::TF_SYNC);

    if (!gnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Gnss::V1_0::IGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t gnssCallbackRet = remote->SendRequest(CMD_GNSS_CALLBACK_GET_VERSION, gnssCallbackData, gnssCallbackReply, gnssCallbackOption);
    if (gnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, gnssCallbackRet);
        return gnssCallbackRet;
    }

    if (!gnssCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!gnssCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return gnssCallbackRet;
}

} // V1_0
} // Gnss
} // Location
} // HDI
} // OHOS
