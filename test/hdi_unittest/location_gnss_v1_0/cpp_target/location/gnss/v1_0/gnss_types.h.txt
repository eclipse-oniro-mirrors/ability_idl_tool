/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_LOCATION_GNSS_V1_0_GNSSTYPES_H
#define OHOS_HDI_LOCATION_GNSS_V1_0_GNSSTYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Location {
namespace Gnss {
namespace V1_0 {

using namespace OHOS;

enum GnssWorkingMode : int32_t {
    GNSS_WORKING_MODE_STANDALONE = 1,
    GNSS_WORKING_MODE_MS_BASED = 2,
    GNSS_WORKING_MODE_MS_ASSISTED = 3,
};

enum GnssStartType : int32_t {
    GNSS_START_TYPE_NORMAL = 1,
    GNSS_START_TYPE_GNSS_CACHE = 2,
};

enum GnssRefInfoType : int32_t {
    GNSS_REF_INFO_TIME = 1,
    GNSS_REF_INFO_LOCATION = 2,
    GNSS_REF_INFO_BEST_LOCATION = 3,
};

enum GnssAuxiliaryData : int32_t {
    GNSS_AUXILIARY_DATA_EPHEMERIS = 1,
    GNSS_AUXILIARY_DATA_ALMANAC = 2,
    GNSS_AUXILIARY_DATA_POSITION = 4,
    GNSS_AUXILIARY_DATA_TIME = 8,
    GNSS_AUXILIARY_DATA_IONO = 16,
    GNSS_AUXILIARY_DATA_UTC = 32,
    GNSS_AUXILIARY_DATA_HEALTH = 64,
    GNSS_AUXILIARY_DATA_SVDIR = 128,
    GNSS_AUXILIARY_DATA_SVSTEER = 256,
    GNSS_AUXILIARY_DATA_SADATA = 512,
    GNSS_AUXILIARY_DATA_RTI = 1024,
    GNSS_AUXILIARY_DATA_CELLDB_INFO = 32768,
    GNSS_AUXILIARY_DATA_ALL = 65535,
};

enum GnssWorkingStatus : int32_t {
    GNSS_STATUS_NONE = 0,
    GNSS_STATUS_SESSION_BEGIN = 1,
    GNSS_STATUS_SESSION_END = 2,
    GNSS_STATUS_ENGINE_ON = 3,
    GNSS_STATUS_ENGINE_OFF = 4,
};

enum GnssCapabilities : int32_t {
    GNSS_CAP_SUPPORT_MSB = 1,
    GNSS_CAP_SUPPORT_MSA = 2,
    GNSS_CAP_SUPPORT_GEOFENCING = 4,
    GNSS_CAP_SUPPORT_MEASUREMENTS = 8,
    GNSS_CAP_SUPPORT_NAV_MESSAGES = 16,
    GNSS_CAP_SUPPORT_GNSS_CACHE = 32,
};

enum GnssConstellationType : int32_t {
    GNSS_CONSTELLATION_UNKNOWN = 0,
    GNSS_CONSTELLATION_GPS = 1,
    GNSS_CONSTELLATION_SBAS = 2,
    GNSS_CONSTELLATION_GLONASS = 3,
    GNSS_CONSTELLATION_QZSS = 4,
    GNSS_CONSTELLATION_BEIDOU = 5,
    GNSS_CONSTELLATION_GALILEO = 6,
    GNSS_CONSTELLATION_IRNSS = 7,
};

enum SatellitesStatusFlag : int32_t {
    SATELLITES_STATUS_NONE = 0,
    SATELLITES_STATUS_HAS_EPHEMERIS_DATA = 1,
    SATELLITES_STATUS_HAS_ALMANAC_DATA = 2,
    SATELLITES_STATUS_USED_IN_FIX = 4,
    SATELLITES_STATUS_HAS_CARRIER_FREQUENCY = 8,
};

struct SatelliteStatusInfo {
    uint32_t satellitesNumber;
    std::vector<int16_t> satelliteIds;
    std::vector<OHOS::HDI::Location::Gnss::V1_0::GnssConstellationType> constellation;
    std::vector<float> carrierToNoiseDensitys;
    std::vector<float> elevation;
    std::vector<float> azimuths;
    std::vector<float> carrierFrequencies;
    OHOS::HDI::Location::Gnss::V1_0::SatellitesStatusFlag flags;
};

struct GnssBasicConfig {
    uint32_t minInterval;
    uint32_t accuracy;
    uint32_t firstFixTime;
    bool isPeriodicPositioning;
    OHOS::HDI::Location::Gnss::V1_0::GnssWorkingMode gnssMode;
} __attribute__ ((aligned(8)));

struct GnssCachingConfig {
    uint32_t interval;
    bool fifoFullNotify;
} __attribute__ ((aligned(8)));

struct GnssConfigPara {
    OHOS::HDI::Location::Gnss::V1_0::GnssBasicConfig gnssBasic;
    OHOS::HDI::Location::Gnss::V1_0::GnssCachingConfig gnssCaching;
} __attribute__ ((aligned(8)));

struct GnssRefTime {
    int64_t timeMs;
    int64_t timeReferenceMs;
    int32_t uncertainty;
} __attribute__ ((aligned(8)));

struct GnssRefLocation {
    double latitude;
    double longitude;
    float accuracy;
} __attribute__ ((aligned(8)));

struct LocationInfo {
    double latitude;
    double longitude;
    double altitude;
    float accuracy;
    float speed;
    double direction;
    int64_t timeStamp;
    int64_t timeSinceBoot;
} __attribute__ ((aligned(8)));

struct GnssRefInfo {
    OHOS::HDI::Location::Gnss::V1_0::GnssRefInfoType type;
    OHOS::HDI::Location::Gnss::V1_0::GnssRefTime time;
    OHOS::HDI::Location::Gnss::V1_0::GnssRefLocation location;
    OHOS::HDI::Location::Gnss::V1_0::LocationInfo best_location;
} __attribute__ ((aligned(8)));

bool SatelliteStatusInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::SatelliteStatusInfo& dataBlock);

bool SatelliteStatusInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::SatelliteStatusInfo& dataBlock);

bool GnssBasicConfigBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssBasicConfig& dataBlock);

bool GnssBasicConfigBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssBasicConfig& dataBlock);

bool GnssCachingConfigBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssCachingConfig& dataBlock);

bool GnssCachingConfigBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssCachingConfig& dataBlock);

bool GnssConfigParaBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssConfigPara& dataBlock);

bool GnssConfigParaBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssConfigPara& dataBlock);

bool GnssRefTimeBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssRefTime& dataBlock);

bool GnssRefTimeBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssRefTime& dataBlock);

bool GnssRefLocationBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssRefLocation& dataBlock);

bool GnssRefLocationBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssRefLocation& dataBlock);

bool LocationInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::LocationInfo& dataBlock);

bool LocationInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::LocationInfo& dataBlock);

bool GnssRefInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Gnss::V1_0::GnssRefInfo& dataBlock);

bool GnssRefInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Gnss::V1_0::GnssRefInfo& dataBlock);

} // V1_0
} // Gnss
} // Location
} // HDI
} // OHOS

#endif // OHOS_HDI_LOCATION_GNSS_V1_0_GNSSTYPES_H

