AST[name: IGnssInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_gnss_v1_0/foo/location/gnss/v1_0/IGnssInterface.idl]
package ohos.hdi.location.gnss.v1_0;

import ohos.hdi.location.gnss.v1_0.GnssTypes;
import ohos.hdi.location.gnss.v1_0.IGnssCallback;

[mini, lite, full] interface IGnssInterface {
    [mini, lite, full] SetGnssConfigPara(
      [in] ohos.hdi.location.gnss.v1_0.GnssConfigPara para);

    [mini, lite, full] EnableGnss(
      [in] ohos.hdi.location.gnss.v1_0.IGnssCallback callbackObj);

    [mini, lite, full] DisableGnss();

    [mini, lite, full] StartGnss(
      [in] ohos.hdi.location.gnss.v1_0.GnssStartType type);

    [mini, lite, full] StopGnss(
      [in] ohos.hdi.location.gnss.v1_0.GnssStartType type);

    [mini, lite, full] SetGnssReferenceInfo(
      [in] ohos.hdi.location.gnss.v1_0.GnssRefInfo refInfo);

    [mini, lite, full] DeleteAuxiliaryData(
      [in] ohos.hdi.location.gnss.v1_0.GnssAuxiliaryData data);

    [mini, lite, full] SetPredictGnssData(
      [in] std::string data);

    [mini, lite, full] GetCachedGnssLocationsSize(
      [out] int size);

    [mini, lite, full] GetCachedGnssLocations();
}


AST[name: IGnssCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_gnss_v1_0/foo/location/gnss/v1_0/IGnssCallback.idl]
package ohos.hdi.location.gnss.v1_0;

import ohos.hdi.location.gnss.v1_0.GnssTypes;

[mini, lite, full, callback] interface IGnssCallback {
    [mini, lite, full, callback] ReportLocation(
      [in] ohos.hdi.location.gnss.v1_0.LocationInfo location);

    [mini, lite, full, callback] ReportGnssWorkingStatus(
      [in] ohos.hdi.location.gnss.v1_0.GnssWorkingStatus status);

    [mini, lite, full, callback] ReportNmea(
      [in] long timestamp,
      [in] std::string nmea,
      [in] int length);

    [mini, lite, full, callback] ReportGnssCapabilities(
      [in] ohos.hdi.location.gnss.v1_0.GnssCapabilities capabilities);

    [mini, lite, full, callback] ReportSatelliteStatusInfo(
      [in] ohos.hdi.location.gnss.v1_0.SatelliteStatusInfo info);

    [mini, lite, full, callback] RequestGnssReferenceInfo(
      [in] ohos.hdi.location.gnss.v1_0.GnssRefInfoType type);

    [mini, lite, full, callback] RequestPredictGnssData();

    [mini, lite, full, callback] ReportCachedLocation(
      [in] ohos.hdi.location.gnss.v1_0.LocationInfo[] gnssLocations);
}


AST[name: GnssTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_gnss_v1_0/foo/location/gnss/v1_0/GnssTypes.idl]
package ohos.hdi.location.gnss.v1_0;

[mini, lite, full] enum GnssWorkingMode : int {
  GNSS_WORKING_MODE_STANDALONE = 1,
  GNSS_WORKING_MODE_MS_BASED = 2,
  GNSS_WORKING_MODE_MS_ASSISTED = 3,
};

[mini, lite, full] enum GnssStartType : int {
  GNSS_START_TYPE_NORMAL = 1,
  GNSS_START_TYPE_GNSS_CACHE = 2,
};

[mini, lite, full] enum GnssRefInfoType : int {
  GNSS_REF_INFO_TIME = 1,
  GNSS_REF_INFO_LOCATION = 2,
  GNSS_REF_INFO_BEST_LOCATION = 3,
};

[mini, lite, full] enum GnssAuxiliaryData : int {
  GNSS_AUXILIARY_DATA_EPHEMERIS = 1,
  GNSS_AUXILIARY_DATA_ALMANAC = 2,
  GNSS_AUXILIARY_DATA_POSITION = 4,
  GNSS_AUXILIARY_DATA_TIME = 8,
  GNSS_AUXILIARY_DATA_IONO = 16,
  GNSS_AUXILIARY_DATA_UTC = 32,
  GNSS_AUXILIARY_DATA_HEALTH = 64,
  GNSS_AUXILIARY_DATA_SVDIR = 128,
  GNSS_AUXILIARY_DATA_SVSTEER = 256,
  GNSS_AUXILIARY_DATA_SADATA = 512,
  GNSS_AUXILIARY_DATA_RTI = 1024,
  GNSS_AUXILIARY_DATA_CELLDB_INFO = 32768,
  GNSS_AUXILIARY_DATA_ALL = 65535,
};

[mini, lite, full] enum GnssWorkingStatus : int {
  GNSS_STATUS_NONE = 0,
  GNSS_STATUS_SESSION_BEGIN = 1,
  GNSS_STATUS_SESSION_END = 2,
  GNSS_STATUS_ENGINE_ON = 3,
  GNSS_STATUS_ENGINE_OFF = 4,
};

[mini, lite, full] enum GnssCapabilities : int {
  GNSS_CAP_SUPPORT_MSB = 1,
  GNSS_CAP_SUPPORT_MSA = 2,
  GNSS_CAP_SUPPORT_GEOFENCING = 4,
  GNSS_CAP_SUPPORT_MEASUREMENTS = 8,
  GNSS_CAP_SUPPORT_NAV_MESSAGES = 16,
  GNSS_CAP_SUPPORT_GNSS_CACHE = 32,
};

[mini, lite, full] enum GnssConstellationType : int {
  GNSS_CONSTELLATION_UNKNOWN = 0,
  GNSS_CONSTELLATION_GPS = 1,
  GNSS_CONSTELLATION_SBAS = 2,
  GNSS_CONSTELLATION_GLONASS = 3,
  GNSS_CONSTELLATION_QZSS = 4,
  GNSS_CONSTELLATION_BEIDOU = 5,
  GNSS_CONSTELLATION_GALILEO = 6,
  GNSS_CONSTELLATION_IRNSS = 7,
};

[mini, lite, full] enum SatellitesStatusFlag : int {
  SATELLITES_STATUS_NONE = 0,
  SATELLITES_STATUS_HAS_EPHEMERIS_DATA = 1,
  SATELLITES_STATUS_HAS_ALMANAC_DATA = 2,
  SATELLITES_STATUS_USED_IN_FIX = 4,
  SATELLITES_STATUS_HAS_CARRIER_FREQUENCY = 8,
};

[mini, lite, full] struct SatelliteStatusInfo {
  unsigned int satellitesNumber;
  short[] satelliteIds;
  ohos.hdi.location.gnss.v1_0.GnssConstellationType[] constellation;
  float[] carrierToNoiseDensitys;
  float[] elevation;
  float[] azimuths;
  float[] carrierFrequencies;
  ohos.hdi.location.gnss.v1_0.SatellitesStatusFlag flags;
};

[mini, lite, full] struct GnssBasicConfig {
  unsigned int minInterval;
  unsigned int accuracy;
  unsigned int firstFixTime;
  boolean isPeriodicPositioning;
  ohos.hdi.location.gnss.v1_0.GnssWorkingMode gnssMode;
};

[mini, lite, full] struct GnssCachingConfig {
  unsigned int interval;
  boolean fifoFullNotify;
};

[mini, lite, full] struct GnssConfigPara {
  ohos.hdi.location.gnss.v1_0.GnssBasicConfig gnssBasic;
  ohos.hdi.location.gnss.v1_0.GnssCachingConfig gnssCaching;
};

[mini, lite, full] struct GnssRefTime {
  long timeMs;
  long timeReferenceMs;
  int uncertainty;
};

[mini, lite, full] struct GnssRefLocation {
  double latitude;
  double longitude;
  float accuracy;
};

[mini, lite, full] struct LocationInfo {
  double latitude;
  double longitude;
  double altitude;
  float accuracy;
  float speed;
  double direction;
  long timeStamp;
  long timeSinceBoot;
};

[mini, lite, full] struct GnssRefInfo {
  ohos.hdi.location.gnss.v1_0.GnssRefInfoType type;
  ohos.hdi.location.gnss.v1_0.GnssRefTime time;
  ohos.hdi.location.gnss.v1_0.GnssRefLocation location;
  ohos.hdi.location.gnss.v1_0.LocationInfo best_location;
};


