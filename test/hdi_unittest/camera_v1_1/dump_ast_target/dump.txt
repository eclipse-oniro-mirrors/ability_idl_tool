AST[name: ICameraHost file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_1/ICameraHost.idl]
package ohos.hdi.camera.v1_1;

import ohos.hdi.camera.v1_1.ICameraDevice;
import ohos.hdi.camera.v1_1.Types;
import ohos.hdi.camera.v1_0.ICameraHost;
import ohos.hdi.camera.v1_0.ICameraDeviceCallback;

[mini, lite, full] interface ICameraHost {
    [mini, lite, full] OpenCamera_V1_1(
      [in] std::string cameraId,
      [in] ohos.hdi.camera.v1_0.ICameraDeviceCallback callbackObj,
      [out] ohos.hdi.camera.v1_1.ICameraDevice device);

    [mini, lite, full] Prelaunch(
      [in] ohos.hdi.camera.v1_1.PrelaunchConfig config);
}


AST[name: ICameraDevice file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_1/ICameraDevice.idl]
package ohos.hdi.camera.v1_1;

import ohos.hdi.camera.v1_1.Types;
import ohos.hdi.camera.v1_1.IStreamOperator;
import ohos.hdi.camera.v1_0.IStreamOperatorCallback;
import ohos.hdi.camera.v1_0.ICameraDevice;

[mini, lite, full] interface ICameraDevice {
    [mini, lite, full] GetStreamOperator_V1_1(
      [in] ohos.hdi.camera.v1_0.IStreamOperatorCallback callbackObj,
      [out] ohos.hdi.camera.v1_1.IStreamOperator streamOperator);

    [mini, lite, full] GetDefaultSettings(
      [out] unsigned char[] settings);
}


AST[name: IStreamOperator file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/IStreamOperator.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.BufferProducerSequenceable;
import ohos.hdi.camera.v1_0.IOfflineStreamOperator;
import ohos.hdi.camera.v1_0.IStreamOperatorCallback;
import ohos.hdi.camera.v1_0.Types;

[mini, lite, full] interface IStreamOperator {
    [mini, lite, full] IsStreamsSupported(
      [in] ohos.hdi.camera.v1_0.OperationMode mode,
      [in] unsigned char[] modeSetting,
      [in] ohos.hdi.camera.v1_0.StreamInfo[] infos,
      [out] ohos.hdi.camera.v1_0.StreamSupportType type);

    [mini, lite, full] CreateStreams(
      [in] ohos.hdi.camera.v1_0.StreamInfo[] streamInfos);

    [mini, lite, full] ReleaseStreams(
      [in] int[] streamIds);

    [mini, lite, full] CommitStreams(
      [in] ohos.hdi.camera.v1_0.OperationMode mode,
      [in] unsigned char[] modeSetting);

    [mini, lite, full] GetStreamAttributes(
      [out] ohos.hdi.camera.v1_0.StreamAttribute[] attributes);

    [mini, lite, full] AttachBufferQueue(
      [in] int streamId,
      [in] ohos.hdi.camera.v1_0.BufferProducerSequenceable bufferProducer);

    [mini, lite, full] DetachBufferQueue(
      [in] int streamId);

    [mini, lite, full] Capture(
      [in] int captureId,
      [in] ohos.hdi.camera.v1_0.CaptureInfo info,
      [in] boolean isStreaming);

    [mini, lite, full] CancelCapture(
      [in] int captureId);

    [mini, lite, full] ChangeToOfflineStream(
      [in] int[] streamIds,
      [in] ohos.hdi.camera.v1_0.IStreamOperatorCallback callbackObj,
      [out] ohos.hdi.camera.v1_0.IOfflineStreamOperator offlineOperator);
}


AST[name: ICameraHost file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/ICameraHost.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.ICameraDevice;
import ohos.hdi.camera.v1_0.ICameraDeviceCallback;
import ohos.hdi.camera.v1_0.ICameraHostCallback;

[mini, lite, full] interface ICameraHost {
    [mini, lite, full] SetCallback(
      [in] ohos.hdi.camera.v1_0.ICameraHostCallback callbackObj);

    [mini, lite, full] GetCameraIds(
      [out] std::string[] cameraIds);

    [mini, lite, full] GetCameraAbility(
      [in] std::string cameraId,
      [out] unsigned char[] cameraAbility);

    [mini, lite, full] OpenCamera(
      [in] std::string cameraId,
      [in] ohos.hdi.camera.v1_0.ICameraDeviceCallback callbackObj,
      [out] ohos.hdi.camera.v1_0.ICameraDevice device);

    [mini, lite, full] SetFlashlight(
      [in] std::string cameraId,
      [in] boolean isEnable);
}


AST[name: Types file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_1/Types.idl]
package ohos.hdi.camera.v1_1;

import ohos.hdi.camera.v1_0.Types;
import ohos.hdi.camera.v1_0.BufferProducerSequenceable;

[mini, lite, full] enum ExtendedStreamInfoType : int {
  EXTENDED_STREAM_INFO_QUICK_THUMBNAIL = 0,
};

[mini, lite, full] struct ExtendedStreamInfo {
  ohos.hdi.camera.v1_1.ExtendedStreamInfoType type;
  int width;
  int height;
  int format;
  int dataspace;
  ohos.hdi.camera.v1_0.BufferProducerSequenceable bufferQueue;
};

[mini, lite, full] struct StreamInfo_V1_1 {
  ohos.hdi.camera.v1_0.StreamInfo v1_0;
  ohos.hdi.camera.v1_1.ExtendedStreamInfo[] extendedStreamInfos;
};

[mini, lite, full] struct PrelaunchConfig {
  std::string cameraId;
  ohos.hdi.camera.v1_1.StreamInfo_V1_1[] streamInfos_V1_1;
  unsigned char[] setting;
};

[mini, lite, full] enum OperationMode_V1_1 : int {
  NORMAL = 0,
  CAPTURE = 1,
  VIDEO = 2,
  PORTRAIT = 3,
  NIGHT = 4,
  PROFESSIONAL = 5,
  SLOW_MOTION = 6,
};


AST[name: IStreamOperatorCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/IStreamOperatorCallback.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.Types;

[mini, lite, full, callback] interface IStreamOperatorCallback {
    [mini, lite, full, callback] OnCaptureStarted(
      [in] int captureId,
      [in] int[] streamIds);

    [mini, lite, full, callback] OnCaptureEnded(
      [in] int captureId,
      [in] ohos.hdi.camera.v1_0.CaptureEndedInfo[] infos);

    [mini, lite, full, callback] OnCaptureError(
      [in] int captureId,
      [in] ohos.hdi.camera.v1_0.CaptureErrorInfo[] infos);

    [mini, lite, full, callback] OnFrameShutter(
      [in] int captureId,
      [in] int[] streamIds,
      [in] unsigned long timestamp);
}


AST[name: IStreamOperator file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_1/IStreamOperator.idl]
package ohos.hdi.camera.v1_1;

import ohos.hdi.camera.v1_1.Types;
import ohos.hdi.camera.v1_0.IStreamOperator;

[mini, lite, full] interface IStreamOperator {
    [mini, lite, full] IsStreamsSupported_V1_1(
      [in] ohos.hdi.camera.v1_1.OperationMode_V1_1 mode,
      [in] unsigned char[] modeSetting,
      [in] ohos.hdi.camera.v1_1.StreamInfo_V1_1[] infos,
      [out] ohos.hdi.camera.v1_0.StreamSupportType type);

    [mini, lite, full] CreateStreams_V1_1(
      [in] ohos.hdi.camera.v1_1.StreamInfo_V1_1[] streamInfos);

    [mini, lite, full] CommitStreams_V1_1(
      [in] ohos.hdi.camera.v1_1.OperationMode_V1_1 mode,
      [in] unsigned char[] modeSetting);
}


AST[name: IOfflineStreamOperator file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/IOfflineStreamOperator.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.Types;

[mini, lite, full] interface IOfflineStreamOperator {
    [mini, lite, full] CancelCapture(
      [in] int captureId);

    [mini, lite, full] ReleaseStreams(
      [in] int[] streamIds);

    [mini, lite, full] Release();
}


AST[name: ICameraHostCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/ICameraHostCallback.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.Types;

[mini, lite, full, callback] interface ICameraHostCallback {
    [mini, lite, full, callback] OnCameraStatus(
      [in] std::string cameraId,
      [in] ohos.hdi.camera.v1_0.CameraStatus status);

    [mini, lite, full, callback] OnFlashlightStatus(
      [in] std::string cameraId,
      [in] ohos.hdi.camera.v1_0.FlashlightStatus status);

    [mini, lite, full, callback] OnCameraEvent(
      [in] std::string cameraId,
      [in] ohos.hdi.camera.v1_0.CameraEvent event);
}


AST[name: ICameraDeviceCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/ICameraDeviceCallback.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.Types;

[mini, lite, full, callback] interface ICameraDeviceCallback {
    [mini, lite, full, callback] OnError(
      [in] ohos.hdi.camera.v1_0.ErrorType type,
      [in] int errorCode);

    [mini, lite, full, callback] OnResult(
      [in] unsigned long timestamp,
      [in] unsigned char[] result);
}


AST[name: Types file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/Types.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.BufferProducerSequenceable;

[mini, lite, full] enum CamRetCode : int {
  NO_ERROR = 0,
  CAMERA_BUSY = -1,
  INSUFFICIENT_RESOURCES = -2,
  INVALID_ARGUMENT = -3,
  METHOD_NOT_SUPPORTED = -4,
  CAMERA_CLOSED = -5,
  DEVICE_ERROR = -6,
  NO_PERMISSION = -7,
};

[mini, lite, full] enum ResultCallbackMode : int {
  PER_FRAME = 0,
  ON_CHANGED = 1,
};

[mini, lite, full] enum OperationMode : int {
  NORMAL = 0,
};

[mini, lite, full] enum StreamIntent : int {
  PREVIEW = 0,
  VIDEO = 1,
  STILL_CAPTURE = 2,
  POST_VIEW = 3,
  ANALYZE = 4,
  CUSTOM = 5,
};

[mini, lite, full] enum EncodeType : int {
  ENCODE_TYPE_NULL = 0,
  ENCODE_TYPE_H264 = 1,
  ENCODE_TYPE_H265 = 2,
  ENCODE_TYPE_JPEG = 3,
};

[mini, lite, full] enum StreamSupportType : int {
  DYNAMIC_SUPPORTED = 0,
  RE_CONFIGURED_REQUIRED = 1,
  NOT_SUPPORTED = 2,
};

[mini, lite, full] enum CameraStatus : int {
  UN_AVAILABLE = 0,
  AVAILABLE = 1,
};

[mini, lite, full] enum FlashlightStatus : int {
  FLASHLIGHT_OFF = 0,
  FLASHLIGHT_ON = 1,
  FLASHLIGHT_UNAVAILABLE = 2,
};

[mini, lite, full] enum CameraEvent : int {
  CAMERA_EVENT_DEVICE_ADD = 0,
  CAMERA_EVENT_DEVICE_RMV = 1,
};

[mini, lite, full] enum ErrorType : int {
  FATAL_ERROR = 0,
  REQUEST_TIMEOUT = 1,
  DRIVER_ERROR = 2,
  DEVICE_PREEMPT = 3,
  DEVICE_DISCONNECT = 4,
  DCAMERA_ERROR_BEGIN = 1024,
  DCAMERA_ERROR_DEVICE_IN_USE,
  DCAMERA_ERROR_NO_PERMISSION,
};

[mini, lite, full] enum StreamError : int {
  UNKNOWN_ERROR = 0,
  BUFFER_LOST = 1,
};

[mini, lite, full] struct StreamInfo {
  int streamId_;
  int width_;
  int height_;
  int format_;
  int dataspace_;
  ohos.hdi.camera.v1_0.StreamIntent intent_;
  boolean tunneledMode_;
  ohos.hdi.camera.v1_0.BufferProducerSequenceable bufferQueue_;
  int minFrameDuration_;
  ohos.hdi.camera.v1_0.EncodeType encodeType_;
};

[mini, lite, full] struct StreamAttribute {
  int streamId_;
  int width_;
  int height_;
  int overrideFormat_;
  int overrideDataspace_;
  int producerUsage_;
  int producerBufferCount_;
  int maxBatchCaptureCount_;
  int maxCaptureCount_;
};

[mini, lite, full] struct CaptureInfo {
  int[] streamIds_;
  unsigned char[] captureSetting_;
  boolean enableShutterCallback_;
};

[mini, lite, full] struct CaptureEndedInfo {
  int streamId_;
  int frameCount_;
};

[mini, lite, full] struct CaptureErrorInfo {
  int streamId_;
  ohos.hdi.camera.v1_0.StreamError error_;
};


AST[name: ICameraDevice file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/camera_v1_1/foo/camera/v1_0/ICameraDevice.idl]
package ohos.hdi.camera.v1_0;

import ohos.hdi.camera.v1_0.Types;
import ohos.hdi.camera.v1_0.IStreamOperator;
import ohos.hdi.camera.v1_0.IStreamOperatorCallback;

[mini, lite, full] interface ICameraDevice {
    [mini, lite, full] GetStreamOperator(
      [in] ohos.hdi.camera.v1_0.IStreamOperatorCallback callbackObj,
      [out] ohos.hdi.camera.v1_0.IStreamOperator streamOperator);

    [mini, lite, full] UpdateSettings(
      [in] unsigned char[] settings);

    [mini, lite, full] SetResultMode(
      [in] ohos.hdi.camera.v1_0.ResultCallbackMode mode);

    [mini, lite, full] GetEnabledResults(
      [out] int[] results);

    [mini, lite, full] EnableResult(
      [in] int[] results);

    [mini, lite, full] DisableResult(
      [in] int[] results);

    [mini, lite, full] Close();
}


AST[name: BufferProducerSequenceable file: ]
package ohos.hdi.camera.v1_0;


