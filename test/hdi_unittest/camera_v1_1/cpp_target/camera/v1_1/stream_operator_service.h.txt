/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CAMERA_V1_1_STREAMOPERATORSERVICE_H
#define OHOS_HDI_CAMERA_V1_1_STREAMOPERATORSERVICE_H

#include "v1_1/istream_operator.h"

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_1 {
class StreamOperatorService : public OHOS::HDI::Camera::V1_1::IStreamOperator {
public:
    StreamOperatorService() = default;
    virtual ~StreamOperatorService() = default;

    int32_t IsStreamsSupported_V1_1(OHOS::HDI::Camera::V1_1::OperationMode_V1_1 mode,
         const std::vector<uint8_t>& modeSetting, const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& infos, OHOS::HDI::Camera::V1_0::StreamSupportType& type) override;

    int32_t CreateStreams_V1_1(const std::vector<OHOS::HDI::Camera::V1_1::StreamInfo_V1_1>& streamInfos) override;

    int32_t CommitStreams_V1_1(OHOS::HDI::Camera::V1_1::OperationMode_V1_1 mode,
         const std::vector<uint8_t>& modeSetting) override;

    int32_t IsStreamsSupported(OHOS::HDI::Camera::V1_0::OperationMode mode, const std::vector<uint8_t>& modeSetting,
         const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& infos, OHOS::HDI::Camera::V1_0::StreamSupportType& type) override;

    int32_t CreateStreams(const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& streamInfos) override;

    int32_t ReleaseStreams(const std::vector<int32_t>& streamIds) override;

    int32_t CommitStreams(OHOS::HDI::Camera::V1_0::OperationMode mode,
         const std::vector<uint8_t>& modeSetting) override;

    int32_t GetStreamAttributes(std::vector<OHOS::HDI::Camera::V1_0::StreamAttribute>& attributes) override;

    int32_t AttachBufferQueue(int32_t streamId,
         const sptr<OHOS::HDI::Camera::V1_0::BufferProducerSequenceable>& bufferProducer) override;

    int32_t DetachBufferQueue(int32_t streamId) override;

    int32_t Capture(int32_t captureId, const OHOS::HDI::Camera::V1_0::CaptureInfo& info, bool isStreaming) override;

    int32_t CancelCapture(int32_t captureId) override;

    int32_t ChangeToOfflineStream(const std::vector<int32_t>& streamIds,
         const sptr<OHOS::HDI::Camera::V1_0::IStreamOperatorCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_0::IOfflineStreamOperator>& offlineOperator) override;

};
} // V1_1
} // Camera
} // HDI
} // OHOS

#endif // OHOS_HDI_CAMERA_V1_1_STREAMOPERATORSERVICE_H

