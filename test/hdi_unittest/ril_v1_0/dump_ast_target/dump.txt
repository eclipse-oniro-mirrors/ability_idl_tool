AST[name: IRil file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/ril_v1_0/foo/ril/v1_0/IRil.idl]
package ohos.hdi.ril.v1_0;

import ohos.hdi.ril.v1_0.Types;
import ohos.hdi.ril.v1_0.IRilCallback;

[mini, lite, full] interface IRil {
    [mini, lite, full, oneway] SetCallback(
      [in] ohos.hdi.ril.v1_0.IRilCallback rilCallback);

    [mini, lite, full, oneway] SetEmergencyCallList(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.EmergencyInfoList emergencyInfoList);

    [mini, lite, full, oneway] GetEmergencyCallList(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetCallList(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] Dial(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DialInfo dialInfo);

    [mini, lite, full, oneway] Reject(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] Hangup(
      [in] int slotId,
      [in] int serialId,
      [in] int callId);

    [mini, lite, full, oneway] Answer(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] HoldCall(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] UnHoldCall(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SwitchCall(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] CombineConference(
      [in] int slotId,
      [in] int serialId,
      [in] int callType);

    [mini, lite, full, oneway] SeparateConference(
      [in] int slotId,
      [in] int serialId,
      [in] int callId,
      [in] int callType);

    [mini, lite, full, oneway] GetCallWaiting(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetCallWaiting(
      [in] int slotId,
      [in] int serialId,
      [in] int activate);

    [mini, lite, full, oneway] GetCallTransferInfo(
      [in] int slotId,
      [in] int serialId,
      [in] int reason);

    [mini, lite, full, oneway] SetCallTransferInfo(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.CallForwardSetInfo callForwardSetInfo);

    [mini, lite, full, oneway] GetCallRestriction(
      [in] int slotId,
      [in] int serialId,
      [in] std::string fac);

    [mini, lite, full, oneway] SetCallRestriction(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.CallRestrictionInfo callRestrictionInfo);

    [mini, lite, full, oneway] GetClip(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetClip(
      [in] int slotId,
      [in] int serialId,
      [in] int action);

    [mini, lite, full, oneway] GetClir(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetClir(
      [in] int slotId,
      [in] int serialId,
      [in] int action);

    [mini, lite, full, oneway] SetCallPreferenceMode(
      [in] int slotId,
      [in] int serialId,
      [in] int mode);

    [mini, lite, full, oneway] GetCallPreferenceMode(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetUssd(
      [in] int slotId,
      [in] int serialId,
      [in] std::string str);

    [mini, lite, full, oneway] GetUssd(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetMute(
      [in] int slotId,
      [in] int serialId,
      [in] int mute);

    [mini, lite, full, oneway] GetMute(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetCallFailReason(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] CallSupplement(
      [in] int slotId,
      [in] int serialId,
      [in] int type);

    [mini, lite, full, oneway] SendDtmf(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DtmfInfo dtmfInfo);

    [mini, lite, full, oneway] StartDtmf(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DtmfInfo dtmfInfo);

    [mini, lite, full, oneway] StopDtmf(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DtmfInfo dtmfInfo);

    [mini, lite, full, oneway] SetBarringPassword(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SetBarringInfo setBarringInfo);

    [mini, lite, full, oneway] ActivatePdpContext(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataCallInfo dataCallInfo);

    [mini, lite, full, oneway] DeactivatePdpContext(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.UniInfo uniInfo);

    [mini, lite, full, oneway] GetPdpContextList(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.UniInfo uniInfo);

    [mini, lite, full, oneway] SetInitApnInfo(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataProfileDataInfo dataProfileDataInfo);

    [mini, lite, full, oneway] GetLinkBandwidthInfo(
      [in] int slotId,
      [in] int serialId,
      [in] int cid);

    [mini, lite, full, oneway] SetLinkBandwidthReportingRule(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataLinkBandwidthReportingRule dataLinkBandwidthReportingRule);

    [mini, lite, full, oneway] SetDataPermitted(
      [in] int slotId,
      [in] int serialId,
      [in] int dataPermitted);

    [mini, lite, full, oneway] SetDataProfileInfo(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataProfilesInfo dataProfilesInfo);

    [mini, lite, full, oneway] SendDataPerformanceMode(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataPerformanceInfo dataPerformanceInfo);

    [mini, lite, full, oneway] SendDataSleepMode(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.DataSleepInfo dataSleepInfo);

    [mini, lite, full, oneway] SetRadioState(
      [in] int slotId,
      [in] int serialId,
      [in] int fun,
      [in] int rst);

    [mini, lite, full, oneway] GetRadioState(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetImei(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetMeid(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetVoiceRadioTechnology(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetBasebandVersion(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] ShutDown(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetSimIO(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SimIoRequestInfo simIO);

    [mini, lite, full, oneway] GetSimStatus(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetImsi(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetSimLockStatus(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SimLockInfo simLockInfo);

    [mini, lite, full, oneway] SetSimLock(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SimLockInfo simLockInfo);

    [mini, lite, full, oneway] ChangeSimPassword(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SimPasswordInfo simPassword);

    [mini, lite, full, oneway] UnlockPin(
      [in] int slotId,
      [in] int serialId,
      [in] std::string pin);

    [mini, lite, full, oneway] UnlockPuk(
      [in] int slotId,
      [in] int serialId,
      [in] std::string puk,
      [in] std::string pin);

    [mini, lite, full, oneway] UnlockPin2(
      [in] int slotId,
      [in] int serialId,
      [in] std::string pin2);

    [mini, lite, full, oneway] UnlockPuk2(
      [in] int slotId,
      [in] int serialId,
      [in] std::string puk2,
      [in] std::string pin2);

    [mini, lite, full, oneway] SetActiveSim(
      [in] int slotId,
      [in] int serialId,
      [in] int index,
      [in] int enable);

    [mini, lite, full, oneway] SimStkSendTerminalResponse(
      [in] int slotId,
      [in] int serialId,
      [in] std::string strCmd);

    [mini, lite, full, oneway] SimStkSendEnvelope(
      [in] int slotId,
      [in] int serialId,
      [in] std::string strCmd);

    [mini, lite, full, oneway] SimStkSendCallSetupRequestResult(
      [in] int slotId,
      [in] int serialId,
      [in] int accept);

    [mini, lite, full, oneway] SimStkIsReady(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetRadioProtocol(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetRadioProtocol(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.RadioProtocol radioProtocol);

    [mini, lite, full, oneway] SimOpenLogicalChannel(
      [in] int slotId,
      [in] int serialId,
      [in] std::string appID,
      [in] int p2);

    [mini, lite, full, oneway] SimCloseLogicalChannel(
      [in] int slotId,
      [in] int serialId,
      [in] int channelId);

    [mini, lite, full, oneway] SimTransmitApduLogicalChannel(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.ApduSimIORequestInfo apduSimIO);

    [mini, lite, full, oneway] SimTransmitApduBasicChannel(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.ApduSimIORequestInfo apduSimIO);

    [mini, lite, full, oneway] SimAuthentication(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SimAuthenticationRequestInfo simAuthInfo);

    [mini, lite, full, oneway] UnlockSimLock(
      [in] int slotId,
      [in] int serialId,
      [in] int lockType,
      [in] std::string key);

    [mini, lite, full, oneway] GetSignalStrength(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetCsRegStatus(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetPsRegStatus(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetOperatorInfo(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetNetworkSearchInformation(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetNetworkSelectionMode(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetNetworkSelectionMode(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SetNetworkModeInfo networkModeInfo);

    [mini, lite, full, oneway] GetNeighboringCellInfoList(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetCurrentCellInfo(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetPreferredNetwork(
      [in] int slotId,
      [in] int serialId,
      [in] int preferredNetworkType);

    [mini, lite, full, oneway] GetPreferredNetwork(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] GetPhysicalChannelConfig(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetLocateUpdates(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.RilRegNotifyMode mode);

    [mini, lite, full, oneway] SetNotificationFilter(
      [in] int slotId,
      [in] int serialId,
      [in] int newFilter);

    [mini, lite, full, oneway] SetDeviceState(
      [in] int slotId,
      [in] int serialId,
      [in] int deviceStateType,
      [in] int deviceStateOn);

    [mini, lite, full, oneway] SendGsmSms(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.GsmSmsMessageInfo gsmSmsMessageInfo);

    [mini, lite, full, oneway] SendCdmaSms(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SendCdmaSmsMessageInfo cdmaSmsMessageInfo);

    [mini, lite, full, oneway] AddSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SmsMessageIOInfo gsmSmsMessageInfo);

    [mini, lite, full, oneway] DelSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] int index);

    [mini, lite, full, oneway] UpdateSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SmsMessageIOInfo gsmSmsMessageInfo);

    [mini, lite, full, oneway] AddCdmaSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SmsMessageIOInfo cdmaSmsMessageInfo);

    [mini, lite, full, oneway] DelCdmaSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] int index);

    [mini, lite, full, oneway] UpdateCdmaSimMessage(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.SmsMessageIOInfo cdmaSmsMessageInfo);

    [mini, lite, full, oneway] SetSmscAddr(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.ServiceCenterAddress serviceCenterAddress);

    [mini, lite, full, oneway] GetSmscAddr(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetCBConfig(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.CBConfigInfo cellBroadcastInfo);

    [mini, lite, full, oneway] GetCBConfig(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SetCdmaCBConfig(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.CdmaCBConfigInfoList cdmaCBConfigInfoList);

    [mini, lite, full, oneway] GetCdmaCBConfig(
      [in] int slotId,
      [in] int serialId);

    [mini, lite, full, oneway] SendSmsMoreMode(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.GsmSmsMessageInfo gsmSmsMessageInfo);

    [mini, lite, full, oneway] SendSmsAck(
      [in] int slotId,
      [in] int serialId,
      [in] ohos.hdi.ril.v1_0.ModeData modeData);

    [mini, lite, full, oneway] SendRilAck();
}


AST[name: IRilCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/ril_v1_0/foo/ril/v1_0/IRilCallback.idl]
package ohos.hdi.ril.v1_0;

import ohos.hdi.ril.v1_0.Types;

[mini, lite, full, callback] interface IRilCallback {
    [mini, lite, full, callback] CallEmergencyNotice(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.EmergencyInfoList emergencyInfoList);

    [mini, lite, full, callback] CallStateUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] CallRingbackVoiceNotice(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.RingbackVoice ringbackVoice);

    [mini, lite, full, callback] CallSrvccStatusNotice(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SrvccStatus srvccStatus);

    [mini, lite, full, callback] CallUssdNotice(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.UssdNoticeInfo ussdNoticeInfo);

    [mini, lite, full, callback] CallSsNotice(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SsNoticeInfo ssNoticeInfo);

    [mini, lite, full, callback] CallRsrvccStatusNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetEmergencyCallListResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetEmergencyCallListResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.EmergencyInfoList emergencyInfoList);

    [mini, lite, full, callback] GetCallListResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CallInfoList callList);

    [mini, lite, full, callback] DialResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] HangupResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] RejectResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] AnswerResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] HoldCallResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] UnHoldCallResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SwitchCallResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetClipResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.GetClipResult getClipResult);

    [mini, lite, full, callback] SetClipResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] CombineConferenceResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SeparateConferenceResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] CallSupplementResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCallWaitingResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CallWaitResult callWaitResult);

    [mini, lite, full, callback] SetCallWaitingResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCallTransferInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CallForwardQueryInfoList cFQueryList);

    [mini, lite, full, callback] SetCallTransferInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCallRestrictionResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CallRestrictionResult result);

    [mini, lite, full, callback] SetCallRestrictionResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetClirResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.GetClirResult getClirResult);

    [mini, lite, full, callback] SetClirResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] StartDtmfResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SendDtmfResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] StopDtmfResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCallPreferenceModeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int mode);

    [mini, lite, full, callback] SetCallPreferenceModeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetUssdResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetUssdResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int cusd);

    [mini, lite, full, callback] SetMuteResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetMuteResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int mute);

    [mini, lite, full, callback] GetCallFailReasonResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int callFail);

    [mini, lite, full, callback] SetBarringPasswordResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] PdpContextListUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.DataCallResultList dataCallResultList);

    [mini, lite, full, callback] ActivatePdpContextResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SetupDataCallResultInfo setupDataCallResultInfo);

    [mini, lite, full, callback] DeactivatePdpContextResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetPdpContextListResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.DataCallResultList dataCallResultList);

    [mini, lite, full, callback] SetInitApnInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetLinkBandwidthInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.DataLinkBandwidthInfo dataLinkBandwidthInfo);

    [mini, lite, full, callback] SetLinkBandwidthReportingRuleResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetDataPermittedResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] RadioStateUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int state);

    [mini, lite, full, callback] VoiceRadioTechUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.VoiceRadioTechnology voiceRadioTechnology);

    [mini, lite, full, callback] ShutDownResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetRadioStateResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetRadioStateResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int state);

    [mini, lite, full, callback] GetImeiResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string imei);

    [mini, lite, full, callback] GetMeidResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string meid);

    [mini, lite, full, callback] GetVoiceRadioTechnologyResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.VoiceRadioTechnology voiceRadioTechnology);

    [mini, lite, full, callback] GetBasebandVersionResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string basebandVersion);

    [mini, lite, full, callback] SimStateUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkSessionEndNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkProactiveNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string response);

    [mini, lite, full, callback] SimStkAlphaNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string response);

    [mini, lite, full, callback] SimStkEventNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string response);

    [mini, lite, full, callback] SimStkCallSetupNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimRefreshNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimRadioProtocolUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.RadioProtocol radioProtocol);

    [mini, lite, full, callback] GetSimIOResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.IccIoResultInfo result);

    [mini, lite, full, callback] GetSimStatusResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CardStatusInfo result);

    [mini, lite, full, callback] GetImsiResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string response);

    [mini, lite, full, callback] GetSimLockStatusResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int simLockStatus);

    [mini, lite, full, callback] SetSimLockResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] ChangeSimPasswordResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] UnlockPinResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] UnlockPukResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] UnlockPin2Response(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] UnlockPuk2Response(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] SetActiveSimResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkSendTerminalResponseResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkSendEnvelopeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkSendCallSetupRequestResultResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimStkIsReadyResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetRadioProtocolResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.RadioProtocol radioProtocol);

    [mini, lite, full, callback] SetRadioProtocolResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.RadioProtocol radioProtocol);

    [mini, lite, full, callback] SimOpenLogicalChannelResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.OpenLogicalChannelResponse pOpenLogicalChannelResponse);

    [mini, lite, full, callback] SimCloseLogicalChannelResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SimTransmitApduLogicalChannelResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.IccIoResultInfo result);

    [mini, lite, full, callback] SimTransmitApduBasicChannelResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.IccIoResultInfo result);

    [mini, lite, full, callback] SimAuthenticationResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.IccIoResultInfo result);

    [mini, lite, full, callback] UnlockSimLockResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.LockStatusResp lockStatus);

    [mini, lite, full, callback] NetworkCsRegStatusUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CsRegStatusInfo csRegStatusInfo);

    [mini, lite, full, callback] NetworkPsRegStatusUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.PsRegStatusInfo psRegStatusInfo);

    [mini, lite, full, callback] SignalStrengthUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.Rssi rssi);

    [mini, lite, full, callback] NetworkTimeZoneUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string timeZoneStr);

    [mini, lite, full, callback] NetworkTimeUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] std::string timeStr);

    [mini, lite, full, callback] NetworkPhyChnlCfgUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.ChannelConfigInfoList channelConfigInfoList);

    [mini, lite, full, callback] NetworkCurrentCellUpdated(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CellListCurrentInfo cellListCurrentInfo);

    [mini, lite, full, callback] GetSignalStrengthResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.Rssi rssi);

    [mini, lite, full, callback] GetCsRegStatusResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CsRegStatusInfo csRegStatusInfo);

    [mini, lite, full, callback] GetPsRegStatusResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.PsRegStatusInfo psRegStatusInfo);

    [mini, lite, full, callback] GetOperatorInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.OperatorInfo psRegStatusInfo);

    [mini, lite, full, callback] GetNetworkSearchInformationResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.AvailableNetworkList availableNetworkList);

    [mini, lite, full, callback] GetNetworkSelectionModeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SetNetworkModeInfo setNetworkModeInfo);

    [mini, lite, full, callback] SetNetworkSelectionModeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetNeighboringCellInfoListResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CellListNearbyInfo cellListNearbyInfo);

    [mini, lite, full, callback] GetCurrentCellInfoResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CellListCurrentInfo cellListCurrentInfo);

    [mini, lite, full, callback] SetPreferredNetworkResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetPreferredNetworkResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.PreferredNetworkTypeInfo preferredNetworkTypeInfo);

    [mini, lite, full, callback] GetPhysicalChannelConfigResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.ChannelConfigInfoList channelConfigInfoList);

    [mini, lite, full, callback] SetLocateUpdatesResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetNotificationFilterResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetDeviceStateResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] NewSmsNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SmsMessageInfo smsMessageInfo);

    [mini, lite, full, callback] NewCdmaSmsNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SmsMessageInfo smsMessageInfo);

    [mini, lite, full, callback] SmsStatusReportNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SmsMessageInfo smsMessageInfo);

    [mini, lite, full, callback] NewSmsStoredOnSimNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] int recordNumber,
      [in] int indicationType);

    [mini, lite, full, callback] CBConfigNotify(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CBConfigReportInfo cellBroadConfigReportInfo);

    [mini, lite, full, callback] SendGsmSmsResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SendSmsResultInfo sendSmsResultInfo);

    [mini, lite, full, callback] SendCdmaSmsResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SendSmsResultInfo sendSmsResultInfo);

    [mini, lite, full, callback] AddSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] DelSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] UpdateSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] AddCdmaSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] DelCdmaSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] UpdateCdmaSimMessageResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] SetSmscAddrResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetSmscAddrResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.ServiceCenterAddress serviceCenterAddress);

    [mini, lite, full, callback] SetCBConfigResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCBConfigResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CBConfigInfo cellBroadcastInfo);

    [mini, lite, full, callback] SetCdmaCBConfigResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] GetCdmaCBConfigResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.CdmaCBConfigInfo cdmaCBConfigInfo);

    [mini, lite, full, callback] SendSmsMoreModeResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo,
      [in] ohos.hdi.ril.v1_0.SendSmsResultInfo sendSmsResultInfo);

    [mini, lite, full, callback] SendSmsAckResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);

    [mini, lite, full, callback] CommonErrorResponse(
      [in] ohos.hdi.ril.v1_0.RilRadioResponseInfo responseInfo);
}


AST[name: Types file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/ril_v1_0/foo/ril/v1_0/Types.idl]
package ohos.hdi.ril.v1_0;

[mini, lite, full] enum EccType : int {
  TYPE_CATEGORY = 0,
  TYPE_POLICE = 1,
  TYPE_AMBULANCE = 2,
  TYPE_FIRE = 4,
  TYPE_SEA = 8,
  TYPE_MOUNTAIN = 16,
};

[mini, lite, full] enum SimpresentType : int {
  TYPE_NO_CARD = 0,
  TYPE_HAS_CARD = 1,
};

[mini, lite, full] enum AbnormalServiceType : int {
  TYPE_ALL = 0,
  TYPE_ONLY_CS = 1,
};

[mini, lite, full] enum RilErrType : int {
  NONE = 0,
  RIL_ERR_GENERIC_FAILURE = 1,
  RIL_ERR_INVALID_PARAMETER = 2,
  RIL_ERR_MEMORY_FULL = 3,
  RIL_ERR_CMD_SEND_FAILURE = 4,
  RIL_ERR_CMD_NO_CARRIER = 5,
  RIL_ERR_INVALID_RESPONSE = 6,
  RIL_ERR_REPEAT_STATUS = 7,
  RIL_ERR_NETWORK_SEARCHING = 8,
  RIL_ERR_NETWORK_SEARCHING_INTERRUPTED = 9,
  RIL_ERR_MODEM_DEVICE_CLOSE = 10,
  RIL_ERR_NO_SIMCARD_INSERTED = 11,
  RIL_ERR_NEED_PIN_CODE = 12,
  RIL_ERR_NEED_PUK_CODE = 13,
  RIL_ERR_NETWORK_SEARCH_TIMEOUT = 14,
  RIL_ERR_PINPUK_PASSWORD_NOCORRECT = 15,
  RIL_ERR_INVALID_MODEM_PARAMETER = 50,
  RIL_ERR_HDF_IPC_FAILURE = 300,
  RIL_ERR_NULL_POINT = 301,
  RIL_ERR_VENDOR_NOT_IMPLEMENT = 302,
};

[mini, lite, full] enum RilResponseTypes : int {
  RIL_RESPONSE_REQUEST = 0,
  RIL_RESPONSE_NOTICE = 1,
  RIL_RESPONSE_REQUEST_ACK = 2,
  RIL_RESPONSE_REQUEST_MUST_ACK = 3,
  RIL_RESPONSE_NOTICE_MUST_ACK = 4,
};

[mini, lite, full] enum RilSrvStatus : int {
  RIL_NO_SRV_SERVICE = 0,
  RIL_RESTRICTED_SERVICE = 1,
  RIL_SERVICE_VALID = 2,
  RIL_REGIONAL_SERVICE = 3,
  RIL_ENERGY_SAVING_SERVICE = 4,
};

[mini, lite, full] enum RilSrvDomain : int {
  RIL_NO_DOMAIN_SERVICE = 0,
  RIL_CS_SERVICE = 1,
  RIL_PS_SERVICE = 2,
  RIL_CS_PS_SERVICE = 3,
  RIL_CS_PS_SEARCHING = 4,
  RIL_CDMA_NOT_SUPPORT = 255,
};

[mini, lite, full] enum RilRoamStatus : int {
  RIL_NO_ROAM = 0,
  RIL_ROAMING = 1,
  RIL_ROAM_UNKNOWN = 2,
};

[mini, lite, full] enum RilSimLockStatus : int {
  RIL_SIM_CARD_UNLOCK = 0,
  RIL_SIM_CARD_LOCK = 1,
};

[mini, lite, full] enum RilSysMode : int {
  RIL_NO_SYSMODE_SERVICE = 0,
  RIL_GSM_MODE = 1,
  RIL_CDMA_MODE = 2,
  RIL_WCDMA_MODE = 3,
  RIL_TDSCDMA_MODE = 4,
  RIL_WIMAX_MODE = 5,
  RIL_LTE_MODE = 6,
  RIL_LTE_CA_MODE = 7,
  RIL_NR_MODE = 8,
};

[mini, lite, full] enum RilRadioTech : int {
  RADIO_TECHNOLOGY_INVALID = 65535,
  RADIO_TECHNOLOGY_UNKNOWN = 0,
  RADIO_TECHNOLOGY_GSM = 1,
  RADIO_TECHNOLOGY_1XRTT = 2,
  RADIO_TECHNOLOGY_WCDMA = 3,
  RADIO_TECHNOLOGY_HSPA = 4,
  RADIO_TECHNOLOGY_HSPAP = 5,
  RADIO_TECHNOLOGY_TD_SCDMA = 6,
  RADIO_TECHNOLOGY_EVDO = 7,
  RADIO_TECHNOLOGY_EHRPD = 8,
  RADIO_TECHNOLOGY_LTE = 9,
  RADIO_TECHNOLOGY_LTE_CA = 10,
  RADIO_TECHNOLOGY_IWLAN = 11,
  RADIO_TECHNOLOGY_NR = 12,
};

[mini, lite, full] enum RilSimStatus : int {
  RIL_USIM_INVALID = 0,
  RIL_USIM_VALID = 1,
  RIL_USIM_CS_INVALID = 2,
  RIL_USIM_PS_INVALID = 3,
  RIL_USIM_CS_PS_INVALID = 4,
  RIL_ROM_SIM = 240,
  RIL_NO_USIM = 255,
};

[mini, lite, full] enum RilRegStatus : int {
  NO_REG_MT_NO_SEARCH = 0,
  REG_MT_HOME = 1,
  NO_REG_MT_SEARCHING = 2,
  REG_MT_REJECTED = 3,
  REG_MT_UNKNOWN = 4,
  REG_MT_ROAMING = 5,
  REG_MT_EMERGENCY = 6,
};

[mini, lite, full] enum RilCellConnectionStatus : int {
  RIL_SERVING_CELL_UNKNOWN = 0,
  RIL_SERVING_CELL_PRIMARY = 1,
  RIL_SERVING_CELL_SECONDARY = 2,
};

[mini, lite, full] enum RilRegNotifyMode : int {
  REG_NOT_NOTIFY = 0,
  REG_NOTIFY_STAT_ONLY = 1,
  REG_NOTIFY_STAT_LAC_CELLID = 2,
};

[mini, lite, full] enum RadioProtocolPhase : int {
  RADIO_PROTOCOL_PHASE_INITIAL,
  RADIO_PROTOCOL_PHASE_CHECK,
  RADIO_PROTOCOL_PHASE_UPDATE,
  RADIO_PROTOCOL_PHASE_NOTIFY,
  RADIO_PROTOCOL_PHASE_COMPLETE,
};

[mini, lite, full] enum RadioProtocolStatus : int {
  RADIO_PROTOCOL_STATUS_NONE,
  RADIO_PROTOCOL_STATUS_SUCCESS,
  RADIO_PROTOCOL_STATUS_FAIL,
};

[mini, lite, full] struct EmergencyCall {
  int index;
  int total;
  std::string eccNum;
  std::string mcc;
  ohos.hdi.ril.v1_0.EccType eccType;
  ohos.hdi.ril.v1_0.SimpresentType simpresent;
  ohos.hdi.ril.v1_0.AbnormalServiceType abnormalService;
};

[mini, lite, full] struct EmergencyInfoList {
  int callSize;
  int flag;
  List<ohos.hdi.ril.v1_0.EmergencyCall> calls;
};

[mini, lite, full] struct RilRadioResponseInfo {
  int slotId;
  int flag;
  int serial;
  ohos.hdi.ril.v1_0.RilErrType error;
  ohos.hdi.ril.v1_0.RilResponseTypes type;
};

[mini, lite, full] struct SetupDataCallResultInfo {
  int flag;
  int reason;
  int retryTime;
  int cid;
  int active;
  int maxTransferUnit;
  int pduSessionId;
  std::string type;
  std::string netPortName;
  std::string address;
  std::string dns;
  std::string dnsSec;
  std::string gateway;
  std::string pCscfPrimAddr;
  std::string pCscfSecAddr;
};

[mini, lite, full] struct DataCallResultList {
  int size;
  List<ohos.hdi.ril.v1_0.SetupDataCallResultInfo> dcList;
};

[mini, lite, full] struct DataProfileDataInfo {
  int serial;
  int profileId;
  int authenticationType;
  std::string apn;
  std::string protocol;
  std::string roamingProtocol;
  std::string userName;
  std::string password;
};

[mini, lite, full] struct DataProfilesInfo {
  int serial;
  int profilesSize;
  boolean isRoaming;
  List<ohos.hdi.ril.v1_0.DataProfileDataInfo> profiles;
};

[mini, lite, full] struct DataCallInfo {
  int serial;
  int radioTechnology;
  boolean modemCognitive;
  boolean roamingAllowed;
  boolean isRoaming;
  ohos.hdi.ril.v1_0.DataProfileDataInfo dataProfileInfo;
};

[mini, lite, full] struct DataLinkBandwidthInfo {
  int serial;
  int cid;
  int qi;
  int dlGfbr;
  int ulGfbr;
  int dlMfbr;
  int ulMfbr;
  int ulSambr;
  int dlSambr;
  int averagingWindow;
};

[mini, lite, full] struct DataLinkBandwidthReportingRule {
  int serial;
  int rat;
  int delayMs;
  int delayUplinkKbps;
  int delayDownlinkKbps;
  int maximumUplinkKbpsSize;
  int maximumDownlinkKbpsSize;
  List<int> maximumUplinkKbps;
  List<int> maximumDownlinkKbps;
};

[mini, lite, full] struct DataPerformanceInfo {
  int performanceEnable;
  int enforce;
};

[mini, lite, full] struct DataSleepInfo {
  int sleepEnable;
};

[mini, lite, full] struct UniInfo {
  int serial;
  int gsmIndex;
  boolean flag;
  int arg1;
  int arg2;
  std::string strTmp;
};

[mini, lite, full] struct VoiceRadioTechnology {
  ohos.hdi.ril.v1_0.RilSrvStatus srvStatus;
  ohos.hdi.ril.v1_0.RilSrvDomain srvDomain;
  ohos.hdi.ril.v1_0.RilRoamStatus roamStatus;
  ohos.hdi.ril.v1_0.RilSimStatus simStatus;
  ohos.hdi.ril.v1_0.RilSimLockStatus lockStatus;
  ohos.hdi.ril.v1_0.RilSysMode sysMode;
  std::string sysModeName;
  ohos.hdi.ril.v1_0.RilRadioTech actType;
  std::string actName;
  int flag;
};

[mini, lite, full] struct DialInfo {
  int serial;
  int clir;
  std::string address;
};

[mini, lite, full] struct CallInfo {
  int index;
  int dir;
  int state;
  int mode;
  int mpty;
  int voiceDomain;
  int callType;
  int type;
  std::string number;
  std::string alpha;
};

[mini, lite, full] struct CallInfoList {
  int callSize;
  int flag;
  List<ohos.hdi.ril.v1_0.CallInfo> calls;
};

[mini, lite, full] struct GetClipResult {
  int result;
  int action;
  int clipStat;
};

[mini, lite, full] struct GetClirResult {
  int result;
  int action;
  int clirStat;
};

[mini, lite, full] struct CallWaitResult {
  int result;
  int status;
  int classCw;
};

[mini, lite, full] struct CallRestrictionInfo {
  int mode;
  std::string fac;
  std::string password;
};

[mini, lite, full] struct CallRestrictionResult {
  int result;
  int status;
  int classCw;
};

[mini, lite, full] struct CallForwardSetInfo {
  int reason;
  int mode;
  int classx;
  std::string number;
};

[mini, lite, full] struct CallForwardQueryResult {
  int serial;
  int result;
  int status;
  int classx;
  int type;
  int reason;
  int time;
  std::string number;
};

[mini, lite, full] struct CallForwardQueryInfoList {
  int callSize;
  int flag;
  List<ohos.hdi.ril.v1_0.CallForwardQueryResult> calls;
};

[mini, lite, full] struct UssdNoticeInfo {
  int type;
  std::string message;
};

[mini, lite, full] struct SsNoticeInfo {
  int serviceType;
  int requestType;
  int serviceClass;
  int result;
};

[mini, lite, full] struct SrvccStatus {
  int status;
};

[mini, lite, full] struct RingbackVoice {
  int status;
};

[mini, lite, full] struct DtmfInfo {
  int callId;
  int onLength;
  int offLength;
  int stringLength;
  std::string dtmfKey;
};

[mini, lite, full] struct SetBarringInfo {
  std::string fac;
  std::string oldPassword;
  std::string newPassword;
};

[mini, lite, full] struct CardStatusInfo {
  int index;
  int simType;
  int simState;
};

[mini, lite, full] struct SimIoRequestInfo {
  int command;
  int fileId;
  int p1;
  int p2;
  int p3;
  int serial;
  std::string data;
  std::string path;
  std::string pin2;
  std::string aid;
};

[mini, lite, full] struct IccIoResultInfo {
  int sw1;
  int sw2;
  std::string response;
};

[mini, lite, full] struct SimLockInfo {
  int classx;
  int serial;
  std::string fac;
  int mode;
  int status;
  std::string passwd;
};

[mini, lite, full] struct SimPasswordInfo {
  std::string fac;
  std::string oldPassword;
  std::string newPassword;
  int serial;
  int passwordLength;
};

[mini, lite, full] struct SimPinInputTimes {
  int serial;
  int times;
  int pukTimes;
  int pinTimes;
  int puk2Times;
  int pin2Times;
  std::string code;
};

[mini, lite, full] struct ApduSimIORequestInfo {
  int serial;
  int channelId;
  int type;
  int instruction;
  int p1;
  int p2;
  int p3;
  std::string data;
};

[mini, lite, full] struct SimAuthenticationRequestInfo {
  int serial;
  std::string aid;
  std::string authData;
};

[mini, lite, full] struct OpenLogicalChannelResponse {
  int sw1;
  int sw2;
  int channelId;
  std::string response;
};

[mini, lite, full] struct LockStatusResp {
  int result;
  int remain;
};

[mini, lite, full] struct RadioProtocol {
  int slotId;
  int sessionId;
  ohos.hdi.ril.v1_0.RadioProtocolPhase phase;
  int technology;
  int modemId;
  ohos.hdi.ril.v1_0.RadioProtocolStatus status;
};

[mini, lite, full] struct GsmRssi {
  int rxlev;
  int ber;
};

[mini, lite, full] struct CdmaRssi {
  int absoluteRssi;
  int ecno;
};

[mini, lite, full] struct WcdmaRssi {
  int rxlev;
  int ecio;
  int rscp;
  int ber;
};

[mini, lite, full] struct LteRssi {
  int rxlev;
  int rsrq;
  int rsrp;
  int snr;
};

[mini, lite, full] struct TdScdmaRssi {
  int rscp;
};

[mini, lite, full] struct NrRssi {
  int rsrp;
  int rsrq;
  int sinr;
};

[mini, lite, full] struct Rssi {
  ohos.hdi.ril.v1_0.GsmRssi gw;
  ohos.hdi.ril.v1_0.CdmaRssi cdma;
  ohos.hdi.ril.v1_0.WcdmaRssi wcdma;
  ohos.hdi.ril.v1_0.LteRssi lte;
  ohos.hdi.ril.v1_0.TdScdmaRssi tdScdma;
  ohos.hdi.ril.v1_0.NrRssi nr;
};

[mini, lite, full] struct CsRegStatusInfo {
  int notifyType;
  ohos.hdi.ril.v1_0.RilRegStatus regStatus;
  int lacCode;
  int cellId;
  ohos.hdi.ril.v1_0.RilRadioTech radioTechnology;
  int flag;
};

[mini, lite, full] struct PsRegStatusInfo {
  int notifyType;
  ohos.hdi.ril.v1_0.RilRegStatus regStatus;
  int lacCode;
  int cellId;
  ohos.hdi.ril.v1_0.RilRadioTech radioTechnology;
  boolean isNrAvailable;
  boolean isEnDcAvailable;
  boolean isDcNrRestricted;
};

[mini, lite, full] struct OperatorInfo {
  std::string longName;
  std::string shortName;
  std::string numeric;
};

[mini, lite, full] struct AvailableNetworkInfo {
  std::string longName;
  std::string shortName;
  std::string numeric;
  int status;
  int rat;
};

[mini, lite, full] struct AvailableNetworkList {
  int itemNum;
  List<ohos.hdi.ril.v1_0.AvailableNetworkInfo> availableNetworkInfo;
  int flag;
};

[mini, lite, full] struct SetNetworkModeInfo {
  int selectMode;
  std::string oper;
  int flag;
};

[mini, lite, full] struct CellListRatGsm {
  int band;
  int arfcn;
  int bsic;
  int cellId;
  int lac;
  int rxlev;
};

[mini, lite, full] struct CellListRatLte {
  int arfcn;
  int pci;
  int rsrp;
  int rsrq;
  int rxlev;
};

[mini, lite, full] struct CellListRatWcdma {
  int arfcn;
  int psc;
  int rscp;
  int ecno;
};

[mini, lite, full] struct CellListRatCdma {
  int systemId;
  int networkId;
  int baseId;
  int zoneId;
  int pilotPn;
  int pilotStrength;
  int channel;
  int longitude;
  int latitude;
};

[mini, lite, full] struct CellListRatTdscdma {
  int arfcn;
  int syncId;
  int sc;
  int cellId;
  int lac;
  int rscp;
  int drx;
  int rac;
  int cpid;
};

[mini, lite, full] struct CellListRatNr {
  int nrArfcn;
  int pci;
  int tac;
  int nci;
};

[mini, lite, full] union ServiceCellParas {
  ohos.hdi.ril.v1_0.CellListRatGsm gsm;
  ohos.hdi.ril.v1_0.CellListRatLte lte;
  ohos.hdi.ril.v1_0.CellListRatWcdma wcdma;
  ohos.hdi.ril.v1_0.CellListRatCdma cdma;
  ohos.hdi.ril.v1_0.CellListRatTdscdma tdscdma;
  ohos.hdi.ril.v1_0.CellListRatNr nr;
};

[mini, lite, full] struct CellNearbyInfo {
  int ratType;
  ohos.hdi.ril.v1_0.ServiceCellParas serviceCells;
};

[mini, lite, full] struct CellListNearbyInfo {
  int itemNum;
  List<ohos.hdi.ril.v1_0.CellNearbyInfo> cellNearbyInfo;
};

[mini, lite, full] struct CellRatGsm {
  int band;
  int arfcn;
  int bsic;
  int cellId;
  int lac;
  int rxlev;
  int rxQuality;
  int ta;
};

[mini, lite, full] struct CellRatLte {
  int arfcn;
  int cellId;
  int pci;
  int tac;
  int rsrp;
  int rsrq;
  int rssi;
};

[mini, lite, full] struct CellRatWcdma {
  int arfcn;
  int psc;
  int cellId;
  int lac;
  int rscp;
  int rxlev;
  int ecno;
  int drx;
  int ura;
};

[mini, lite, full] struct CellRatCdma {
  int systemId;
  int networkId;
  int baseId;
  int zoneId;
  int pilotPn;
  int pilotStrength;
  int channel;
  int longitude;
  int latitude;
};

[mini, lite, full] struct CellRatTdscdma {
  int arfcn;
  int syncId;
  int sc;
  int cellId;
  int lac;
  int rscp;
  int drx;
  int rac;
  int cpid;
};

[mini, lite, full] struct CellRatNr {
  int nrArfcn;
  int pci;
  int tac;
  int nci;
};

[mini, lite, full] union CurrentServiceCellParas {
  ohos.hdi.ril.v1_0.CellRatGsm gsm;
  ohos.hdi.ril.v1_0.CellRatLte lte;
  ohos.hdi.ril.v1_0.CellRatWcdma wcdma;
  ohos.hdi.ril.v1_0.CellRatCdma cdma;
  ohos.hdi.ril.v1_0.CellRatTdscdma tdscdma;
  ohos.hdi.ril.v1_0.CellRatNr nr;
};

[mini, lite, full] struct CurrentCellInfo {
  int ratType;
  int mcc;
  int mnc;
  ohos.hdi.ril.v1_0.CurrentServiceCellParas serviceCells;
};

[mini, lite, full] struct CellListCurrentInfo {
  int itemNum;
  List<ohos.hdi.ril.v1_0.CurrentCellInfo> cellCurrentInfo;
};

[mini, lite, full] struct PreferredNetworkTypeInfo {
  int preferredNetworkType;
  int flag;
};

[mini, lite, full] struct PhysicalChannelConfig {
  ohos.hdi.ril.v1_0.RilCellConnectionStatus cellConnStatus;
  ohos.hdi.ril.v1_0.RilRadioTech ratType;
  int cellBandwidthDownlinkKhz;
  int cellBandwidthUplinkKhz;
  int freqRange;
  int downlinkChannelNum;
  int uplinkChannelNum;
  int physicalCellId;
  int contextIdNum;
  List<int> contextIds;
};

[mini, lite, full] struct ChannelConfigInfoList {
  int itemNum;
  List<ohos.hdi.ril.v1_0.PhysicalChannelConfig> channelConfigInfos;
  int flag;
};

[mini, lite, full] struct GsmSmsMessageInfo {
  int serial;
  int state;
  std::string smscPdu;
  std::string pdu;
};

[mini, lite, full] struct SendCdmaSmsMessageInfo {
  int serial;
  int state;
  std::string smscPdu;
};

[mini, lite, full] struct SmsMessageIOInfo {
  int serial;
  std::string smscPdu;
  std::string pdu;
  int state;
  int index;
};

[mini, lite, full] struct ServiceCenterAddress {
  int serial;
  int tosca;
  std::string address;
};

[mini, lite, full] struct CBConfigInfo {
  int serial;
  int mode;
  int indicationType;
  std::string mids;
  std::string dcss;
};

[mini, lite, full] struct CdmaCBConfigInfo {
  int service;
  int language;
  int checked;
};

[mini, lite, full] struct CdmaCBConfigInfoList {
  int serial;
  int size;
  List<ohos.hdi.ril.v1_0.CdmaCBConfigInfo> list;
};

[mini, lite, full] struct CBConfigReportInfo {
  int indicationType;
  int sn;
  int mid;
  int page;
  int pages;
  int length;
  std::string data;
  std::string dcs;
  std::string pdu;
};

[mini, lite, full] struct SmsMessageInfo {
  int indicationType;
  int size;
  List<unsigned char> pdu;
};

[mini, lite, full] struct ModeData {
  int serial;
  boolean result;
  int mode;
  std::string pdu;
};

[mini, lite, full] struct SendSmsResultInfo {
  int msgRef;
  std::string pdu;
  int errCode;
  int flag;
};


