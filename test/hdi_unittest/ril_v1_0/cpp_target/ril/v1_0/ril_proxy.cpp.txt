/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/ril_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    ril_proxy

namespace OHOS {
namespace HDI {
namespace Ril {
namespace V1_0 {


sptr<OHOS::HDI::Ril::V1_0::IRil> OHOS::HDI::Ril::V1_0::IRil::Get(bool isStub)
{
    return IRil::Get("ril_service", isStub);
}

sptr<OHOS::HDI::Ril::V1_0::IRil> OHOS::HDI::Ril::V1_0::IRil::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor());
        std::string svrName = (serviceName == "ril_service") ? "service" : serviceName;
        sptr<OHOS::HDI::Ril::V1_0::IRil> impl = \
            reinterpret_cast<OHOS::HDI::Ril::V1_0::IRil *>(LoadHdiImpl(desc.c_str(), svrName.c_str()));
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        uint32_t serMajorVer = 0;
        uint32_t serMinorVer = 0;
        int32_t rilRet = impl->GetVersion(serMajorVer, serMinorVer);
        if (rilRet != HDF_SUCCESS) {
            HDF_LOGE("%{public}s: get version failed!", __func__);
            return nullptr;
        }

        if (serMajorVer != 1) {
            HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
            return nullptr;
        }
        if (serMinorVer < 0) {
            HDF_LOGE("%{public}s:check Minor version failed! "
                "client minor version(0) should be less or equal to implementation minor version(%u).", __func__, serMinorVer);
            return nullptr;
        }

        return impl;
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Ril::V1_0::RilProxy> proxy = new OHOS::HDI::Ril::V1_0::RilProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Ril::V1_0::RilProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t rilRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    if (serMinorVer < 0) {
        HDF_LOGE("%{public}s:check Minor version failed! "
            "client minor version(0) should be less or equal to server minor version(%u).", __func__, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Reconnect(
    sptr<OHOS::HDI::Ril::V1_0::RilProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Ril::V1_0::RilProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallback(const sptr<OHOS::HDI::Ril::V1_0::IRilCallback>& rilCallback)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCallback_(rilCallback, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetEmergencyCallList(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::EmergencyInfoList& emergencyInfoList)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetEmergencyCallList_(slotId, serialId, emergencyInfoList, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetEmergencyCallList(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetEmergencyCallList_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallList(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallList_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Dial(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DialInfo& dialInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::Dial_(slotId, serialId, dialInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Reject(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::Reject_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Hangup(int32_t slotId, int32_t serialId, int32_t callId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::Hangup_(slotId, serialId, callId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Answer(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::Answer_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::HoldCall(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::HoldCall_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnHoldCall(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnHoldCall_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SwitchCall(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SwitchCall_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::CombineConference(int32_t slotId, int32_t serialId, int32_t callType)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::CombineConference_(slotId, serialId, callType, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SeparateConference(int32_t slotId, int32_t serialId, int32_t callId,
     int32_t callType)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SeparateConference_(slotId, serialId, callId, callType, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallWaiting(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallWaiting_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallWaiting(int32_t slotId, int32_t serialId, int32_t activate)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCallWaiting_(slotId, serialId, activate, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallTransferInfo(int32_t slotId, int32_t serialId, int32_t reason)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallTransferInfo_(slotId, serialId, reason, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallTransferInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallForwardSetInfo& callForwardSetInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCallTransferInfo_(slotId, serialId, callForwardSetInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallRestriction(int32_t slotId, int32_t serialId, const std::string& fac)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallRestriction_(slotId, serialId, fac, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallRestriction(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallRestrictionInfo& callRestrictionInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCallRestriction_(slotId, serialId, callRestrictionInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetClip(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetClip_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetClip(int32_t slotId, int32_t serialId, int32_t action)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetClip_(slotId, serialId, action, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetClir(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetClir_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetClir(int32_t slotId, int32_t serialId, int32_t action)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetClir_(slotId, serialId, action, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallPreferenceMode(int32_t slotId, int32_t serialId, int32_t mode)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCallPreferenceMode_(slotId, serialId, mode, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallPreferenceMode(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallPreferenceMode_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetUssd(int32_t slotId, int32_t serialId, const std::string& str)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetUssd_(slotId, serialId, str, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetUssd(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetUssd_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetMute(int32_t slotId, int32_t serialId, int32_t mute)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetMute_(slotId, serialId, mute, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetMute(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetMute_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallFailReason(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCallFailReason_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::CallSupplement(int32_t slotId, int32_t serialId, int32_t type)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::CallSupplement_(slotId, serialId, type, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDtmf(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendDtmf_(slotId, serialId, dtmfInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::StartDtmf(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::StartDtmf_(slotId, serialId, dtmfInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::StopDtmf(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::StopDtmf_(slotId, serialId, dtmfInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetBarringPassword(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetBarringInfo& setBarringInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetBarringPassword_(slotId, serialId, setBarringInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ActivatePdpContext(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataCallInfo& dataCallInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::ActivatePdpContext_(slotId, serialId, dataCallInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DeactivatePdpContext(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::DeactivatePdpContext_(slotId, serialId, uniInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPdpContextList(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetPdpContextList_(slotId, serialId, uniInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetInitApnInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfileDataInfo& dataProfileDataInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetInitApnInfo_(slotId, serialId, dataProfileDataInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetLinkBandwidthInfo(int32_t slotId, int32_t serialId, int32_t cid)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetLinkBandwidthInfo_(slotId, serialId, cid, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetLinkBandwidthReportingRule(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataLinkBandwidthReportingRule& dataLinkBandwidthReportingRule)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetLinkBandwidthReportingRule_(slotId, serialId, dataLinkBandwidthReportingRule, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDataPermitted(int32_t slotId, int32_t serialId, int32_t dataPermitted)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetDataPermitted_(slotId, serialId, dataPermitted, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDataProfileInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfilesInfo& dataProfilesInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetDataProfileInfo_(slotId, serialId, dataProfilesInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDataPerformanceMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataPerformanceInfo& dataPerformanceInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendDataPerformanceMode_(slotId, serialId, dataPerformanceInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDataSleepMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataSleepInfo& dataSleepInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendDataSleepMode_(slotId, serialId, dataSleepInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetRadioState(int32_t slotId, int32_t serialId, int32_t fun, int32_t rst)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetRadioState_(slotId, serialId, fun, rst, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetRadioState(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetRadioState_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetImei(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetImei_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetMeid(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetMeid_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetVoiceRadioTechnology(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetVoiceRadioTechnology_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetBasebandVersion(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetBasebandVersion_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ShutDown(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::ShutDown_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimIO(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimIoRequestInfo& simIO)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetSimIO_(slotId, serialId, simIO, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimStatus(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetSimStatus_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetImsi(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetImsi_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimLockStatus(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetSimLockStatus_(slotId, serialId, simLockInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetSimLock(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetSimLock_(slotId, serialId, simLockInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ChangeSimPassword(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimPasswordInfo& simPassword)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::ChangeSimPassword_(slotId, serialId, simPassword, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin(int32_t slotId, int32_t serialId, const std::string& pin)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin_(slotId, serialId, pin, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk(int32_t slotId, int32_t serialId, const std::string& puk,
     const std::string& pin)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk_(slotId, serialId, puk, pin, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin2(int32_t slotId, int32_t serialId, const std::string& pin2)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin2_(slotId, serialId, pin2, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk2(int32_t slotId, int32_t serialId, const std::string& puk2,
     const std::string& pin2)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk2_(slotId, serialId, puk2, pin2, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetActiveSim(int32_t slotId, int32_t serialId, int32_t index, int32_t enable)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetActiveSim_(slotId, serialId, index, enable, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendTerminalResponse(int32_t slotId, int32_t serialId,
     const std::string& strCmd)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendTerminalResponse_(slotId, serialId, strCmd, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendEnvelope(int32_t slotId, int32_t serialId, const std::string& strCmd)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendEnvelope_(slotId, serialId, strCmd, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendCallSetupRequestResult(int32_t slotId, int32_t serialId,
     int32_t accept)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendCallSetupRequestResult_(slotId, serialId, accept, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkIsReady(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimStkIsReady_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetRadioProtocol(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetRadioProtocol_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetRadioProtocol(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::RadioProtocol& radioProtocol)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetRadioProtocol_(slotId, serialId, radioProtocol, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimOpenLogicalChannel(int32_t slotId, int32_t serialId,
     const std::string& appID, int32_t p2)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimOpenLogicalChannel_(slotId, serialId, appID, p2, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimCloseLogicalChannel(int32_t slotId, int32_t serialId, int32_t channelId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimCloseLogicalChannel_(slotId, serialId, channelId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduLogicalChannel(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduLogicalChannel_(slotId, serialId, apduSimIO, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduBasicChannel(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduBasicChannel_(slotId, serialId, apduSimIO, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimAuthentication(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimAuthenticationRequestInfo& simAuthInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SimAuthentication_(slotId, serialId, simAuthInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockSimLock(int32_t slotId, int32_t serialId, int32_t lockType,
     const std::string& key)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UnlockSimLock_(slotId, serialId, lockType, key, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSignalStrength(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetSignalStrength_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCsRegStatus(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCsRegStatus_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPsRegStatus(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetPsRegStatus_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetOperatorInfo(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetOperatorInfo_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSearchInformation(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSearchInformation_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSelectionMode(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSelectionMode_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetNetworkSelectionMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetNetworkModeInfo& networkModeInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetNetworkSelectionMode_(slotId, serialId, networkModeInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNeighboringCellInfoList(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetNeighboringCellInfoList_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCurrentCellInfo(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCurrentCellInfo_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetPreferredNetwork(int32_t slotId, int32_t serialId,
     int32_t preferredNetworkType)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetPreferredNetwork_(slotId, serialId, preferredNetworkType, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPreferredNetwork(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetPreferredNetwork_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPhysicalChannelConfig(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetPhysicalChannelConfig_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetLocateUpdates(int32_t slotId, int32_t serialId,
     OHOS::HDI::Ril::V1_0::RilRegNotifyMode mode)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetLocateUpdates_(slotId, serialId, mode, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetNotificationFilter(int32_t slotId, int32_t serialId, int32_t newFilter)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetNotificationFilter_(slotId, serialId, newFilter, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDeviceState(int32_t slotId, int32_t serialId, int32_t deviceStateType,
     int32_t deviceStateOn)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetDeviceState_(slotId, serialId, deviceStateType, deviceStateOn, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendGsmSms(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendGsmSms_(slotId, serialId, gsmSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendCdmaSms(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SendCdmaSmsMessageInfo& cdmaSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendCdmaSms_(slotId, serialId, cdmaSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::AddSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::AddSimMessage_(slotId, serialId, gsmSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DelSimMessage(int32_t slotId, int32_t serialId, int32_t index)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::DelSimMessage_(slotId, serialId, index, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UpdateSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UpdateSimMessage_(slotId, serialId, gsmSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::AddCdmaSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::AddCdmaSimMessage_(slotId, serialId, cdmaSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DelCdmaSimMessage(int32_t slotId, int32_t serialId, int32_t index)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::DelCdmaSimMessage_(slotId, serialId, index, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UpdateCdmaSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::UpdateCdmaSimMessage_(slotId, serialId, cdmaSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetSmscAddr(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ServiceCenterAddress& serviceCenterAddress)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetSmscAddr_(slotId, serialId, serviceCenterAddress, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSmscAddr(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetSmscAddr_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCBConfig(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CBConfigInfo& cellBroadcastInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCBConfig_(slotId, serialId, cellBroadcastInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCBConfig(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCBConfig_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCdmaCBConfig(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CdmaCBConfigInfoList& cdmaCBConfigInfoList)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SetCdmaCBConfig_(slotId, serialId, cdmaCBConfigInfoList, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCdmaCBConfig(int32_t slotId, int32_t serialId)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetCdmaCBConfig_(slotId, serialId, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendSmsMoreMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendSmsMoreMode_(slotId, serialId, gsmSmsMessageInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendSmsAck(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ModeData& modeData)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendSmsAck_(slotId, serialId, modeData, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendRilAck()
{
    return OHOS::HDI::Ril::V1_0::RilProxy::SendRilAck_(GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Ril::V1_0::RilProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallback_(const sptr<OHOS::HDI::Ril::V1_0::IRilCallback>& rilCallback,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (rilCallback == nullptr) {
        HDF_LOGE("%{public}s: parameter rilCallback is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(rilCallback, OHOS::HDI::Ril::V1_0::IRilCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write rilCallback failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CALLBACK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetEmergencyCallList_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::EmergencyInfoList& emergencyInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::EmergencyInfoListBlockMarshalling(rilData, emergencyInfoList)) {
        HDF_LOGE("%{public}s: write emergencyInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_EMERGENCY_CALL_LIST, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetEmergencyCallList_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_EMERGENCY_CALL_LIST, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallList_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_LIST, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Dial_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DialInfo& dialInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DialInfoBlockMarshalling(rilData, dialInfo)) {
        HDF_LOGE("%{public}s: write dialInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_DIAL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Reject_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_REJECT, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Hangup_(int32_t slotId, int32_t serialId, int32_t callId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(callId)) {
        HDF_LOGE("%{public}s: write callId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_HANGUP, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::Answer_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_ANSWER, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::HoldCall_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_HOLD_CALL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnHoldCall_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UN_HOLD_CALL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SwitchCall_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SWITCH_CALL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::CombineConference_(int32_t slotId, int32_t serialId, int32_t callType,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(callType)) {
        HDF_LOGE("%{public}s: write callType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_COMBINE_CONFERENCE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SeparateConference_(int32_t slotId, int32_t serialId, int32_t callId,
     int32_t callType, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(callId)) {
        HDF_LOGE("%{public}s: write callId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(callType)) {
        HDF_LOGE("%{public}s: write callType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEPARATE_CONFERENCE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallWaiting_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_WAITING, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallWaiting_(int32_t slotId, int32_t serialId, int32_t activate,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(activate)) {
        HDF_LOGE("%{public}s: write activate failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CALL_WAITING, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallTransferInfo_(int32_t slotId, int32_t serialId, int32_t reason,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(reason)) {
        HDF_LOGE("%{public}s: write reason failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_TRANSFER_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallTransferInfo_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallForwardSetInfo& callForwardSetInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::CallForwardSetInfoBlockMarshalling(rilData, callForwardSetInfo)) {
        HDF_LOGE("%{public}s: write callForwardSetInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CALL_TRANSFER_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallRestriction_(int32_t slotId, int32_t serialId, const std::string& fac,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(fac.c_str())) {
        HDF_LOGE("%{public}s: write fac failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_RESTRICTION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallRestriction_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallRestrictionInfo& callRestrictionInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::CallRestrictionInfoBlockMarshalling(rilData, callRestrictionInfo)) {
        HDF_LOGE("%{public}s: write callRestrictionInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CALL_RESTRICTION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetClip_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CLIP, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetClip_(int32_t slotId, int32_t serialId, int32_t action,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(action)) {
        HDF_LOGE("%{public}s: write action failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CLIP, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetClir_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CLIR, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetClir_(int32_t slotId, int32_t serialId, int32_t action,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(action)) {
        HDF_LOGE("%{public}s: write action failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CLIR, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCallPreferenceMode_(int32_t slotId, int32_t serialId, int32_t mode,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(mode)) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CALL_PREFERENCE_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallPreferenceMode_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_PREFERENCE_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetUssd_(int32_t slotId, int32_t serialId, const std::string& str,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(str.c_str())) {
        HDF_LOGE("%{public}s: write str failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_USSD, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetUssd_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_USSD, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetMute_(int32_t slotId, int32_t serialId, int32_t mute,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(mute)) {
        HDF_LOGE("%{public}s: write mute failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_MUTE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetMute_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_MUTE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCallFailReason_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CALL_FAIL_REASON, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::CallSupplement_(int32_t slotId, int32_t serialId, int32_t type,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(type)) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_CALL_SUPPLEMENT, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDtmf_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DtmfInfoBlockMarshalling(rilData, dtmfInfo)) {
        HDF_LOGE("%{public}s: write dtmfInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_DTMF, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::StartDtmf_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DtmfInfoBlockMarshalling(rilData, dtmfInfo)) {
        HDF_LOGE("%{public}s: write dtmfInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_START_DTMF, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::StopDtmf_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DtmfInfoBlockMarshalling(rilData, dtmfInfo)) {
        HDF_LOGE("%{public}s: write dtmfInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_STOP_DTMF, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetBarringPassword_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetBarringInfo& setBarringInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SetBarringInfoBlockMarshalling(rilData, setBarringInfo)) {
        HDF_LOGE("%{public}s: write setBarringInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_BARRING_PASSWORD, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ActivatePdpContext_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataCallInfo& dataCallInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataCallInfoBlockMarshalling(rilData, dataCallInfo)) {
        HDF_LOGE("%{public}s: write dataCallInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_ACTIVATE_PDP_CONTEXT, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DeactivatePdpContext_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::UniInfoBlockMarshalling(rilData, uniInfo)) {
        HDF_LOGE("%{public}s: write uniInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_DEACTIVATE_PDP_CONTEXT, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPdpContextList_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::UniInfoBlockMarshalling(rilData, uniInfo)) {
        HDF_LOGE("%{public}s: write uniInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_PDP_CONTEXT_LIST, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetInitApnInfo_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfileDataInfo& dataProfileDataInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataProfileDataInfoBlockMarshalling(rilData, dataProfileDataInfo)) {
        HDF_LOGE("%{public}s: write dataProfileDataInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_INIT_APN_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetLinkBandwidthInfo_(int32_t slotId, int32_t serialId, int32_t cid,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(cid)) {
        HDF_LOGE("%{public}s: write cid failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_LINK_BANDWIDTH_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetLinkBandwidthReportingRule_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataLinkBandwidthReportingRule& dataLinkBandwidthReportingRule, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataLinkBandwidthReportingRuleBlockMarshalling(rilData, dataLinkBandwidthReportingRule)) {
        HDF_LOGE("%{public}s: write dataLinkBandwidthReportingRule failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_LINK_BANDWIDTH_REPORTING_RULE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDataPermitted_(int32_t slotId, int32_t serialId, int32_t dataPermitted,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(dataPermitted)) {
        HDF_LOGE("%{public}s: write dataPermitted failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_DATA_PERMITTED, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDataProfileInfo_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfilesInfo& dataProfilesInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataProfilesInfoBlockMarshalling(rilData, dataProfilesInfo)) {
        HDF_LOGE("%{public}s: write dataProfilesInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_DATA_PROFILE_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDataPerformanceMode_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataPerformanceInfo& dataPerformanceInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataPerformanceInfoBlockMarshalling(rilData, dataPerformanceInfo)) {
        HDF_LOGE("%{public}s: write dataPerformanceInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_DATA_PERFORMANCE_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendDataSleepMode_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataSleepInfo& dataSleepInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::DataSleepInfoBlockMarshalling(rilData, dataSleepInfo)) {
        HDF_LOGE("%{public}s: write dataSleepInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_DATA_SLEEP_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetRadioState_(int32_t slotId, int32_t serialId, int32_t fun, int32_t rst,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(fun)) {
        HDF_LOGE("%{public}s: write fun failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(rst)) {
        HDF_LOGE("%{public}s: write rst failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_RADIO_STATE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetRadioState_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_RADIO_STATE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetImei_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_IMEI, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetMeid_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_MEID, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetVoiceRadioTechnology_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_VOICE_RADIO_TECHNOLOGY, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetBasebandVersion_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_BASEBAND_VERSION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ShutDown_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SHUT_DOWN, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimIO_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimIoRequestInfo& simIO, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SimIoRequestInfoBlockMarshalling(rilData, simIO)) {
        HDF_LOGE("%{public}s: write simIO failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_SIM_I_O, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimStatus_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_SIM_STATUS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetImsi_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_IMSI, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSimLockStatus_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SimLockInfoBlockMarshalling(rilData, simLockInfo)) {
        HDF_LOGE("%{public}s: write simLockInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_SIM_LOCK_STATUS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetSimLock_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SimLockInfoBlockMarshalling(rilData, simLockInfo)) {
        HDF_LOGE("%{public}s: write simLockInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_SIM_LOCK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::ChangeSimPassword_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimPasswordInfo& simPassword, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SimPasswordInfoBlockMarshalling(rilData, simPassword)) {
        HDF_LOGE("%{public}s: write simPassword failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_CHANGE_SIM_PASSWORD, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin_(int32_t slotId, int32_t serialId, const std::string& pin,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(pin.c_str())) {
        HDF_LOGE("%{public}s: write pin failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UNLOCK_PIN, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk_(int32_t slotId, int32_t serialId, const std::string& puk,
     const std::string& pin, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(puk.c_str())) {
        HDF_LOGE("%{public}s: write puk failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(pin.c_str())) {
        HDF_LOGE("%{public}s: write pin failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UNLOCK_PUK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPin2_(int32_t slotId, int32_t serialId, const std::string& pin2,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(pin2.c_str())) {
        HDF_LOGE("%{public}s: write pin2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UNLOCK_PIN2, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockPuk2_(int32_t slotId, int32_t serialId, const std::string& puk2,
     const std::string& pin2, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(puk2.c_str())) {
        HDF_LOGE("%{public}s: write puk2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(pin2.c_str())) {
        HDF_LOGE("%{public}s: write pin2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UNLOCK_PUK2, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetActiveSim_(int32_t slotId, int32_t serialId, int32_t index, int32_t enable,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(index)) {
        HDF_LOGE("%{public}s: write index failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(enable)) {
        HDF_LOGE("%{public}s: write enable failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_ACTIVE_SIM, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendTerminalResponse_(int32_t slotId, int32_t serialId,
     const std::string& strCmd, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(strCmd.c_str())) {
        HDF_LOGE("%{public}s: write strCmd failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_STK_SEND_TERMINAL_RESPONSE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendEnvelope_(int32_t slotId, int32_t serialId, const std::string& strCmd,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(strCmd.c_str())) {
        HDF_LOGE("%{public}s: write strCmd failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_STK_SEND_ENVELOPE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkSendCallSetupRequestResult_(int32_t slotId, int32_t serialId,
     int32_t accept, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(accept)) {
        HDF_LOGE("%{public}s: write accept failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimStkIsReady_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_STK_IS_READY, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetRadioProtocol_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_RADIO_PROTOCOL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetRadioProtocol_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::RadioProtocol& radioProtocol, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::RadioProtocolBlockMarshalling(rilData, radioProtocol)) {
        HDF_LOGE("%{public}s: write radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_RADIO_PROTOCOL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimOpenLogicalChannel_(int32_t slotId, int32_t serialId,
     const std::string& appID, int32_t p2, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(appID.c_str())) {
        HDF_LOGE("%{public}s: write appID failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(p2)) {
        HDF_LOGE("%{public}s: write p2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_OPEN_LOGICAL_CHANNEL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimCloseLogicalChannel_(int32_t slotId, int32_t serialId, int32_t channelId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(channelId)) {
        HDF_LOGE("%{public}s: write channelId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_CLOSE_LOGICAL_CHANNEL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduLogicalChannel_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::ApduSimIORequestInfoBlockMarshalling(rilData, apduSimIO)) {
        HDF_LOGE("%{public}s: write apduSimIO failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimTransmitApduBasicChannel_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::ApduSimIORequestInfoBlockMarshalling(rilData, apduSimIO)) {
        HDF_LOGE("%{public}s: write apduSimIO failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_TRANSMIT_APDU_BASIC_CHANNEL, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SimAuthentication_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimAuthenticationRequestInfo& simAuthInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SimAuthenticationRequestInfoBlockMarshalling(rilData, simAuthInfo)) {
        HDF_LOGE("%{public}s: write simAuthInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SIM_AUTHENTICATION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UnlockSimLock_(int32_t slotId, int32_t serialId, int32_t lockType,
     const std::string& key, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(lockType)) {
        HDF_LOGE("%{public}s: write lockType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteCString(key.c_str())) {
        HDF_LOGE("%{public}s: write key failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UNLOCK_SIM_LOCK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSignalStrength_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_SIGNAL_STRENGTH, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCsRegStatus_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CS_REG_STATUS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPsRegStatus_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_PS_REG_STATUS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetOperatorInfo_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_OPERATOR_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSearchInformation_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_NETWORK_SEARCH_INFORMATION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNetworkSelectionMode_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_NETWORK_SELECTION_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetNetworkSelectionMode_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetNetworkModeInfo& networkModeInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SetNetworkModeInfoBlockMarshalling(rilData, networkModeInfo)) {
        HDF_LOGE("%{public}s: write networkModeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_NETWORK_SELECTION_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetNeighboringCellInfoList_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_NEIGHBORING_CELL_INFO_LIST, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCurrentCellInfo_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CURRENT_CELL_INFO, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetPreferredNetwork_(int32_t slotId, int32_t serialId,
     int32_t preferredNetworkType, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(preferredNetworkType)) {
        HDF_LOGE("%{public}s: write preferredNetworkType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_PREFERRED_NETWORK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPreferredNetwork_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_PREFERRED_NETWORK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetPhysicalChannelConfig_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_PHYSICAL_CHANNEL_CONFIG, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetLocateUpdates_(int32_t slotId, int32_t serialId,
     OHOS::HDI::Ril::V1_0::RilRegNotifyMode mode, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteUint64(static_cast<uint64_t>(mode))) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_LOCATE_UPDATES, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetNotificationFilter_(int32_t slotId, int32_t serialId, int32_t newFilter,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(newFilter)) {
        HDF_LOGE("%{public}s: write newFilter failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_NOTIFICATION_FILTER, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetDeviceState_(int32_t slotId, int32_t serialId, int32_t deviceStateType,
     int32_t deviceStateOn, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(deviceStateType)) {
        HDF_LOGE("%{public}s: write deviceStateType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(deviceStateOn)) {
        HDF_LOGE("%{public}s: write deviceStateOn failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_DEVICE_STATE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendGsmSms_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::GsmSmsMessageInfoBlockMarshalling(rilData, gsmSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write gsmSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_GSM_SMS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendCdmaSms_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SendCdmaSmsMessageInfo& cdmaSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SendCdmaSmsMessageInfoBlockMarshalling(rilData, cdmaSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write cdmaSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_CDMA_SMS, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::AddSimMessage_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SmsMessageIOInfoBlockMarshalling(rilData, gsmSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write gsmSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_ADD_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DelSimMessage_(int32_t slotId, int32_t serialId, int32_t index,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(index)) {
        HDF_LOGE("%{public}s: write index failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_DEL_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UpdateSimMessage_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SmsMessageIOInfoBlockMarshalling(rilData, gsmSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write gsmSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UPDATE_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::AddCdmaSimMessage_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SmsMessageIOInfoBlockMarshalling(rilData, cdmaSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write cdmaSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_ADD_CDMA_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::DelCdmaSimMessage_(int32_t slotId, int32_t serialId, int32_t index,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(index)) {
        HDF_LOGE("%{public}s: write index failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_DEL_CDMA_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::UpdateCdmaSimMessage_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::SmsMessageIOInfoBlockMarshalling(rilData, cdmaSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write cdmaSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_UPDATE_CDMA_SIM_MESSAGE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetSmscAddr_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ServiceCenterAddress& serviceCenterAddress, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::ServiceCenterAddressBlockMarshalling(rilData, serviceCenterAddress)) {
        HDF_LOGE("%{public}s: write serviceCenterAddress failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_SMSC_ADDR, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetSmscAddr_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_SMSC_ADDR, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCBConfig_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CBConfigInfo& cellBroadcastInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::CBConfigInfoBlockMarshalling(rilData, cellBroadcastInfo)) {
        HDF_LOGE("%{public}s: write cellBroadcastInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_C_B_CONFIG, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCBConfig_(int32_t slotId, int32_t serialId, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_C_B_CONFIG, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SetCdmaCBConfig_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CdmaCBConfigInfoList& cdmaCBConfigInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::CdmaCBConfigInfoListBlockMarshalling(rilData, cdmaCBConfigInfoList)) {
        HDF_LOGE("%{public}s: write cdmaCBConfigInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SET_CDMA_C_B_CONFIG, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetCdmaCBConfig_(int32_t slotId, int32_t serialId,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_CDMA_C_B_CONFIG, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendSmsMoreMode_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::GsmSmsMessageInfoBlockMarshalling(rilData, gsmSmsMessageInfo)) {
        HDF_LOGE("%{public}s: write gsmSmsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_SMS_MORE_MODE, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendSmsAck_(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ModeData& modeData, const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(slotId)) {
        HDF_LOGE("%{public}s: write slotId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilData.WriteInt32(serialId)) {
        HDF_LOGE("%{public}s: write serialId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_0::ModeDataBlockMarshalling(rilData, modeData)) {
        HDF_LOGE("%{public}s: write modeData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_SMS_ACK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::SendRilAck_(const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_ASYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_SEND_RIL_ACK, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }
    return rilRet;
}

int32_t OHOS::HDI::Ril::V1_0::RilProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilData;
    MessageParcel rilReply;
    MessageOption rilOption(MessageOption::TF_SYNC);

    if (!rilData.WriteInterfaceToken(OHOS::HDI::Ril::V1_0::IRil::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilRet = remote->SendRequest(CMD_RIL_GET_VERSION, rilData, rilReply, rilOption);
    if (rilRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilRet);
        return rilRet;
    }

    if (!rilReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return rilRet;
}

} // V1_0
} // Ril
} // HDI
} // OHOS
