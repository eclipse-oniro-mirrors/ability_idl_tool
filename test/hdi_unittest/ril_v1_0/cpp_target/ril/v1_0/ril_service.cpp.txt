/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/ril_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    ril_service

namespace OHOS {
namespace HDI {
namespace Ril {
namespace V1_0 {
extern "C" IRil *RilImplGetInstance(void)
{
    return new (std::nothrow) RilService();
}

int32_t RilService::SetCallback(const sptr<OHOS::HDI::Ril::V1_0::IRilCallback>& rilCallback)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetEmergencyCallList(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::EmergencyInfoList& emergencyInfoList)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetEmergencyCallList(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallList(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::Dial(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::DialInfo& dialInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::Reject(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::Hangup(int32_t slotId, int32_t serialId, int32_t callId)
{
    return HDF_SUCCESS;
}

int32_t RilService::Answer(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::HoldCall(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnHoldCall(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SwitchCall(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::CombineConference(int32_t slotId, int32_t serialId, int32_t callType)
{
    return HDF_SUCCESS;
}

int32_t RilService::SeparateConference(int32_t slotId, int32_t serialId, int32_t callId, int32_t callType)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallWaiting(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCallWaiting(int32_t slotId, int32_t serialId, int32_t activate)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallTransferInfo(int32_t slotId, int32_t serialId, int32_t reason)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCallTransferInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallForwardSetInfo& callForwardSetInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallRestriction(int32_t slotId, int32_t serialId, const std::string& fac)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCallRestriction(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CallRestrictionInfo& callRestrictionInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetClip(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetClip(int32_t slotId, int32_t serialId, int32_t action)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetClir(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetClir(int32_t slotId, int32_t serialId, int32_t action)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCallPreferenceMode(int32_t slotId, int32_t serialId, int32_t mode)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallPreferenceMode(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetUssd(int32_t slotId, int32_t serialId, const std::string& str)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetUssd(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetMute(int32_t slotId, int32_t serialId, int32_t mute)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetMute(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCallFailReason(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::CallSupplement(int32_t slotId, int32_t serialId, int32_t type)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendDtmf(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::StartDtmf(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::StopDtmf(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::DtmfInfo& dtmfInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetBarringPassword(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetBarringInfo& setBarringInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::ActivatePdpContext(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataCallInfo& dataCallInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::DeactivatePdpContext(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetPdpContextList(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::UniInfo& uniInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetInitApnInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfileDataInfo& dataProfileDataInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetLinkBandwidthInfo(int32_t slotId, int32_t serialId, int32_t cid)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetLinkBandwidthReportingRule(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataLinkBandwidthReportingRule& dataLinkBandwidthReportingRule)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetDataPermitted(int32_t slotId, int32_t serialId, int32_t dataPermitted)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetDataProfileInfo(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataProfilesInfo& dataProfilesInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendDataPerformanceMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataPerformanceInfo& dataPerformanceInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendDataSleepMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::DataSleepInfo& dataSleepInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetRadioState(int32_t slotId, int32_t serialId, int32_t fun, int32_t rst)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetRadioState(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetImei(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetMeid(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetVoiceRadioTechnology(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetBasebandVersion(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::ShutDown(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetSimIO(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::SimIoRequestInfo& simIO)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetSimStatus(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetImsi(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetSimLockStatus(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetSimLock(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::SimLockInfo& simLockInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::ChangeSimPassword(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimPasswordInfo& simPassword)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnlockPin(int32_t slotId, int32_t serialId, const std::string& pin)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnlockPuk(int32_t slotId, int32_t serialId, const std::string& puk, const std::string& pin)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnlockPin2(int32_t slotId, int32_t serialId, const std::string& pin2)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnlockPuk2(int32_t slotId, int32_t serialId, const std::string& puk2, const std::string& pin2)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetActiveSim(int32_t slotId, int32_t serialId, int32_t index, int32_t enable)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimStkSendTerminalResponse(int32_t slotId, int32_t serialId, const std::string& strCmd)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimStkSendEnvelope(int32_t slotId, int32_t serialId, const std::string& strCmd)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimStkSendCallSetupRequestResult(int32_t slotId, int32_t serialId, int32_t accept)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimStkIsReady(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetRadioProtocol(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetRadioProtocol(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::RadioProtocol& radioProtocol)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimOpenLogicalChannel(int32_t slotId, int32_t serialId, const std::string& appID, int32_t p2)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimCloseLogicalChannel(int32_t slotId, int32_t serialId, int32_t channelId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimTransmitApduLogicalChannel(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimTransmitApduBasicChannel(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ApduSimIORequestInfo& apduSimIO)
{
    return HDF_SUCCESS;
}

int32_t RilService::SimAuthentication(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SimAuthenticationRequestInfo& simAuthInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::UnlockSimLock(int32_t slotId, int32_t serialId, int32_t lockType, const std::string& key)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetSignalStrength(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCsRegStatus(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetPsRegStatus(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetOperatorInfo(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetNetworkSearchInformation(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetNetworkSelectionMode(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetNetworkSelectionMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SetNetworkModeInfo& networkModeInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetNeighboringCellInfoList(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCurrentCellInfo(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetPreferredNetwork(int32_t slotId, int32_t serialId, int32_t preferredNetworkType)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetPreferredNetwork(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetPhysicalChannelConfig(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetLocateUpdates(int32_t slotId, int32_t serialId, OHOS::HDI::Ril::V1_0::RilRegNotifyMode mode)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetNotificationFilter(int32_t slotId, int32_t serialId, int32_t newFilter)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetDeviceState(int32_t slotId, int32_t serialId, int32_t deviceStateType, int32_t deviceStateOn)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendGsmSms(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendCdmaSms(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SendCdmaSmsMessageInfo& cdmaSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::AddSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::DelSimMessage(int32_t slotId, int32_t serialId, int32_t index)
{
    return HDF_SUCCESS;
}

int32_t RilService::UpdateSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& gsmSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::AddCdmaSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::DelCdmaSimMessage(int32_t slotId, int32_t serialId, int32_t index)
{
    return HDF_SUCCESS;
}

int32_t RilService::UpdateCdmaSimMessage(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::SmsMessageIOInfo& cdmaSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetSmscAddr(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::ServiceCenterAddress& serviceCenterAddress)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetSmscAddr(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCBConfig(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CBConfigInfo& cellBroadcastInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCBConfig(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SetCdmaCBConfig(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::CdmaCBConfigInfoList& cdmaCBConfigInfoList)
{
    return HDF_SUCCESS;
}

int32_t RilService::GetCdmaCBConfig(int32_t slotId, int32_t serialId)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendSmsMoreMode(int32_t slotId, int32_t serialId,
     const OHOS::HDI::Ril::V1_0::GsmSmsMessageInfo& gsmSmsMessageInfo)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendSmsAck(int32_t slotId, int32_t serialId, const OHOS::HDI::Ril::V1_0::ModeData& modeData)
{
    return HDF_SUCCESS;
}

int32_t RilService::SendRilAck()
{
    return HDF_SUCCESS;
}

} // V1_0
} // Ril
} // HDI
} // OHOS
