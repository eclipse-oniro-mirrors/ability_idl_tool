AST[name: IFoo file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/hdi_all_type_test/foo/v1_0/IFoo.idl]
package ohos.hdi.foo.v1_0;

import ohos.hdi.foo.v1_0.Types;
import ohos.hdi.foo.v1_0.IFooCallback;

[mini, lite, full] interface IFoo {
    [mini, lite, full] Ping(
      [in] std::string sendMsg,
      [out] std::string recvMsg);

    [mini, lite, full] GetData(
      [out] ohos.hdi.foo.v1_0.FooInfo info);

    [mini, lite, full] SetCallback(
      [in] ohos.hdi.foo.v1_0.IFooCallback cbObj);
}


AST[name: Types file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/hdi_all_type_test/foo/v1_0/Types.idl]
package ohos.hdi.foo.v1_0;

[mini, lite, full] enum FooType : int {
  FOO_TYPE_ONE = 1,
  FOO_TYPE_TWO = 2,
};

[mini, lite, full] struct FooInfo {
  unsigned int id;
  std::string name;
  ohos.hdi.foo.v1_0.FooType type;
  boolean data1;
  boolean[] data2;
  byte data3;
  short data4;
  int data5;
  long data6;
  std::string data7;
  float data8;
  double data9;
  FileDescriptor data10;
  Ashmem data11;
  NativeBuffer data12;
  Pointer data13;
  List<int> data14;
  Map<std::string, byte[]> data15;
  SharedMemQueue<unsigned char> data16;
  unsigned int data17;
  unsigned char[] data18;
  unsigned short[] data19;
  unsigned int data20;
  unsigned long data21;
};

[mini, lite, full] enum AudioPortPin : int {
  PIN_NONE = 0,
  PIN_OUT_SPEAKER = 1 << 0,
  PIN_OUT_HEADSET = 1 << 1,
  PIN_OUT_LINEOUT = 1 << 2,
  PIN_OUT_HDMI = 1 << 3,
  PIN_OUT_USB = 1 << 4,
  PIN_OUT_USB_EXT = 1 << 5,
  PIN_OUT_EARPIECE = 1 << 5 | 1 << 4,
  PIN_OUT_BLUETOOTH_SCO = 1 << 6,
  PIN_OUT_DAUDIO_DEFAULT = 1 << 7,
  PIN_OUT_HEADPHONE = 1 << 8,
  PIN_OUT_USB_HEADSET = 1 << 9,
  PIN_IN_MIC = 1 << 27 | 1 << 0,
  PIN_IN_HS_MIC = 1 << 27 | 1 << 1,
  PIN_IN_LINEIN = 1 << 27 | 1 << 2,
  PIN_IN_USB_EXT = 1 << 27 | 1 << 3,
  PIN_IN_BLUETOOTH_SCO_HEADSET = 1 << 27 | 1 << 4,
  PIN_IN_DAUDIO_DEFAULT = 1 << 27 | 1 << 5,
  PIN_IN_USB_HEADSET = 1 << 27 | 1 << 6,
};

[mini, lite, full] union SceneDesc {
  unsigned int id;
};

[mini, lite, full] struct AudioDeviceDescriptor {
  unsigned int portId;
  ohos.hdi.foo.v1_0.AudioPortPin pins;
  std::string desc;
};

[mini, lite, full] struct AudioSceneDescriptor {
  ohos.hdi.foo.v1_0.SceneDesc scene;
  ohos.hdi.foo.v1_0.AudioDeviceDescriptor desc;
};


AST[name: IFooCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/hdi_all_type_test/foo/v1_0/IFooCallback.idl]
package ohos.hdi.foo.v1_0;

[mini, lite, full, callback] interface IFooCallback {
    [mini, lite, full, callback] PushData(
      [in] std::string message);
}


