/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/nfc_callback_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>

#define HDF_LOG_TAG    nfc_callback_stub

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}


OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStub(const sptr<OHOS::HDI::Nfc::V1_0::INfcCallback> &impl)
    : IPCObjectStub(OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Nfc::V1_0::NfcCallbackStub::~NfcCallbackStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_NFC_CALLBACK_GET_VERSION:
            return NfcCallbackStubGetVersion(data, reply, option);
        case CMD_NFC_CALLBACK_ON_DATA:
            return NfcCallbackStubOnData(data, reply, option);
        case CMD_NFC_CALLBACK_ON_EVENT:
            return NfcCallbackStubOnEvent(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnData(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnData_(nfcCallbackData, nfcCallbackReply, nfcCallbackOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnEvent(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnEvent_(nfcCallbackData, nfcCallbackReply, nfcCallbackOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubGetVersion(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubGetVersion_(nfcCallbackData, nfcCallbackReply, nfcCallbackOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnData_(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption, sptr<OHOS::HDI::Nfc::V1_0::INfcCallback> impl)
{
    if (nfcCallbackData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(nfcCallbackData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcCallbackRet = impl->OnData(data);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    return nfcCallbackRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubOnEvent_(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption, sptr<OHOS::HDI::Nfc::V1_0::INfcCallback> impl)
{
    if (nfcCallbackData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcEvent event = static_cast<enum NfcEvent>(0);
    {
        uint64_t enumTmp = 0;
        if (!nfcCallbackData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write event failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        event = static_cast<enum NfcEvent>(enumTmp);
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status = static_cast<enum NfcStatus>(0);
    {
        uint64_t enumTmp = 0;
        if (!nfcCallbackData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum NfcStatus>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcCallbackRet = impl->OnEvent(event, status);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    return nfcCallbackRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackStub::NfcCallbackStubGetVersion_(MessageParcel& nfcCallbackData, MessageParcel& nfcCallbackReply, MessageOption& nfcCallbackOption, sptr<OHOS::HDI::Nfc::V1_0::INfcCallback> impl)
{
    if (nfcCallbackData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcCallbackRet = impl->GetVersion(majorVer, minorVer);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    if (!nfcCallbackReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcCallbackReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcCallbackRet;
}
} // V1_0
} // Nfc
} // HDI
} // OHOS
