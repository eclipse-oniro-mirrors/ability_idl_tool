/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/nfc_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "nfc/v1_0/nfc_callback_proxy.h"

#define HDF_LOG_TAG    nfc_interface_stub

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), size, &sz);
    if (ok) { return false; }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sz));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> OHOS::HDI::Nfc::V1_0::INfcInterface::Get(bool isStub)
{
    return OHOS::HDI::Nfc::V1_0::INfcInterface::Get("nfc_interface_service", isStub);
}

sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> OHOS::HDI::Nfc::V1_0::INfcInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "nfc_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Nfc::V1_0::INfcInterface *>(impl);
}


OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStub(const sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::~NfcInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_NFC_INTERFACE_GET_VERSION:
            return NfcInterfaceStubGetVersion(data, reply, option);
        case CMD_NFC_INTERFACE_OPEN:
            return NfcInterfaceStubOpen(data, reply, option);
        case CMD_NFC_INTERFACE_CORE_INITIALIZED:
            return NfcInterfaceStubCoreInitialized(data, reply, option);
        case CMD_NFC_INTERFACE_PREDISCOVER:
            return NfcInterfaceStubPrediscover(data, reply, option);
        case CMD_NFC_INTERFACE_WRITE:
            return NfcInterfaceStubWrite(data, reply, option);
        case CMD_NFC_INTERFACE_CONTROL_GRANTED:
            return NfcInterfaceStubControlGranted(data, reply, option);
        case CMD_NFC_INTERFACE_POWER_CYCLE:
            return NfcInterfaceStubPowerCycle(data, reply, option);
        case CMD_NFC_INTERFACE_CLOSE:
            return NfcInterfaceStubClose(data, reply, option);
        case CMD_NFC_INTERFACE_IOCTL:
            return NfcInterfaceStubIoctl(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubOpen(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubOpen_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubCoreInitialized(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubCoreInitialized_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPrediscover(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPrediscover_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubWrite(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubWrite_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubControlGranted(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubControlGranted_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPowerCycle(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPowerCycle_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubClose(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubClose_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubIoctl(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubIoctl_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubGetVersion(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubGetVersion_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubOpen_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Nfc::V1_0::INfcCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = nfcInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Nfc::V1_0::NfcCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Open(callbackObj, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubCoreInitialized_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(nfcInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->CoreInitialized(data, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPrediscover_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Prediscover(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubWrite_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(nfcInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Write(data, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubControlGranted_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->ControlGranted(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPowerCycle_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->PowerCycle(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubClose_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Close(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubIoctl_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcCommand cmd = static_cast<enum NfcCommand>(0);
    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write cmd failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        cmd = static_cast<enum NfcCommand>(enumTmp);
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(nfcInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Ioctl(cmd, data, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubGetVersion_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_0::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->GetVersion(majorVer, minorVer);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcInterfaceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}
} // V1_0
} // Nfc
} // HDI
} // OHOS
