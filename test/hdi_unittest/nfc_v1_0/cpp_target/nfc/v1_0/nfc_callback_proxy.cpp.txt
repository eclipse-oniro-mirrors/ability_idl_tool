/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/nfc_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    nfc_callback_proxy

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnData(const std::vector<uint8_t>& data)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnData_(data, Remote());
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnEvent(OHOS::HDI::Nfc::V1_0::NfcEvent event,
     OHOS::HDI::Nfc::V1_0::NfcStatus status)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnEvent_(event, status, Remote());
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnData_(const std::vector<uint8_t>& data,
     const sptr<IRemoteObject> remote)
{
    MessageParcel nfcCallbackData;
    MessageParcel nfcCallbackReply;
    MessageOption nfcCallbackOption(MessageOption::TF_SYNC);

    if (!nfcCallbackData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(nfcCallbackData, data)) {
        HDF_LOGE("%{public}s: failed to write data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcCallbackRet = remote->SendRequest(CMD_NFC_CALLBACK_ON_DATA, nfcCallbackData, nfcCallbackReply, nfcCallbackOption);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    return nfcCallbackRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::OnEvent_(OHOS::HDI::Nfc::V1_0::NfcEvent event,
     OHOS::HDI::Nfc::V1_0::NfcStatus status, const sptr<IRemoteObject> remote)
{
    MessageParcel nfcCallbackData;
    MessageParcel nfcCallbackReply;
    MessageOption nfcCallbackOption(MessageOption::TF_SYNC);

    if (!nfcCallbackData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcCallbackData.WriteUint64(static_cast<uint64_t>(event))) {
        HDF_LOGE("%{public}s: write event failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcCallbackData.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcCallbackRet = remote->SendRequest(CMD_NFC_CALLBACK_ON_EVENT, nfcCallbackData, nfcCallbackReply, nfcCallbackOption);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    return nfcCallbackRet;
}

int32_t OHOS::HDI::Nfc::V1_0::NfcCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel nfcCallbackData;
    MessageParcel nfcCallbackReply;
    MessageOption nfcCallbackOption(MessageOption::TF_SYNC);

    if (!nfcCallbackData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_0::INfcCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcCallbackRet = remote->SendRequest(CMD_NFC_CALLBACK_GET_VERSION, nfcCallbackData, nfcCallbackReply, nfcCallbackOption);
    if (nfcCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcCallbackRet);
        return nfcCallbackRet;
    }

    if (!nfcCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcCallbackRet;
}

} // V1_0
} // Nfc
} // HDI
} // OHOS
