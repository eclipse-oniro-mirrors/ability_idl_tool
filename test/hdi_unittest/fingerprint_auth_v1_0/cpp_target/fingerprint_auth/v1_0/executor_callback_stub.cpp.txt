/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/executor_callback_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>

#define HDF_LOG_TAG    executor_callback_stub

namespace OHOS {
namespace HDI {
namespace FingerprintAuth {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), size, &sz);
    if (ok) { return false; }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sz));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}


OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStub(const sptr<OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback> &impl)
    : IPCObjectStub(OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::~ExecutorCallbackStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_EXECUTOR_CALLBACK_GET_VERSION:
            return ExecutorCallbackStubGetVersion(data, reply, option);
        case CMD_EXECUTOR_CALLBACK_ON_RESULT:
            return ExecutorCallbackStubOnResult(data, reply, option);
        case CMD_EXECUTOR_CALLBACK_ON_TIP:
            return ExecutorCallbackStubOnTip(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnResult(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption)
{
    return OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnResult_(executorCallbackData, executorCallbackReply, executorCallbackOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnTip(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption)
{
    return OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnTip_(executorCallbackData, executorCallbackReply, executorCallbackOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubGetVersion(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption)
{
    return OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubGetVersion_(executorCallbackData, executorCallbackReply, executorCallbackOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnResult_(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption, sptr<OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback> impl)
{
    if (executorCallbackData.ReadInterfaceToken() != OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t result = 0;
    if (!executorCallbackData.ReadInt32(result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> extraInfo;
    if (!ReadPodArray(executorCallbackData, extraInfo)) {
        HDF_LOGE("%{public}s: failed to read extraInfo", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t executorCallbackRet = impl->OnResult(result, extraInfo);
    if (executorCallbackRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, executorCallbackRet);
        return executorCallbackRet;
    }

    return executorCallbackRet;
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubOnTip_(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption, sptr<OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback> impl)
{
    if (executorCallbackData.ReadInterfaceToken() != OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t tip = 0;
    if (!executorCallbackData.ReadInt32(tip)) {
        HDF_LOGE("%{public}s: read tip failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> extraInfo;
    if (!ReadPodArray(executorCallbackData, extraInfo)) {
        HDF_LOGE("%{public}s: failed to read extraInfo", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t executorCallbackRet = impl->OnTip(tip, extraInfo);
    if (executorCallbackRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, executorCallbackRet);
        return executorCallbackRet;
    }

    return executorCallbackRet;
}

int32_t OHOS::HDI::FingerprintAuth::V1_0::ExecutorCallbackStub::ExecutorCallbackStubGetVersion_(MessageParcel& executorCallbackData, MessageParcel& executorCallbackReply, MessageOption& executorCallbackOption, sptr<OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback> impl)
{
    if (executorCallbackData.ReadInterfaceToken() != OHOS::HDI::FingerprintAuth::V1_0::IExecutorCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t executorCallbackRet = impl->GetVersion(majorVer, minorVer);
    if (executorCallbackRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, executorCallbackRet);
        return executorCallbackRet;
    }

    if (!executorCallbackReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!executorCallbackReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return executorCallbackRet;
}
} // V1_0
} // FingerprintAuth
} // HDI
} // OHOS
