/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/activity_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "a_recognition/v1_0/activity_changed_callback_proxy.h"

#define HDF_LOG_TAG    activity_interface_stub

namespace OHOS {
namespace HDI {
namespace ARecognition {
namespace V1_0 {
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> OHOS::HDI::ARecognition::V1_0::IActivityInterface::Get(bool isStub)
{
    return OHOS::HDI::ARecognition::V1_0::IActivityInterface::Get("activity_interface_service", isStub);
}

sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> OHOS::HDI::ARecognition::V1_0::IActivityInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "activity_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::ARecognition::V1_0::IActivityInterface *>(impl);
}


OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStub(const sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> &impl)
    : IPCObjectStub(OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::~ActivityInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_ACTIVITY_INTERFACE_GET_VERSION:
            return ActivityInterfaceStubGetVersion(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_REGISTER_ACT_RECOGNITION_CALLBACK:
            return ActivityInterfaceStubRegisterActRecognitionCallback(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_UNREGISTER_ACT_RECOGNITION_CALLBACK:
            return ActivityInterfaceStubUnregisterActRecognitionCallback(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_GET_SUPPORT_ACTIVITY:
            return ActivityInterfaceStubGetSupportActivity(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_GET_CURRENT_ACTIVITY:
            return ActivityInterfaceStubGetCurrentActivity(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_ENABLE_ACT_RECOGNITION_EVENT:
            return ActivityInterfaceStubEnableActRecognitionEvent(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_DISABLE_ACT_RECOGNITION_EVENT:
            return ActivityInterfaceStubDisableActRecognitionEvent(data, reply, option);
        case CMD_ACTIVITY_INTERFACE_FLUSH_ACTIVITY:
            return ActivityInterfaceStubFlushActivity(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubRegisterActRecognitionCallback(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubRegisterActRecognitionCallback_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubUnregisterActRecognitionCallback(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubUnregisterActRecognitionCallback_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetSupportActivity(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetSupportActivity_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetCurrentActivity(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetCurrentActivity_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubEnableActRecognitionEvent(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubEnableActRecognitionEvent_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubDisableActRecognitionEvent(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubDisableActRecognitionEvent_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubFlushActivity(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubFlushActivity_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetVersion(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetVersion_(activityInterfaceData, activityInterfaceReply, activityInterfaceOption, impl_);
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubRegisterActRecognitionCallback_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::ARecognition::V1_0::IActivityChangedCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = activityInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->RegisterActRecognitionCallback(callbackObj);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubUnregisterActRecognitionCallback_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::ARecognition::V1_0::IActivityChangedCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = activityInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->UnregisterActRecognitionCallback(callbackObj);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetSupportActivity_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool activityInterfaceMemSet = false;
    if (!activityInterfaceData.ReadBool(activityInterfaceMemSet)) {
        HDF_LOGE("%{public}s: failed to read activityInterfaceMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<std::string> activity;
    if (activityInterfaceMemSet) {
        uint32_t capacity = 0;
        if (!activityInterfaceData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(std::string), HDF_ERR_INVALID_PARAM);
        activity.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->GetSupportActivity(activity);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    if (!activityInterfaceReply.WriteUint32(activity.size())) {
        HDF_LOGE("%{public}s: write activity size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : activity) {
        if (!activityInterfaceReply.WriteCString(it0.c_str())) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetCurrentActivity_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool activityInterfaceMemSet = false;
    if (!activityInterfaceData.ReadBool(activityInterfaceMemSet)) {
        HDF_LOGE("%{public}s: failed to read activityInterfaceMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<OHOS::HDI::ARecognition::V1_0::ActRecognitionEvent> event;
    if (activityInterfaceMemSet) {
        uint32_t capacity = 0;
        if (!activityInterfaceData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::ARecognition::V1_0::ActRecognitionEvent), HDF_ERR_INVALID_PARAM);
        event.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->GetCurrentActivity(event);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    if (!WritePodArray(activityInterfaceReply, event)) {
        HDF_LOGE("%{public}s: failed to write event", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubEnableActRecognitionEvent_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activity = 0;
    if (!activityInterfaceData.ReadInt32(activity)) {
        HDF_LOGE("%{public}s: read activity failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t eventType = 0;
    if (!activityInterfaceData.ReadInt32(eventType)) {
        HDF_LOGE("%{public}s: read eventType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int64_t maxReportLatencyNs = 0;
    if (!activityInterfaceData.ReadInt64(maxReportLatencyNs)) {
        HDF_LOGE("%{public}s: read maxReportLatencyNs failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t powerMode = 0;
    if (!activityInterfaceData.ReadInt32(powerMode)) {
        HDF_LOGE("%{public}s: read powerMode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->EnableActRecognitionEvent(activity, eventType, maxReportLatencyNs, powerMode);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubDisableActRecognitionEvent_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activity = 0;
    if (!activityInterfaceData.ReadInt32(activity)) {
        HDF_LOGE("%{public}s: read activity failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t eventType = 0;
    if (!activityInterfaceData.ReadInt32(eventType)) {
        HDF_LOGE("%{public}s: read eventType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->DisableActRecognitionEvent(activity, eventType);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubFlushActivity_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->FlushActivity();
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    return activityInterfaceRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityInterfaceStub::ActivityInterfaceStubGetVersion_(MessageParcel& activityInterfaceData, MessageParcel& activityInterfaceReply, MessageOption& activityInterfaceOption, sptr<OHOS::HDI::ARecognition::V1_0::IActivityInterface> impl)
{
    if (activityInterfaceData.ReadInterfaceToken() != OHOS::HDI::ARecognition::V1_0::IActivityInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t activityInterfaceRet = impl->GetVersion(majorVer, minorVer);
    if (activityInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityInterfaceRet);
        return activityInterfaceRet;
    }

    if (!activityInterfaceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!activityInterfaceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return activityInterfaceRet;
}
} // V1_0
} // ARecognition
} // HDI
} // OHOS
