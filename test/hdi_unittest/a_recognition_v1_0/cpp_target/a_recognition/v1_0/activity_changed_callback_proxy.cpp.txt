/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/activity_changed_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    activity_changed_callback_proxy

namespace OHOS {
namespace HDI {
namespace ARecognition {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::OnActivityChanged(const std::vector<OHOS::HDI::ARecognition::V1_0::ActRecognitionEvent>& event)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::OnActivityChanged_(event, Remote());
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::OnActivityChanged_(const std::vector<OHOS::HDI::ARecognition::V1_0::ActRecognitionEvent>& event, const sptr<IRemoteObject> remote)
{
    MessageParcel activityChangedCallbackData;
    MessageParcel activityChangedCallbackReply;
    MessageOption activityChangedCallbackOption(MessageOption::TF_SYNC);

    if (!activityChangedCallbackData.WriteInterfaceToken(OHOS::HDI::ARecognition::V1_0::IActivityChangedCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(activityChangedCallbackData, event)) {
        HDF_LOGE("%{public}s: failed to write event", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t activityChangedCallbackRet = remote->SendRequest(CMD_ACTIVITY_CHANGED_CALLBACK_ON_ACTIVITY_CHANGED, activityChangedCallbackData, activityChangedCallbackReply, activityChangedCallbackOption);
    if (activityChangedCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityChangedCallbackRet);
        return activityChangedCallbackRet;
    }

    return activityChangedCallbackRet;
}

int32_t OHOS::HDI::ARecognition::V1_0::ActivityChangedCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel activityChangedCallbackData;
    MessageParcel activityChangedCallbackReply;
    MessageOption activityChangedCallbackOption(MessageOption::TF_SYNC);

    if (!activityChangedCallbackData.WriteInterfaceToken(OHOS::HDI::ARecognition::V1_0::IActivityChangedCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t activityChangedCallbackRet = remote->SendRequest(CMD_ACTIVITY_CHANGED_CALLBACK_GET_VERSION, activityChangedCallbackData, activityChangedCallbackReply, activityChangedCallbackOption);
    if (activityChangedCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, activityChangedCallbackRet);
        return activityChangedCallbackRet;
    }

    if (!activityChangedCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!activityChangedCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return activityChangedCallbackRet;
}

} // V1_0
} // ARecognition
} // HDI
} // OHOS
