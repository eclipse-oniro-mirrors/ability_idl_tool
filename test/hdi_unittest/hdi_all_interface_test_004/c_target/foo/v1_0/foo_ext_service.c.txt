/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_log.h>
#include <osal_mem.h>
#include <securec.h>
#include "v1_0/ifoo_ext.h"

#define HDF_LOG_TAG    foo_ext_service

struct FooExtService {
    struct IFooExt interface;
};

static int32_t FooExtTestFunc11(struct IFooExt *self, const BufferHandle* inData, BufferHandle** outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc13(struct IFooExt *self, unknow type inData, unknow type outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc15(struct IFooExt *self, uint8_t inData, uint8_t outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc16(struct IFooExt *self, uint32_t inData, uint8_t outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc17(struct IFooExt *self, uint16_t inData, uint32_t* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc18(struct IFooExt *self, uint64_t inData, uint64_t* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc19(struct IFooExt *self, const struct FooInfo* inData, enum AudioPortPin* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtTestFunc20(struct IFooExt *self, const struct AudioSceneDescriptor* inData,
     union SceneDesc* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooExtGetVersion(struct IFooExt *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IFOO_EXT_MAJOR_VERSION;
    *minorVer = IFOO_EXT_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IFooExt *FooExtImplGetInstance(void)
{
    struct FooExtService *service = (struct FooExtService *)OsalMemCalloc(sizeof(struct FooExtService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc FooExtService obj failed!", __func__);
        return NULL;
    }

    service->interface.TestFunc11 = FooExtTestFunc11;
    service->interface.TestFunc13 = FooExtTestFunc13;
    service->interface.TestFunc15 = FooExtTestFunc15;
    service->interface.TestFunc16 = FooExtTestFunc16;
    service->interface.TestFunc17 = FooExtTestFunc17;
    service->interface.TestFunc18 = FooExtTestFunc18;
    service->interface.TestFunc19 = FooExtTestFunc19;
    service->interface.TestFunc20 = FooExtTestFunc20;
    service->interface.GetVersion = FooExtGetVersion;
    return &service->interface;
}

void FooExtImplRelease(struct IFooExt *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
