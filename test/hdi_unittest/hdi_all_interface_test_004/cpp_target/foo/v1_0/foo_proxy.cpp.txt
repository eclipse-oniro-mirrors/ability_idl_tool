/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/ifoo.h"
#include <codecvt>
#include <locale>
#include <hdf_core_log.h>
#include <hdi_support.h>

#define HDF_LOG_TAG    foo_proxy

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {
std::shared_ptr<OHOS::HDI::Foo::V1_0::IFoo> OHOS::HDI::Foo::V1_0::IFoo::Get(bool isStub)
{
    return IFoo::Get("foo_service", isStub);
}

std::shared_ptr<OHOS::HDI::Foo::V1_0::IFoo> IFoo::Get(const std::string &serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t>{}.to_bytes(OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor());
        std::string svrName = (serviceName == "foo_service") ? "service" : serviceName;
        std::shared_ptr<OHOS::HDI::Foo::V1_0::IFoo> impl = \
            reinterpret_cast<OHOS::HDI::Foo::V1_0::IFoo *>(LoadHdiImpl(desc.c_str(), svrName.c_str()));
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        uint32_t serMajorVer = 0;
        uint32_t serMinorVer = 0;
        int32_t fooRet = impl->GetVersion(serMajorVer, serMinorVer);
        if (fooRet != HDF_SUCCESS) {
            HDF_LOGE("%{public}s: get version failed!", __func__);
            return nullptr;
        }

        if (serMajorVer != 1) {
            HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
            return nullptr;
        }
        if (serMinorVer < 0) {
            HDF_LOGE("%{public}s:check Minor version failed! "
                "client minor version(0) should be less or equal to implementation minor version(%u).", __func__, serMinorVer);
            return nullptr;
        }

        return impl;
    }

    return nullptr;
}
} // V1_0
} // Foo
} // HDI
} // OHOS
