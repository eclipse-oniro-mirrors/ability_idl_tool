/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/foo_ext_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    foo_ext_service

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {
extern "C" IFooExt *FooExtImplGetInstance(void)
{
    return new (std::nothrow) FooExtService();
}

int32_t FooExtService::TestFunc10(const sptr<Ashmem>& inData, sptr<Ashmem>& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc11(const sptr<NativeBuffer>& inData, sptr<NativeBuffer>& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc12(const void* inData, void*& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc13(const std::map<std::string, std::string>& inData, std::map<std::string,
     std::string>& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc14(const std::shared_ptr<SharedMemQueue<uint8_t>>& inData,
     std::shared_ptr<SharedMemQueue<uint8_t>>& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc15(uint8_t inData, uint8_t outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc16(uint32_t inData, uint8_t outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc17(uint16_t inData, uint32_t& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc18(uint64_t inData, uint64_t& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc19(const OHOS::HDI::Foo::V1_0::FooInfo& inData,
     OHOS::HDI::Foo::V1_0::AudioPortPin& outData)
{
    return HDF_SUCCESS;
}

int32_t FooExtService::TestFunc20(const OHOS::HDI::Foo::V1_0::AudioSceneDescriptor& inData,
     OHOS::HDI::Foo::V1_0::SceneDesc& outData)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Foo
} // HDI
} // OHOS
