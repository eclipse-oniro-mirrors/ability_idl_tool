/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/cellbatching_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    cellbatching_callback_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Cellbatching {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingChanged(const std::vector<OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData>& data)
{
    return OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingChanged_(data, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingReset()
{
    return OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingReset_(Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingChanged_(const std::vector<OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData>& data, const sptr<IRemoteObject> remote)
{
    MessageParcel cellbatchingCallbackData;
    MessageParcel cellbatchingCallbackReply;
    MessageOption cellbatchingCallbackOption(MessageOption::TF_SYNC);

    if (!cellbatchingCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::ICellbatchingCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(cellbatchingCallbackData, data)) {
        HDF_LOGE("%{public}s: failed to write data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellbatchingCallbackRet = remote->SendRequest(CMD_CELLBATCHING_CALLBACK_ON_CELLBATCHING_CHANGED, cellbatchingCallbackData, cellbatchingCallbackReply, cellbatchingCallbackOption);
    if (cellbatchingCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellbatchingCallbackRet);
        return cellbatchingCallbackRet;
    }

    return cellbatchingCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::OnCellbatchingReset_(const sptr<IRemoteObject> remote)
{
    MessageParcel cellbatchingCallbackData;
    MessageParcel cellbatchingCallbackReply;
    MessageOption cellbatchingCallbackOption(MessageOption::TF_SYNC);

    if (!cellbatchingCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::ICellbatchingCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellbatchingCallbackRet = remote->SendRequest(CMD_CELLBATCHING_CALLBACK_ON_CELLBATCHING_RESET, cellbatchingCallbackData, cellbatchingCallbackReply, cellbatchingCallbackOption);
    if (cellbatchingCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellbatchingCallbackRet);
        return cellbatchingCallbackRet;
    }

    return cellbatchingCallbackRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingCallbackProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel cellbatchingCallbackData;
    MessageParcel cellbatchingCallbackReply;
    MessageOption cellbatchingCallbackOption(MessageOption::TF_SYNC);

    if (!cellbatchingCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::ICellbatchingCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellbatchingCallbackRet = remote->SendRequest(CMD_CELLBATCHING_CALLBACK_GET_VERSION, cellbatchingCallbackData, cellbatchingCallbackReply, cellbatchingCallbackOption);
    if (cellbatchingCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellbatchingCallbackRet);
        return cellbatchingCallbackRet;
    }

    if (!cellbatchingCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellbatchingCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return cellbatchingCallbackRet;
}

} // V1_0
} // Cellbatching
} // Lpfence
} // Location
} // HDI
} // OHOS
