/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/cellbatching_types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Cellbatching {
namespace V1_0 {



bool CellbatchingRequestBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest))) {
        return false;
    }
    return true;
}

bool CellbatchingRequestBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest& dataBlock)
{
    const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest), dataBlockPtr, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellbatchingRequest)) != EOK) {
        return false;
    }
    return true;
}

bool CellTrajectoryDataBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData))) {
        return false;
    }
    return true;
}

bool CellTrajectoryDataBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData& dataBlock)
{
    const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData), dataBlockPtr, sizeof(OHOS::HDI::Location::Lpfence::Cellbatching::V1_0::CellTrajectoryData)) != EOK) {
        return false;
    }
    return true;
}

} // V1_0
} // Cellbatching
} // Lpfence
} // Location
} // HDI
} // OHOS
