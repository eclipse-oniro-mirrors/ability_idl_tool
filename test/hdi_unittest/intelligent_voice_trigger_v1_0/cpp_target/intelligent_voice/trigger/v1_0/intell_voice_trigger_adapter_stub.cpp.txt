/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_trigger_adapter_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <iproxy_broker.h>
#include "intelligent_voice/trigger/v1_0/intell_voice_trigger_callback_proxy.h"

#define HDF_LOG_TAG    intell_voice_trigger_adapter_stub

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Trigger {
namespace V1_0 {



OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStub(const sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> &impl)
    : IPCObjectStub(OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::~IntellVoiceTriggerAdapterStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_GET_VERSION:
            return IntellVoiceTriggerAdapterStubGetVersion(data, reply, option);
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_GET_PROPERTIES:
            return IntellVoiceTriggerAdapterStubGetProperties(data, reply, option);
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_LOAD_MODEL:
            return IntellVoiceTriggerAdapterStubLoadModel(data, reply, option);
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_UNLOAD_MODEL:
            return IntellVoiceTriggerAdapterStubUnloadModel(data, reply, option);
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_START:
            return IntellVoiceTriggerAdapterStubStart(data, reply, option);
        case CMD_INTELL_VOICE_TRIGGER_ADAPTER_STOP:
            return IntellVoiceTriggerAdapterStubStop(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetProperties(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetProperties_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubLoadModel(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubLoadModel_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubUnloadModel(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubUnloadModel_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStart(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStart_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStop(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStop_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetVersion(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetVersion_(intellVoiceTriggerAdapterData, intellVoiceTriggerAdapterReply, intellVoiceTriggerAdapterOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetProperties_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerProperties properties;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->GetProperties(properties);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    if (!OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerPropertiesBlockMarshalling(intellVoiceTriggerAdapterReply, properties)) {
        HDF_LOGE("%{public}s: write properties failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceTriggerAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubLoadModel_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModel model;
    if (!IntellVoiceTriggerModelBlockUnmarshalling(intellVoiceTriggerAdapterData, model)) {
        HDF_LOGE("%{public}s: read model failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerCallback> triggerCallback;
    sptr<IRemoteObject> triggerCallbackRemote = intellVoiceTriggerAdapterData.ReadRemoteObject();
    if (triggerCallbackRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    triggerCallback = new OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy(triggerCallbackRemote);
    if (triggerCallback == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cookie = 0;
    if (!intellVoiceTriggerAdapterData.ReadInt32(cookie)) {
        HDF_LOGE("%{public}s: read cookie failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t handle = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->LoadModel(model, triggerCallback, cookie, handle);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    if (!intellVoiceTriggerAdapterReply.WriteInt32(handle)) {
        HDF_LOGE("%{public}s: write handle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceTriggerAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubUnloadModel_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t handle = 0;
    if (!intellVoiceTriggerAdapterData.ReadInt32(handle)) {
        HDF_LOGE("%{public}s: read handle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->UnloadModel(handle);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    return intellVoiceTriggerAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStart_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t handle = 0;
    if (!intellVoiceTriggerAdapterData.ReadInt32(handle)) {
        HDF_LOGE("%{public}s: read handle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->Start(handle);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    return intellVoiceTriggerAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubStop_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t handle = 0;
    if (!intellVoiceTriggerAdapterData.ReadInt32(handle)) {
        HDF_LOGE("%{public}s: read handle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->Stop(handle);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    return intellVoiceTriggerAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterStub::IntellVoiceTriggerAdapterStubGetVersion_(MessageParcel& intellVoiceTriggerAdapterData, MessageParcel& intellVoiceTriggerAdapterReply, MessageOption& intellVoiceTriggerAdapterOption, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter> impl)
{
    if (intellVoiceTriggerAdapterData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceTriggerAdapterRet = impl->GetVersion(majorVer, minorVer);
    if (intellVoiceTriggerAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerAdapterRet);
        return intellVoiceTriggerAdapterRet;
    }

    if (!intellVoiceTriggerAdapterReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceTriggerAdapterReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceTriggerAdapterRet;
}
} // V1_0
} // Trigger
} // IntelligentVoice
} // HDI
} // OHOS
