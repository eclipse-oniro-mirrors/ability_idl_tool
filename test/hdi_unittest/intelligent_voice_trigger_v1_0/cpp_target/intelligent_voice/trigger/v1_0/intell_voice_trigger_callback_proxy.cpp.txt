/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_trigger_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    intell_voice_trigger_callback_proxy

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Trigger {
namespace V1_0 {


int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::OnRecognitionHdiEvent(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceRecognitionEvent& event, int32_t cookie)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::OnRecognitionHdiEvent_(event, cookie, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::OnRecognitionHdiEvent_(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceRecognitionEvent& event, int32_t cookie, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceTriggerCallbackData;
    MessageParcel intellVoiceTriggerCallbackReply;
    MessageOption intellVoiceTriggerCallbackOption(MessageOption::TF_SYNC);

    if (!intellVoiceTriggerCallbackData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceRecognitionEventBlockMarshalling(intellVoiceTriggerCallbackData, event)) {
        HDF_LOGE("%{public}s: write event failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceTriggerCallbackData.WriteInt32(cookie)) {
        HDF_LOGE("%{public}s: write cookie failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceTriggerCallbackRet = remote->SendRequest(CMD_INTELL_VOICE_TRIGGER_CALLBACK_ON_RECOGNITION_HDI_EVENT, intellVoiceTriggerCallbackData, intellVoiceTriggerCallbackReply, intellVoiceTriggerCallbackOption);
    if (intellVoiceTriggerCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerCallbackRet);
        return intellVoiceTriggerCallbackRet;
    }

    return intellVoiceTriggerCallbackRet;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerCallbackProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceTriggerCallbackData;
    MessageParcel intellVoiceTriggerCallbackReply;
    MessageOption intellVoiceTriggerCallbackOption(MessageOption::TF_SYNC);

    if (!intellVoiceTriggerCallbackData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceTriggerCallbackRet = remote->SendRequest(CMD_INTELL_VOICE_TRIGGER_CALLBACK_GET_VERSION, intellVoiceTriggerCallbackData, intellVoiceTriggerCallbackReply, intellVoiceTriggerCallbackOption);
    if (intellVoiceTriggerCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerCallbackRet);
        return intellVoiceTriggerCallbackRet;
    }

    if (!intellVoiceTriggerCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceTriggerCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceTriggerCallbackRet;
}

} // V1_0
} // Trigger
} // IntelligentVoice
} // HDI
} // OHOS
