/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_0_INTELLVOICETRIGGERTYPES_H
#define OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_0_INTELLVOICETRIGGERTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>
#include <ashmem.h>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Trigger {
namespace V1_0 {

using namespace OHOS;

enum IntellVoiceTriggerModelType : int32_t {
    UNKNOWN = -1,
    DEFAULT = 1,
};

enum RecognitionStatus : int32_t {
    SUCCESS = 0,
    ABORT = 1,
    FAILURE = 2,
};

struct IntellVoiceTriggerAdapterDsecriptor {
    std::string adapterName;
};

struct IntellVoiceTriggerProperties {
    std::string implementor;
    std::string description;
    uint32_t version;
    uint32_t maxIntellVoiceModels;
};

struct IntellVoiceTriggerModel {
    OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModelType type;
    uint32_t uid;
    sptr<Ashmem> data;
};

struct IntellVoiceRecognitionEvent {
    OHOS::HDI::IntelligentVoice::Trigger::V1_0::RecognitionStatus status;
    OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModelType type;
    int32_t modelHandle;
} __attribute__ ((aligned(8)));

bool IntellVoiceTriggerAdapterDsecriptorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& dataBlock);

bool IntellVoiceTriggerAdapterDsecriptorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& dataBlock);

bool IntellVoiceTriggerPropertiesBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerProperties& dataBlock);

bool IntellVoiceTriggerPropertiesBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerProperties& dataBlock);

bool IntellVoiceTriggerModelBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModel& dataBlock);

bool IntellVoiceTriggerModelBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModel& dataBlock);

bool IntellVoiceRecognitionEventBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceRecognitionEvent& dataBlock);

bool IntellVoiceRecognitionEventBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceRecognitionEvent& dataBlock);

} // V1_0
} // Trigger
} // IntelligentVoice
} // HDI
} // OHOS

#endif // OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_0_INTELLVOICETRIGGERTYPES_H

