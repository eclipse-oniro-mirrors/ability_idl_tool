/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/audio_capture_service.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <osal_mem.h>
#include <securec.h>

#define HDF_LOG_TAG    audio_capture_service

static int32_t AudioCaptureCaptureFrame(struct IAudioCapture *self, int8_t* frame, uint32_t* frameLen,
     uint64_t* replyBytes)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetCapturePosition(struct IAudioCapture *self, uint64_t* frames, struct AudioTimeStamp* time)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureCheckSceneCapability(struct IAudioCapture *self, const struct AudioSceneDescriptor* scene,
     bool* supported)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSelectScene(struct IAudioCapture *self, const struct AudioSceneDescriptor* scene)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSetMute(struct IAudioCapture *self, bool mute)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetMute(struct IAudioCapture *self, bool* mute)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSetVolume(struct IAudioCapture *self, float volume)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetVolume(struct IAudioCapture *self, float* volume)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetGainThreshold(struct IAudioCapture *self, float* min, float* max)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetGain(struct IAudioCapture *self, float* gain)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSetGain(struct IAudioCapture *self, float gain)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetFrameSize(struct IAudioCapture *self, uint64_t* size)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetFrameCount(struct IAudioCapture *self, uint64_t* count)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSetSampleAttributes(struct IAudioCapture *self, const struct AudioSampleAttributes* attrs)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetSampleAttributes(struct IAudioCapture *self, struct AudioSampleAttributes* attrs)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetCurrentChannelId(struct IAudioCapture *self, uint32_t* channelId)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureSetExtraParams(struct IAudioCapture *self, const char* keyValueList)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetExtraParams(struct IAudioCapture *self, char* keyValueList, uint32_t keyValueListLen)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureReqMmapBuffer(struct IAudioCapture *self, int32_t reqSize,
     struct AudioMmapBufferDescriptor* desc)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetMmapPosition(struct IAudioCapture *self, uint64_t* frames, struct AudioTimeStamp* time)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureAddAudioEffect(struct IAudioCapture *self, uint64_t effectid)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureRemoveAudioEffect(struct IAudioCapture *self, uint64_t effectid)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetFrameBufferSize(struct IAudioCapture *self, uint64_t* bufferSize)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureStart(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureStop(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCapturePause(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureResume(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureFlush(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureTurnStandbyMode(struct IAudioCapture *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureAudioDevDump(struct IAudioCapture *self, int32_t range, int32_t fd)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureIsSupportsPauseAndResume(struct IAudioCapture *self, bool* supportPause, bool* supportResume)
{
    return HDF_SUCCESS;
}

static int32_t AudioCaptureGetVersion(struct IAudioCapture *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IAUDIO_CAPTURE_MAJOR_VERSION;
    *minorVer = IAUDIO_CAPTURE_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IAudioCapture *AudioCaptureServiceGet(void)
{
    struct AudioCaptureService *service = (struct AudioCaptureService *)OsalMemCalloc(sizeof(struct AudioCaptureService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc AudioCaptureService obj failed!", __func__);
        return NULL;
    }

    service->interface.CaptureFrame = AudioCaptureCaptureFrame;
    service->interface.GetCapturePosition = AudioCaptureGetCapturePosition;
    service->interface.CheckSceneCapability = AudioCaptureCheckSceneCapability;
    service->interface.SelectScene = AudioCaptureSelectScene;
    service->interface.SetMute = AudioCaptureSetMute;
    service->interface.GetMute = AudioCaptureGetMute;
    service->interface.SetVolume = AudioCaptureSetVolume;
    service->interface.GetVolume = AudioCaptureGetVolume;
    service->interface.GetGainThreshold = AudioCaptureGetGainThreshold;
    service->interface.GetGain = AudioCaptureGetGain;
    service->interface.SetGain = AudioCaptureSetGain;
    service->interface.GetFrameSize = AudioCaptureGetFrameSize;
    service->interface.GetFrameCount = AudioCaptureGetFrameCount;
    service->interface.SetSampleAttributes = AudioCaptureSetSampleAttributes;
    service->interface.GetSampleAttributes = AudioCaptureGetSampleAttributes;
    service->interface.GetCurrentChannelId = AudioCaptureGetCurrentChannelId;
    service->interface.SetExtraParams = AudioCaptureSetExtraParams;
    service->interface.GetExtraParams = AudioCaptureGetExtraParams;
    service->interface.ReqMmapBuffer = AudioCaptureReqMmapBuffer;
    service->interface.GetMmapPosition = AudioCaptureGetMmapPosition;
    service->interface.AddAudioEffect = AudioCaptureAddAudioEffect;
    service->interface.RemoveAudioEffect = AudioCaptureRemoveAudioEffect;
    service->interface.GetFrameBufferSize = AudioCaptureGetFrameBufferSize;
    service->interface.Start = AudioCaptureStart;
    service->interface.Stop = AudioCaptureStop;
    service->interface.Pause = AudioCapturePause;
    service->interface.Resume = AudioCaptureResume;
    service->interface.Flush = AudioCaptureFlush;
    service->interface.TurnStandbyMode = AudioCaptureTurnStandbyMode;
    service->interface.AudioDevDump = AudioCaptureAudioDevDump;
    service->interface.IsSupportsPauseAndResume = AudioCaptureIsSupportsPauseAndResume;
    service->interface.GetVersion = AudioCaptureGetVersion;
    return &service->interface;
}

void AudioCaptureServiceRelease(struct IAudioCapture *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
