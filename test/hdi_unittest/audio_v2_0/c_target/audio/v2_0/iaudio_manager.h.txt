/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_AUDIO_V2_0_IAUDIOMANAGER_H
#define OHOS_HDI_AUDIO_V2_0_IAUDIOMANAGER_H

#include <stdbool.h>
#include <stdint.h>
#include <hdf_base.h>
#include "audio/v2_0/audio_types.h"
#include "audio/v2_0/iaudio_adapter.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct HdfRemoteService;

#define IAUDIOMANAGER_INTERFACE_DESC "ohos.hdi.audio.v2_0.IAudioManager"

#define IAUDIO_MANAGER_MAJOR_VERSION 2
#define IAUDIO_MANAGER_MINOR_VERSION 0

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

enum {
    CMD_AUDIO_MANAGER_GET_VERSION = 0,
    CMD_AUDIO_MANAGER_GET_ALL_ADAPTERS = 1,
    CMD_AUDIO_MANAGER_LOAD_ADAPTER = 2,
    CMD_AUDIO_MANAGER_UNLOAD_ADAPTER = 3,
    CMD_AUDIO_MANAGER_RELEASE_AUDIO_MANAGER_OBJECT = 4,
};

struct IAudioManager {
    int32_t (*GetAllAdapters)(struct IAudioManager *self, struct AudioAdapterDescriptor* descs, uint32_t* descsLen);

    int32_t (*LoadAdapter)(struct IAudioManager *self, const struct AudioAdapterDescriptor* desc,
         struct IAudioAdapter** adapter);

    int32_t (*UnloadAdapter)(struct IAudioManager *self, const char* adapterName);

    int32_t (*ReleaseAudioManagerObject)(struct IAudioManager *self);

    int32_t (*GetVersion)(struct IAudioManager *self, uint32_t* majorVer, uint32_t* minorVer);

    struct HdfRemoteService* (*AsObject)(struct IAudioManager *self);
};

// external method used to create client object, it support ipc and passthrought mode
struct IAudioManager *IAudioManagerGet(bool isStub);
struct IAudioManager *IAudioManagerGetInstance(const char *serviceName, bool isStub);

// external method used to create release object, it support ipc and passthrought mode
void IAudioManagerRelease(struct IAudioManager *instance, bool isStub);
void IAudioManagerReleaseInstance(const char *serviceName, struct IAudioManager *instance, bool isStub);
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // OHOS_HDI_AUDIO_V2_0_IAUDIOMANAGER_H