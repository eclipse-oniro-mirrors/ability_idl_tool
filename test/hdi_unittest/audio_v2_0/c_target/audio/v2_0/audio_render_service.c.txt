/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/audio_render_service.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <osal_mem.h>
#include <securec.h>

#define HDF_LOG_TAG    audio_render_service

static int32_t AudioRenderGetLatency(struct IAudioRender *self, uint32_t* ms)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderRenderFrame(struct IAudioRender *self, const int8_t* frame, uint32_t frameLen,
     uint64_t* replyBytes)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetRenderPosition(struct IAudioRender *self, uint64_t* frames, struct AudioTimeStamp* time)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetRenderSpeed(struct IAudioRender *self, float speed)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetRenderSpeed(struct IAudioRender *self, float* speed)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetChannelMode(struct IAudioRender *self, enum AudioChannelMode mode)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetChannelMode(struct IAudioRender *self, enum AudioChannelMode* mode)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderRegCallback(struct IAudioRender *self, struct IAudioCallback* audioCallback, int8_t cookie)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderDrainBuffer(struct IAudioRender *self, enum AudioDrainNotifyType* type)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderIsSupportsDrain(struct IAudioRender *self, bool* support)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderCheckSceneCapability(struct IAudioRender *self, const struct AudioSceneDescriptor* scene,
     bool* supported)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSelectScene(struct IAudioRender *self, const struct AudioSceneDescriptor* scene)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetMute(struct IAudioRender *self, bool mute)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetMute(struct IAudioRender *self, bool* mute)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetVolume(struct IAudioRender *self, float volume)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetVolume(struct IAudioRender *self, float* volume)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetGainThreshold(struct IAudioRender *self, float* min, float* max)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetGain(struct IAudioRender *self, float* gain)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetGain(struct IAudioRender *self, float gain)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetFrameSize(struct IAudioRender *self, uint64_t* size)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetFrameCount(struct IAudioRender *self, uint64_t* count)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetSampleAttributes(struct IAudioRender *self, const struct AudioSampleAttributes* attrs)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetSampleAttributes(struct IAudioRender *self, struct AudioSampleAttributes* attrs)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetCurrentChannelId(struct IAudioRender *self, uint32_t* channelId)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetExtraParams(struct IAudioRender *self, const char* keyValueList)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetExtraParams(struct IAudioRender *self, char* keyValueList, uint32_t keyValueListLen)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderReqMmapBuffer(struct IAudioRender *self, int32_t reqSize,
     struct AudioMmapBufferDescriptor* desc)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetMmapPosition(struct IAudioRender *self, uint64_t* frames, struct AudioTimeStamp* time)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderAddAudioEffect(struct IAudioRender *self, uint64_t effectid)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderRemoveAudioEffect(struct IAudioRender *self, uint64_t effectid)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetFrameBufferSize(struct IAudioRender *self, uint64_t* bufferSize)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderStart(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderStop(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderPause(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderResume(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderFlush(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderTurnStandbyMode(struct IAudioRender *self)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderAudioDevDump(struct IAudioRender *self, int32_t range, int32_t fd)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderIsSupportsPauseAndResume(struct IAudioRender *self, bool* supportPause, bool* supportResume)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderSetBufferSize(struct IAudioRender *self, uint32_t size)
{
    return HDF_SUCCESS;
}

static int32_t AudioRenderGetVersion(struct IAudioRender *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IAUDIO_RENDER_MAJOR_VERSION;
    *minorVer = IAUDIO_RENDER_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IAudioRender *AudioRenderServiceGet(void)
{
    struct AudioRenderService *service = (struct AudioRenderService *)OsalMemCalloc(sizeof(struct AudioRenderService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc AudioRenderService obj failed!", __func__);
        return NULL;
    }

    service->interface.GetLatency = AudioRenderGetLatency;
    service->interface.RenderFrame = AudioRenderRenderFrame;
    service->interface.GetRenderPosition = AudioRenderGetRenderPosition;
    service->interface.SetRenderSpeed = AudioRenderSetRenderSpeed;
    service->interface.GetRenderSpeed = AudioRenderGetRenderSpeed;
    service->interface.SetChannelMode = AudioRenderSetChannelMode;
    service->interface.GetChannelMode = AudioRenderGetChannelMode;
    service->interface.RegCallback = AudioRenderRegCallback;
    service->interface.DrainBuffer = AudioRenderDrainBuffer;
    service->interface.IsSupportsDrain = AudioRenderIsSupportsDrain;
    service->interface.CheckSceneCapability = AudioRenderCheckSceneCapability;
    service->interface.SelectScene = AudioRenderSelectScene;
    service->interface.SetMute = AudioRenderSetMute;
    service->interface.GetMute = AudioRenderGetMute;
    service->interface.SetVolume = AudioRenderSetVolume;
    service->interface.GetVolume = AudioRenderGetVolume;
    service->interface.GetGainThreshold = AudioRenderGetGainThreshold;
    service->interface.GetGain = AudioRenderGetGain;
    service->interface.SetGain = AudioRenderSetGain;
    service->interface.GetFrameSize = AudioRenderGetFrameSize;
    service->interface.GetFrameCount = AudioRenderGetFrameCount;
    service->interface.SetSampleAttributes = AudioRenderSetSampleAttributes;
    service->interface.GetSampleAttributes = AudioRenderGetSampleAttributes;
    service->interface.GetCurrentChannelId = AudioRenderGetCurrentChannelId;
    service->interface.SetExtraParams = AudioRenderSetExtraParams;
    service->interface.GetExtraParams = AudioRenderGetExtraParams;
    service->interface.ReqMmapBuffer = AudioRenderReqMmapBuffer;
    service->interface.GetMmapPosition = AudioRenderGetMmapPosition;
    service->interface.AddAudioEffect = AudioRenderAddAudioEffect;
    service->interface.RemoveAudioEffect = AudioRenderRemoveAudioEffect;
    service->interface.GetFrameBufferSize = AudioRenderGetFrameBufferSize;
    service->interface.Start = AudioRenderStart;
    service->interface.Stop = AudioRenderStop;
    service->interface.Pause = AudioRenderPause;
    service->interface.Resume = AudioRenderResume;
    service->interface.Flush = AudioRenderFlush;
    service->interface.TurnStandbyMode = AudioRenderTurnStandbyMode;
    service->interface.AudioDevDump = AudioRenderAudioDevDump;
    service->interface.IsSupportsPauseAndResume = AudioRenderIsSupportsPauseAndResume;
    service->interface.SetBufferSize = AudioRenderSetBufferSize;
    service->interface.GetVersion = AudioRenderGetVersion;
    return &service->interface;
}

void AudioRenderServiceRelease(struct IAudioRender *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
