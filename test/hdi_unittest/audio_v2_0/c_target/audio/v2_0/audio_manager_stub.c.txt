/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/audio_manager_stub.h"
#include <hdf_base.h>
#include <hdf_dlist.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <osal_mem.h>
#include <securec.h>
#include <stub_collector.h>

#define HDF_LOG_TAG    audio_manager_stub

struct IAudioManager *IAudioManagerGet(bool isStub)
{
    return IAudioManagerGetInstance("audio_manager_service", isStub);
}

struct IAudioManager *IAudioManagerGetInstance(const char *serviceName, bool isStub)
{
    if (!isStub) {
        return NULL;
    }

    const char *instName = serviceName;
    if (strcmp(serviceName, "audio_manager_service") == 0) {
        instName = "service";
    }
    return (struct IAudioManager *)LoadHdiImpl(IAUDIOMANAGER_INTERFACE_DESC, instName);
}

void IAudioManagerRelease(struct IAudioManager *instance, bool isStub)
{
    IAudioManagerReleaseInstance("audio_manager_service", instance, isStub);
}

void IAudioManagerReleaseInstance(const char *serviceName, struct IAudioManager *instance, bool isStub)
{
    if (serviceName == NULL || !isStub || instance == NULL) {
        return;
    }
    const char *instName = serviceName;
    if (strcmp(serviceName, "audio_manager_service") == 0) {
        instName = "service";
    }
    UnloadHdiImpl(IAUDIOMANAGER_INTERFACE_DESC, instName, instance);
}

static bool WriteInterface(struct HdfSBuf *parcel, const char *desc, void *interface);


static bool WriteInterface(struct HdfSBuf *parcel, const char *desc, void *interface)
{
    if (interface == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        return false;
    }

    struct HdfRemoteService **stub = StubCollectorGetOrNewObject(desc, interface);
    if (stub == NULL) {
        HDF_LOGE("%{public}s: failed to get stub of '%{public}s'", __func__, desc);
        return false;
    }

    if (HdfSbufWriteRemoteService(parcel, *stub) != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: failed to write remote service", __func__);
        return false;
    }

    return true;
}
static int32_t SerStubGetAllAdapters(struct IAudioManager *serviceImpl, struct HdfSBuf *audioManagerData, struct HdfSBuf *audioManagerReply)
{
    int32_t audioManagerRet = HDF_FAILURE;
    bool audioManagerMemSet = false;
    struct AudioAdapterDescriptor* descs = NULL;
    uint32_t descsLen = 0;

    if (!HdfSbufReadUint8(audioManagerData, (uint8_t *)&audioManagerMemSet)) {
        HDF_LOGE("%{public}s: read flag of memory setting failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (audioManagerMemSet) {
        if (!HdfSbufReadUint32(audioManagerData, &descsLen)) {
            HDF_LOGE("%{public}s: read descs size failed!", __func__);
            audioManagerRet = HDF_ERR_INVALID_PARAM;
            goto FINISHED;
        }

        HDI_CHECK_VALUE_RET_GOTO(descsLen, >, HDI_BUFF_MAX_SIZE / sizeof(struct AudioAdapterDescriptor), audioManagerRet, HDF_ERR_INVALID_PARAM, FINISHED);
        if (descsLen > 0) {
            descs = (struct AudioAdapterDescriptor*)OsalMemCalloc(sizeof(struct AudioAdapterDescriptor) * (descsLen));
            if (descs == NULL) {
                HDF_LOGE("%{public}s: malloc descs failed", __func__);
                audioManagerRet = HDF_ERR_MALLOC_FAIL;
                goto FINISHED;
            }
        }
    } else {
        descs = (struct AudioAdapterDescriptor*)OsalMemCalloc(HDI_BUFF_MAX_SIZE);
        if (descs == NULL) {
            HDF_LOGE("%{public}s: malloc descs failed", __func__);
            audioManagerRet = HDF_ERR_MALLOC_FAIL;
            goto FINISHED;
        }
        descsLen = (HDI_BUFF_MAX_SIZE / sizeof(struct AudioAdapterDescriptor));
    }


    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioManagerRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->GetAllAdapters == NULL) {
        HDF_LOGE("%{public}s: invalid interface function GetAllAdapters ", __func__);
        audioManagerRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioManagerRet = serviceImpl->GetAllAdapters(serviceImpl, descs, &descsLen);
    if (audioManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioManagerRet);
        goto FINISHED;
    }

    if ((descs == NULL && descsLen != 0) || (descs != NULL && descsLen == 0)) {
        HDF_LOGE("%{public}s: descs is invalid", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteUint32(audioManagerReply, descsLen)) {
        HDF_LOGE("%{public}s: write descs failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    for (uint32_t i = 0; i < descsLen; i++) {
        if (!AudioAdapterDescriptorBlockMarshalling(audioManagerReply, &descs[i])) {
            HDF_LOGE("%{public}s: write &descs[i] failed!", __func__);
            audioManagerRet = HDF_ERR_INVALID_PARAM;
            goto FINISHED;
        }
    }

FINISHED:
    if (descs != NULL) {
        for (uint32_t i = 0; i < descsLen; i++) {
            AudioAdapterDescriptorFree(&descs[i], false);
        }
        OsalMemFree(descs);
    }
    return audioManagerRet;
}

static int32_t SerStubLoadAdapter(struct IAudioManager *serviceImpl, struct HdfSBuf *audioManagerData, struct HdfSBuf *audioManagerReply)
{
    int32_t audioManagerRet = HDF_FAILURE;
    struct AudioAdapterDescriptor* desc = NULL;
    struct IAudioAdapter* adapter = NULL;

    desc = (struct AudioAdapterDescriptor*)OsalMemCalloc(sizeof(struct AudioAdapterDescriptor));
    if (desc == NULL) {
        HDF_LOGE("%{public}s: malloc desc failed", __func__);
        audioManagerRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }
    if (!AudioAdapterDescriptorBlockUnmarshalling(audioManagerData, desc)) {
        HDF_LOGE("%{public}s: read desc failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioManagerRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->LoadAdapter == NULL) {
        HDF_LOGE("%{public}s: invalid interface function LoadAdapter ", __func__);
        audioManagerRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioManagerRet = serviceImpl->LoadAdapter(serviceImpl, desc, &adapter);
    if (audioManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioManagerRet);
        goto FINISHED;
    }

    if (!WriteInterface(audioManagerReply, IAUDIOADAPTER_INTERFACE_DESC, adapter)) {
        HDF_LOGE("%{public}s: write adapter failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (desc != NULL) {
        AudioAdapterDescriptorFree(desc, true);
        desc = NULL;
    }
    return audioManagerRet;
}

static int32_t SerStubUnloadAdapter(struct IAudioManager *serviceImpl, struct HdfSBuf *audioManagerData, struct HdfSBuf *audioManagerReply)
{
    int32_t audioManagerRet = HDF_FAILURE;
    char* adapterName = NULL;

    const char *adapterNameCp = HdfSbufReadString(audioManagerData);
    if (adapterNameCp == NULL) {
        HDF_LOGE("%{public}s: read adapterNameCp failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }
    adapterName = strdup(adapterNameCp);

    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioManagerRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->UnloadAdapter == NULL) {
        HDF_LOGE("%{public}s: invalid interface function UnloadAdapter ", __func__);
        audioManagerRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioManagerRet = serviceImpl->UnloadAdapter(serviceImpl, adapterName);
    if (audioManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioManagerRet);
        goto FINISHED;
    }

FINISHED:
    if (adapterName != NULL) {
        OsalMemFree(adapterName);
        adapterName = NULL;
    }
    return audioManagerRet;
}

static int32_t SerStubReleaseAudioManagerObject(struct IAudioManager *serviceImpl, struct HdfSBuf *audioManagerData, struct HdfSBuf *audioManagerReply)
{
    int32_t audioManagerRet = HDF_FAILURE;
    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioManagerRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->ReleaseAudioManagerObject == NULL) {
        HDF_LOGE("%{public}s: invalid interface function ReleaseAudioManagerObject ", __func__);
        audioManagerRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioManagerRet = serviceImpl->ReleaseAudioManagerObject(serviceImpl);
    if (audioManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioManagerRet);
        goto FINISHED;
    }

FINISHED:
    return audioManagerRet;
}

static int32_t SerStubGetVersion(struct IAudioManager *serviceImpl, struct HdfSBuf *audioManagerData, struct HdfSBuf *audioManagerReply)
{
    int32_t audioManagerRet = HDF_SUCCESS;
    if (!HdfSbufWriteUint32(audioManagerReply, IAUDIO_MANAGER_MAJOR_VERSION)) {
        HDF_LOGE("%{public}s: write IAUDIO_MANAGER_MAJOR_VERSION failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteUint32(audioManagerReply, IAUDIO_MANAGER_MINOR_VERSION)) {
        HDF_LOGE("%{public}s: write IAUDIO_MANAGER_MINOR_VERSION failed!", __func__);
        audioManagerRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    return audioManagerRet;
}

static struct HdfRemoteService *AudioManagerStubAsObject(struct IAudioManager *self)
{
    return NULL;
}

static int32_t AudioManagerOnRemoteRequest(struct HdfRemoteService *remote, int code, struct HdfSBuf *data, struct HdfSBuf *reply)
{
    struct AudioManagerStub *stub = (struct AudioManagerStub*)remote;
    if (stub == NULL || stub->remote == NULL || stub->interface == NULL) {
        HDF_LOGE("%{public}s: invalid stub object", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }
    if (!HdfRemoteServiceCheckInterfaceToken(stub->remote, data)) {
        HDF_LOGE("%{public}s: interface token check failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    switch (code) {
        case CMD_AUDIO_MANAGER_GET_ALL_ADAPTERS:
            return SerStubGetAllAdapters(stub->interface, data, reply);
        case CMD_AUDIO_MANAGER_LOAD_ADAPTER:
            return SerStubLoadAdapter(stub->interface, data, reply);
        case CMD_AUDIO_MANAGER_UNLOAD_ADAPTER:
            return SerStubUnloadAdapter(stub->interface, data, reply);
        case CMD_AUDIO_MANAGER_RELEASE_AUDIO_MANAGER_OBJECT:
            return SerStubReleaseAudioManagerObject(stub->interface, data, reply);
        case CMD_AUDIO_MANAGER_GET_VERSION:
            return SerStubGetVersion(stub->interface, data, reply);
        default: {
            HDF_LOGE("%{public}s: not support cmd %{public}d", __func__, code);
            return HDF_ERR_INVALID_PARAM;
        }
    }
}

static struct HdfRemoteDispatcher g_audiomanagerDispatcher = {
    .Dispatch = AudioManagerOnRemoteRequest,
    .DispatchAsync = NULL,
};

static struct HdfRemoteService **AudioManagerStubNewInstance(void *impl)
{
    if (impl == NULL) {
        HDF_LOGE("%{public}s: impl is null", __func__);
        return NULL;
    }

    struct IAudioManager *serviceImpl = (struct IAudioManager *)impl;
    struct AudioManagerStub *stub = OsalMemCalloc(sizeof(struct AudioManagerStub));
    if (stub == NULL) {
        HDF_LOGE("%{public}s: failed to malloc stub object", __func__);
        return NULL;
    }
    stub->remote = HdfRemoteServiceObtain((struct HdfObject *)stub, &g_audiomanagerDispatcher);
    if (stub->remote == NULL) {
        OsalMemFree(stub);
        return NULL;
    }
    (void)HdfRemoteServiceSetInterfaceDesc(stub->remote, IAUDIOMANAGER_INTERFACE_DESC);
    stub->dispatcher.Dispatch = AudioManagerOnRemoteRequest;
    stub->interface = serviceImpl;
    stub->interface->AsObject = AudioManagerStubAsObject;
    return &stub->remote;
}

static void AudioManagerStubRelease(struct HdfRemoteService **remote)
{
    if (remote == NULL) {
        return;
    }
    struct AudioManagerStub *stub = CONTAINER_OF(remote, struct AudioManagerStub, remote);
    HdfRemoteServiceRecycle(stub->remote);
    OsalMemFree(stub);
}

__attribute__((unused)) static struct StubConstructor g_audiomanagerConstructor = {
    .constructor = AudioManagerStubNewInstance,
    .destructor = AudioManagerStubRelease,
};

__attribute__((constructor)) static void AudioManagerStubRegister(void)
{
    HDF_LOGI("%{public}s: register stub constructor of '%{public}s'", __func__, IAUDIOMANAGER_INTERFACE_DESC);
    StubConstructorRegister(IAUDIOMANAGER_INTERFACE_DESC, &g_audiomanagerConstructor);
}
