/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/foo_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "foo/v1_0/foo_callback_proxy.h"

#define HDF_LOG_TAG    foo_stub

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {
static bool WriteFileDescriptor(MessageParcel &data, int fd);
static bool ReadFileDescriptor(MessageParcel &data, int &fd);


static bool WriteFileDescriptor(MessageParcel &data, int fd)
{
    if (!data.WriteBool(fd >= 0 ? true : false)) {
        HDF_LOGE("%{public}s: failed to write fd vailed", __func__);
        return false;
    }
    if (fd < 0) {
        return true;
    }
    if (!data.WriteFileDescriptor(fd)) {
        HDF_LOGE("%{public}s: failed to write fd", __func__);
        return false;
    }
    return true;
}

static bool ReadFileDescriptor(MessageParcel &data, int &fd)
{
    fd = -1;
    bool fdValid = false;
    if (!data.ReadBool(fdValid)) {
        HDF_LOGE("%{public}s: failed to read fdValid", __func__);
        return false;
    }

    if (fdValid) {
        fd = data.ReadFileDescriptor();
        if (fd < 0) {
            HDF_LOGE("%{public}s: failed to read fd", __func__);
            return false;
        }
    }
    return true;
}

sptr<OHOS::HDI::Foo::V1_0::IFoo> OHOS::HDI::Foo::V1_0::IFoo::Get(bool isStub)
{
    return OHOS::HDI::Foo::V1_0::IFoo::Get("foo_service", isStub);
}

sptr<OHOS::HDI::Foo::V1_0::IFoo> OHOS::HDI::Foo::V1_0::IFoo::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "foo_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Foo::V1_0::IFoo *>(impl);
}


OHOS::HDI::Foo::V1_0::FooStub::FooStub(const sptr<OHOS::HDI::Foo::V1_0::IFoo> &impl)
    : IPCObjectStub(OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Foo::V1_0::FooStub::~FooStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_FOO_GET_VERSION:
            return FooStubGetVersion(data, reply, option);
        case CMD_FOO_PING:
            return FooStubPing(data, reply, option);
        case CMD_FOO_GET_DATA:
            return FooStubGetData(data, reply, option);
        case CMD_FOO_SET_CALLBACK:
            return FooStubSetCallback(data, reply, option);
        case CMD_FOO_TEST_FUNC1:
            return FooStubTestFunc1(data, reply, option);
        case CMD_FOO_TEST_FUNC2:
            return FooStubTestFunc2(data, reply, option);
        case CMD_FOO_TEST_FUNC3:
            return FooStubTestFunc3(data, reply, option);
        case CMD_FOO_TEST_FUNC4:
            return FooStubTestFunc4(data, reply, option);
        case CMD_FOO_TEST_FUNC5:
            return FooStubTestFunc5(data, reply, option);
        case CMD_FOO_TEST_FUNC6:
            return FooStubTestFunc6(data, reply, option);
        case CMD_FOO_TEST_FUNC7:
            return FooStubTestFunc7(data, reply, option);
        case CMD_FOO_TEST_FUNC8:
            return FooStubTestFunc8(data, reply, option);
        case CMD_FOO_TEST_FUNC9:
            return FooStubTestFunc9(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubPing(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubPing_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubGetData(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubGetData_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubSetCallback(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubSetCallback_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc1(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc1_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc2(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc2_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc3(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc3_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc4(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc4_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc5(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc5_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc6(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc6_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc7(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc7_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc8(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc8_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc9(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc9_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubGetVersion(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption)
{
    return OHOS::HDI::Foo::V1_0::FooStub::FooStubGetVersion_(fooData, fooReply, fooOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubPing_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool fooMemSet = false;
    if (!fooData.ReadBool(fooMemSet)) {
        HDF_LOGE("%{public}s: failed to read fooMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    const char* sendMsgCp = fooData.ReadCString();
    if (sendMsgCp == nullptr) {
        HDF_LOGE("%{public}s: read sendMsg failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string sendMsg = sendMsgCp;

    std::string recvMsg;
    if (fooMemSet) {
        uint32_t capacity = 0;
        if (!fooData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(char), HDF_ERR_INVALID_PARAM);
        recvMsg.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->Ping(sendMsg, recvMsg);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteCString(recvMsg.c_str())) {
        HDF_LOGE("%{public}s: write recvMsg failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubGetData_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Foo::V1_0::FooInfo info;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->GetData(info);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!OHOS::HDI::Foo::V1_0::FooInfoBlockMarshalling(fooReply, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubSetCallback_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Foo::V1_0::IFooCallback> cbObj;
    sptr<IRemoteObject> cbObjRemote = fooData.ReadRemoteObject();
    if (cbObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    cbObj = new OHOS::HDI::Foo::V1_0::FooCallbackProxy(cbObjRemote);
    if (cbObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->SetCallback(cbObj);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc1_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool inData = false;
    if (!fooData.ReadBool(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool outData = false;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc1(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteBool(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc2_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int8_t inData = 0;
    if (!fooData.ReadInt8(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc2(inData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc3_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int16_t inData = 0;
    if (!fooData.ReadInt16(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int16_t outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc3(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteInt16(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc4_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t inData = 0;
    if (!fooData.ReadInt32(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc4(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteInt32(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc5_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int64_t inData = 0;
    if (!fooData.ReadInt64(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int64_t outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc5(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteInt64(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc6_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* inDataCp = fooData.ReadCString();
    if (inDataCp == nullptr) {
        HDF_LOGE("%{public}s: read inData failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string inData = inDataCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc6(inData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc7_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    float inData = 0;
    if (!fooData.ReadFloat(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    float outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc7(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteFloat(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc8_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    double inData = 0;
    if (!fooData.ReadDouble(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    double outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc8(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteDouble(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubTestFunc9_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int inData = -1;
    if (!ReadFileDescriptor(fooData, inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int outData = -1;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->TestFunc9(inData, outData);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!WriteFileDescriptor(fooReply, outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooStub::FooStubGetVersion_(MessageParcel& fooData, MessageParcel& fooReply, MessageOption& fooOption, sptr<OHOS::HDI::Foo::V1_0::IFoo> impl)
{
    if (fooData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFoo::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooRet = impl->GetVersion(majorVer, minorVer);
    if (fooRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooRet);
        return fooRet;
    }

    if (!fooReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooRet;
}
} // V1_0
} // Foo
} // HDI
} // OHOS
