/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/foo_ext_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    foo_ext_proxy

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {


sptr<OHOS::HDI::Foo::V1_0::IFooExt> OHOS::HDI::Foo::V1_0::IFooExt::Get(bool isStub)
{
    return IFooExt::Get("foo_ext_service", isStub);
}

sptr<OHOS::HDI::Foo::V1_0::IFooExt> OHOS::HDI::Foo::V1_0::IFooExt::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "foo_ext_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Foo::V1_0::IFooExt *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Foo::V1_0::FooExtProxy> proxy = new OHOS::HDI::Foo::V1_0::FooExtProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Foo::V1_0::FooExtProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t fooExtRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::Reconnect(
    sptr<OHOS::HDI::Foo::V1_0::FooExtProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Foo::V1_0::FooExtProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc11(const sptr<NativeBuffer>& inData, sptr<NativeBuffer>& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc11_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc13(const std::map<std::string, std::string>& inData,
     std::map<std::string, std::string>& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc13_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc15(uint8_t inData, uint8_t outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc15_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc16(uint32_t inData, uint8_t outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc16_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc17(uint16_t inData, uint32_t& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc17_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc18(uint64_t inData, uint64_t& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc18_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc19(const OHOS::HDI::Foo::V1_0::FooInfo& inData,
     OHOS::HDI::Foo::V1_0::AudioPortPin& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc19_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc20(const OHOS::HDI::Foo::V1_0::AudioSceneDescriptor& inData,
     OHOS::HDI::Foo::V1_0::SceneDesc& outData)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc20_(inData, outData, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Foo::V1_0::FooExtProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc11_(const sptr<NativeBuffer>& inData, sptr<NativeBuffer>& outData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteStrongParcelable(inData)) {
        HDF_LOGE("%{public}s: failed to write inData", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC11, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    outData = fooExtReply.ReadStrongParcelable<NativeBuffer>();

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc13_(const std::map<std::string, std::string>& inData,
     std::map<std::string, std::string>& outData, const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint32(inData.size())) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (auto it0 : inData) {
        if (!fooExtData.WriteCString((it0.first).c_str())) {
            HDF_LOGE("%{public}s: write (it0.first) failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        if (!fooExtData.WriteCString((it0.second).c_str())) {
            HDF_LOGE("%{public}s: write (it0.second) failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC13, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    uint32_t outDataSize = 0;
    if (!fooExtReply.ReadUint32(outDataSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    for (uint32_t i = 0; i < outDataSize; ++i) {
        const char* key0Cp = fooExtReply.ReadCString();
        if (key0Cp == nullptr) {
            HDF_LOGE("%{public}s: read key0 failed", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        std::string key0 = key0Cp;
        const char* value0Cp = fooExtReply.ReadCString();
        if (value0Cp == nullptr) {
            HDF_LOGE("%{public}s: read value0 failed", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        std::string value0 = value0Cp;
        outData[key0] = value0;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc15_(uint8_t inData, uint8_t outData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_ASYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint8(inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint8(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC15, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }
    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc16_(uint32_t inData, uint8_t outData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_ASYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint32(inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint8(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC16, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }
    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc17_(uint16_t inData, uint32_t& outData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint16(inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC17, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.ReadUint32(outData)) {
        HDF_LOGE("%{public}s: read outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc18_(uint64_t inData, uint64_t& outData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtData.WriteUint64(inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC18, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.ReadUint64(outData)) {
        HDF_LOGE("%{public}s: read outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc19_(const OHOS::HDI::Foo::V1_0::FooInfo& inData,
     OHOS::HDI::Foo::V1_0::AudioPortPin& outData, const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Foo::V1_0::FooInfoBlockMarshalling(fooExtData, inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC19, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!fooExtReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write outData failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        outData = static_cast<enum AudioPortPin>(enumTmp);
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::TestFunc20_(const OHOS::HDI::Foo::V1_0::AudioSceneDescriptor& inData,
     OHOS::HDI::Foo::V1_0::SceneDesc& outData, const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Foo::V1_0::AudioSceneDescriptorBlockMarshalling(fooExtData, inData)) {
        HDF_LOGE("%{public}s: write inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_TEST_FUNC20, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    const OHOS::HDI::Foo::V1_0::SceneDesc *outDataCp = reinterpret_cast<const OHOS::HDI::Foo::V1_0::SceneDesc *>(fooExtReply.ReadUnpadBuffer(sizeof(OHOS::HDI::Foo::V1_0::SceneDesc)));
    if (outDataCp == nullptr) {
        HDF_LOGE("%{public}s: read outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (memcpy_s(&outData, sizeof(OHOS::HDI::Foo::V1_0::SceneDesc), outDataCp, sizeof(OHOS::HDI::Foo::V1_0::SceneDesc)) != EOK) {
        HDF_LOGE("%{public}s: failed to memcpy outData", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel fooExtData;
    MessageParcel fooExtReply;
    MessageOption fooExtOption(MessageOption::TF_SYNC);

    if (!fooExtData.WriteInterfaceToken(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t fooExtRet = remote->SendRequest(CMD_FOO_EXT_GET_VERSION, fooExtData, fooExtReply, fooExtOption);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

} // V1_0
} // Foo
} // HDI
} // OHOS
