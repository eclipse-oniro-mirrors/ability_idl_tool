/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/foo_ext_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    foo_ext_stub

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {


sptr<OHOS::HDI::Foo::V1_0::IFooExt> OHOS::HDI::Foo::V1_0::IFooExt::Get(bool isStub)
{
    return OHOS::HDI::Foo::V1_0::IFooExt::Get("foo_ext_service", isStub);
}

sptr<OHOS::HDI::Foo::V1_0::IFooExt> OHOS::HDI::Foo::V1_0::IFooExt::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "foo_ext_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Foo::V1_0::IFooExt *>(impl);
}


OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStub(const sptr<OHOS::HDI::Foo::V1_0::IFooExt> &impl)
    : IPCObjectStub(OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Foo::V1_0::FooExtStub::~FooExtStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_FOO_EXT_GET_VERSION:
            return FooExtStubGetVersion(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC11:
            return FooExtStubTestFunc11(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC13:
            return FooExtStubTestFunc13(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC15:
            return FooExtStubTestFunc15(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC16:
            return FooExtStubTestFunc16(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC17:
            return FooExtStubTestFunc17(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC18:
            return FooExtStubTestFunc18(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC19:
            return FooExtStubTestFunc19(data, reply, option);
        case CMD_FOO_EXT_TEST_FUNC20:
            return FooExtStubTestFunc20(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc11(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc11_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc13(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc13_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc15(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc15_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc16(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc16_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc17(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc17_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc18(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc18_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc19(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc19_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc20(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc20_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubGetVersion(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption)
{
    return OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubGetVersion_(fooExtData, fooExtReply, fooExtOption, impl_);
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc11_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> inData = fooExtData.ReadStrongParcelable<NativeBuffer>();

    sptr<NativeBuffer> outData;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc11(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteStrongParcelable(outData)) {
        HDF_LOGE("%{public}s: failed to write outData", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc13_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::map<std::string, std::string> inData;
    uint32_t inDataSize = 0;
    if (!fooExtData.ReadUint32(inDataSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    for (uint32_t i = 0; i < inDataSize; ++i) {
        const char* key0Cp = fooExtData.ReadCString();
        if (key0Cp == nullptr) {
            HDF_LOGE("%{public}s: read key0 failed", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        std::string key0 = key0Cp;
        const char* value0Cp = fooExtData.ReadCString();
        if (value0Cp == nullptr) {
            HDF_LOGE("%{public}s: read value0 failed", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        std::string value0 = value0Cp;
        inData[key0] = value0;
    }

    std::map<std::string, std::string> outData;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc13(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUint32(outData.size())) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (auto it0 : outData) {
        if (!fooExtReply.WriteCString((it0.first).c_str())) {
            HDF_LOGE("%{public}s: write (it0.first) failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        if (!fooExtReply.WriteCString((it0.second).c_str())) {
            HDF_LOGE("%{public}s: write (it0.second) failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc15_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint8_t inData = 0;
    if (!fooExtData.ReadUint8(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint8_t outData = 0;
    if (!fooExtData.ReadUint8(outData)) {
        HDF_LOGE("%{public}s: read outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc15(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc16_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t inData = 0;
    if (!fooExtData.ReadUint32(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint8_t outData = 0;
    if (!fooExtData.ReadUint8(outData)) {
        HDF_LOGE("%{public}s: read outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc16(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc17_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint16_t inData = 0;
    if (!fooExtData.ReadUint16(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc17(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUint32(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc18_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint64_t inData = 0;
    if (!fooExtData.ReadUint64(inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint64_t outData = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc18(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUint64(outData)) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc19_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Foo::V1_0::FooInfo inData;
    if (!FooInfoBlockUnmarshalling(fooExtData, inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Foo::V1_0::AudioPortPin outData;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc19(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUint64(static_cast<uint64_t>(outData))) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubTestFunc20_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Foo::V1_0::AudioSceneDescriptor inData;
    if (!AudioSceneDescriptorBlockUnmarshalling(fooExtData, inData)) {
        HDF_LOGE("%{public}s: read inData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Foo::V1_0::SceneDesc outData;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->TestFunc20(inData, outData);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUnpadBuffer((const uint8_t *)&outData, sizeof(OHOS::HDI::Foo::V1_0::SceneDesc))) {
        HDF_LOGE("%{public}s: write outData failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}

int32_t OHOS::HDI::Foo::V1_0::FooExtStub::FooExtStubGetVersion_(MessageParcel& fooExtData, MessageParcel& fooExtReply, MessageOption& fooExtOption, sptr<OHOS::HDI::Foo::V1_0::IFooExt> impl)
{
    if (fooExtData.ReadInterfaceToken() != OHOS::HDI::Foo::V1_0::IFooExt::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fooExtRet = impl->GetVersion(majorVer, minorVer);
    if (fooExtRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, fooExtRet);
        return fooExtRet;
    }

    if (!fooExtReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!fooExtReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return fooExtRet;
}
} // V1_0
} // Foo
} // HDI
} // OHOS
