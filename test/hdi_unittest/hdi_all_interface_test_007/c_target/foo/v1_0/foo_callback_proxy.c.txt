/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_dlist.h>
#include <hdf_core_log.h>
#include <hdf_sbuf.h>
#include <osal_mem.h>
#include <securec.h>
#include <servmgr_hdi.h>
#include "v1_0/ifoo_callback.h"

#define HDF_LOG_TAG    foo_callback_proxy

struct FooCallbackProxy {
    struct IFooCallback impl;
    struct HdfRemoteService *remote;
};



static int32_t FooCallbackProxyCall(struct IFooCallback *self, int32_t id, struct HdfSBuf *data,
    struct HdfSBuf *reply, bool isOneWay)
{
    struct HdfRemoteService *remote = self->AsObject(self);
    if (remote == NULL ||
        remote->dispatcher == NULL ||
        remote->dispatcher->Dispatch == NULL ||
        remote->dispatcher->DispatchAsync == NULL) {
        HDF_LOGE("%{public}s: Invalid HdfRemoteService obj", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }
    if (isOneWay) {
        return remote->dispatcher->DispatchAsync(remote, id, data, reply);
    } else {
        return remote->dispatcher->Dispatch(remote, id, data, reply);
    }
}

static int32_t FooCallbackProxyPushData(struct IFooCallback *self, const char* message)
{
    int32_t fooCallbackRet = HDF_FAILURE;

    struct HdfSBuf *fooCallbackData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *fooCallbackReply = HdfSbufTypedObtain(SBUF_IPC);

    if (fooCallbackData == NULL || fooCallbackReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        fooCallbackRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        fooCallbackRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), fooCallbackData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        fooCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteString(fooCallbackData, message)) {
        HDF_LOGE("%{public}s: write message failed!", __func__);
        fooCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    fooCallbackRet = FooCallbackProxyCall(self, CMD_FOO_CALLBACK_PUSH_DATA, fooCallbackData, fooCallbackReply, false);
    if (fooCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, fooCallbackRet);
        goto FINISHED;
    }

FINISHED:
    if (fooCallbackData != NULL) {
        HdfSbufRecycle(fooCallbackData);
    }
    if (fooCallbackReply != NULL) {
        HdfSbufRecycle(fooCallbackReply);
    }
    return fooCallbackRet;
}

static int32_t FooCallbackProxyGetVersion(struct IFooCallback *self, uint32_t* majorVer, uint32_t* minorVer)
{
    int32_t fooCallbackRet = HDF_FAILURE;

    struct HdfSBuf *fooCallbackData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *fooCallbackReply = HdfSbufTypedObtain(SBUF_IPC);

    if (fooCallbackData == NULL || fooCallbackReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        fooCallbackRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        fooCallbackRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), fooCallbackData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        fooCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    fooCallbackRet = FooCallbackProxyCall(self, CMD_FOO_CALLBACK_GET_VERSION, fooCallbackData, fooCallbackReply, false);
    if (fooCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, fooCallbackRet);
        goto FINISHED;
    }

    if (!HdfSbufReadUint32(fooCallbackReply, majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        fooCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufReadUint32(fooCallbackReply, minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        fooCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (fooCallbackData != NULL) {
        HdfSbufRecycle(fooCallbackData);
    }
    if (fooCallbackReply != NULL) {
        HdfSbufRecycle(fooCallbackReply);
    }
    return fooCallbackRet;
}

static struct HdfRemoteService *FooCallbackProxyAsObject(struct IFooCallback *self)
{
    if (self == NULL) {
        return NULL;
    }
    struct FooCallbackProxy *proxy = CONTAINER_OF(self, struct FooCallbackProxy, impl);
    return proxy->remote;
}

static void FooCallbackProxyConstruct(struct IFooCallback *impl)
{
    impl->PushData = FooCallbackProxyPushData;
    impl->GetVersion = FooCallbackProxyGetVersion;
    impl->AsObject = FooCallbackProxyAsObject;
}

struct IFooCallback *IFooCallbackGet(struct HdfRemoteService *remote)
{
    if (remote == NULL) {
        HDF_LOGE("%{public}s: remote is null", __func__);
        return NULL;
    }

    if (!HdfRemoteServiceSetInterfaceDesc(remote, IFOOCALLBACK_INTERFACE_DESC)) {
        HDF_LOGE("%{public}s: set interface token failed!", __func__);
        HdfRemoteServiceRecycle(remote);
        return NULL;
    }

    struct FooCallbackProxy *proxy = (struct FooCallbackProxy *)OsalMemCalloc(sizeof(struct FooCallbackProxy));
    if (proxy == NULL) {
        HDF_LOGE("%{public}s: malloc IFooCallback proxy failed!", __func__);
        return NULL;
    }

    proxy->remote = remote;
    FooCallbackProxyConstruct(&proxy->impl);
    struct IFooCallback *client = &proxy->impl;

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t fooCallbackRet = client->GetVersion(client, &serMajorVer, &serMinorVer);
    if (fooCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: get version failed!", __func__);
        IFooCallbackRelease(client);
        return NULL;
    }

    if (serMajorVer != IFOO_CALLBACK_MAJOR_VERSION) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:%u.%u", __func__,
            serMajorVer, serMinorVer, IFOO_CALLBACK_MAJOR_VERSION, IFOO_CALLBACK_MINOR_VERSION);
        IFooCallbackRelease(client);
        return NULL;
    }

    return client;
}

void IFooCallbackRelease(struct IFooCallback *instance)
{
    if (instance == NULL) {
        return;
    }

    struct FooCallbackProxy *proxy = CONTAINER_OF(instance, struct FooCallbackProxy, impl);
    HdfRemoteServiceRecycle(proxy->remote);
    OsalMemFree(proxy);
}
