/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_core_log.h>
#include <osal_mem.h>
#include <securec.h>
#include "v1_0/ifoo.h"

#define HDF_LOG_TAG    foo_service

struct FooService {
    struct IFoo interface;
};

static int32_t FooPing(struct IFoo *self, const char* sendMsg, char* recvMsg, uint32_t recvMsgLen)
{
    return HDF_SUCCESS;
}

static int32_t FooGetData(struct IFoo *self, struct FooInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t FooSetCallback(struct IFoo *self, struct IFooCallback* cbObj)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc1(struct IFoo *self, bool inData, bool* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc2(struct IFoo *self, int8_t inData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc3(struct IFoo *self, int16_t inData, int16_t* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc4(struct IFoo *self, int32_t inData, int32_t* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc5(struct IFoo *self, int64_t inData, int64_t* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc6(struct IFoo *self, const char* inData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc7(struct IFoo *self, float inData, float* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc8(struct IFoo *self, double inData, double* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooTestFunc9(struct IFoo *self, int inData, int* outData)
{
    return HDF_SUCCESS;
}

static int32_t FooGetVersion(struct IFoo *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IFOO_MAJOR_VERSION;
    *minorVer = IFOO_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IFoo *FooImplGetInstance(void)
{
    struct FooService *service = (struct FooService *)OsalMemCalloc(sizeof(struct FooService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc FooService obj failed!", __func__);
        return NULL;
    }

    service->interface.Ping = FooPing;
    service->interface.GetData = FooGetData;
    service->interface.SetCallback = FooSetCallback;
    service->interface.TestFunc1 = FooTestFunc1;
    service->interface.TestFunc2 = FooTestFunc2;
    service->interface.TestFunc3 = FooTestFunc3;
    service->interface.TestFunc4 = FooTestFunc4;
    service->interface.TestFunc5 = FooTestFunc5;
    service->interface.TestFunc6 = FooTestFunc6;
    service->interface.TestFunc7 = FooTestFunc7;
    service->interface.TestFunc8 = FooTestFunc8;
    service->interface.TestFunc9 = FooTestFunc9;
    service->interface.GetVersion = FooGetVersion;
    return &service->interface;
}

void FooImplRelease(struct IFoo *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
