/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_VIBRATOR_V1_1_VIBRATORTYPES_H
#define OHOS_HDI_VIBRATOR_V1_1_VIBRATORTYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Vibrator {
namespace V1_1 {

using namespace OHOS;

enum HdfVibratorMode : int32_t {
    HDF_VIBRATOR_MODE_ONCE,
    HDF_VIBRATOR_MODE_PRESET,
    HDF_VIBRATOR_MODE_BUTT,
};

enum HdfEffectType : int32_t {
    HDF_EFFECT_TYPE_TIME,
    HDF_EFFECT_TYPE_PRIMITIVE,
    HDF_EFFECT_TYPE_BUTT,
};

struct HdfVibratorInfo {
    bool isSupportIntensity;
    bool isSupportFrequency;
    uint16_t intensityMaxValue;
    uint16_t intensityMinValue;
    int16_t frequencyMaxValue;
    int16_t frequencyMinValue;
} __attribute__ ((aligned(8)));

struct TimeEffect {
    int32_t delay;
    int32_t time;
    uint16_t intensity;
    int16_t frequency;
} __attribute__ ((aligned(8)));

struct PrimitiveEffect {
    int32_t delay;
    int32_t effectId;
    uint16_t intensity;
} __attribute__ ((aligned(8)));

union CompositeEffect {
    OHOS::HDI::Vibrator::V1_1::TimeEffect timeEffect;
    OHOS::HDI::Vibrator::V1_1::PrimitiveEffect primitiveEffect;
}  __attribute__ ((aligned(8)));

struct HdfCompositeEffect {
    int32_t type;
    std::vector<OHOS::HDI::Vibrator::V1_1::CompositeEffect> compositeEffects;
};

struct HdfEffectInfo {
    int32_t duration;
    bool isSupportEffect;
} __attribute__ ((aligned(8)));

bool HdfVibratorInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_1::HdfVibratorInfo& dataBlock);

bool HdfVibratorInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_1::HdfVibratorInfo& dataBlock);

bool TimeEffectBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_1::TimeEffect& dataBlock);

bool TimeEffectBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_1::TimeEffect& dataBlock);

bool PrimitiveEffectBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_1::PrimitiveEffect& dataBlock);

bool PrimitiveEffectBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_1::PrimitiveEffect& dataBlock);

bool HdfCompositeEffectBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_1::HdfCompositeEffect& dataBlock);

bool HdfCompositeEffectBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_1::HdfCompositeEffect& dataBlock);

bool HdfEffectInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Vibrator::V1_1::HdfEffectInfo& dataBlock);

bool HdfEffectInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Vibrator::V1_1::HdfEffectInfo& dataBlock);

} // V1_1
} // Vibrator
} // HDI
} // OHOS

#endif // OHOS_HDI_VIBRATOR_V1_1_VIBRATORTYPES_H

