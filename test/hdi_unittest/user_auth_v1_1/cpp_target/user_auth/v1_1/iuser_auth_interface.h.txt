/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USER_AUTH_V1_1_IUSERAUTHINTERFACE_H
#define OHOS_HDI_USER_AUTH_V1_1_IUSERAUTHINTERFACE_H

#include <stdint.h>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "user_auth/v1_0/iuser_auth_interface.h"
#include "user_auth/v1_0/user_auth_types.h"
#include "user_auth/v1_1/user_auth_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace UserAuth {
namespace V1_1 {
using namespace OHOS;
using namespace OHOS::HDI;
using namespace OHOS::HDI::UserAuth::V1_0;

enum {
    CMD_USER_AUTH_INTERFACE_BEGIN_ENROLLMENT_V1_1 = 22,
    CMD_USER_AUTH_INTERFACE_BEGIN_AUTHENTICATION_V1_1 = 23,
    CMD_USER_AUTH_INTERFACE_BEGIN_IDENTIFICATION_V1_1 = 24,
    CMD_USER_AUTH_INTERFACE_GET_ALL_USER_INFO = 25,
};

class IUserAuthInterface : public OHOS::HDI::UserAuth::V1_0::IUserAuthInterface {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.user_auth.v1_1.IUserAuthInterface");

    virtual ~IUserAuthInterface() = default;

    static sptr<OHOS::HDI::UserAuth::V1_1::IUserAuthInterface> Get(bool isStub = false);
    static sptr<OHOS::HDI::UserAuth::V1_1::IUserAuthInterface> Get(const std::string &serviceName, bool isStub = false);

    static sptr<OHOS::HDI::UserAuth::V1_1::IUserAuthInterface> CastFrom(const sptr<OHOS::HDI::UserAuth::V1_0::IUserAuthInterface> &parent);

    virtual int32_t BeginEnrollmentV1_1(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_0::EnrollParam& param, OHOS::HDI::UserAuth::V1_1::ScheduleInfoV1_1& info) = 0;

    virtual int32_t BeginAuthenticationV1_1(uint64_t contextId, const OHOS::HDI::UserAuth::V1_0::AuthSolution& param,
         std::vector<OHOS::HDI::UserAuth::V1_1::ScheduleInfoV1_1>& scheduleInfos) = 0;

    virtual int32_t BeginIdentificationV1_1(uint64_t contextId, OHOS::HDI::UserAuth::V1_0::AuthType authType,
         const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_1::ScheduleInfoV1_1& scheduleInfo) = 0;

    virtual int32_t GetAllUserInfo(std::vector<OHOS::HDI::UserAuth::V1_1::UserInfo>& userInfos) = 0;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override
    {
        majorVer = 1;
        minorVer = 1;
        return HDF_SUCCESS;
    }

    const std::u16string GetDesc() override
    {
        return metaDescriptor_;
    }
};
} // V1_1
} // UserAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_USER_AUTH_V1_1_IUSERAUTHINTERFACE_H

