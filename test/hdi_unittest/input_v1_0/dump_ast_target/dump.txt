AST[name: IInputInterfaces file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/input_v1_0/foo/input/v1_0/IInputInterfaces.idl]
package ohos.hdi.input.v1_0;

import ohos.hdi.input.v1_0.InputTypes;
import ohos.hdi.input.v1_0.IInputCallback;

[mini, lite, full] interface IInputInterfaces {
    [mini, lite, full] ScanInputDevice(
      [out] ohos.hdi.input.v1_0.DevDesc[] staArr);

    [mini, lite, full] OpenInputDevice(
      [in] unsigned int devIndex);

    [mini, lite, full] CloseInputDevice(
      [in] unsigned int devIndex);

    [mini, lite, full] GetInputDevice(
      [in] unsigned int devIndex,
      [out] ohos.hdi.input.v1_0.DeviceInfo devInfo);

    [mini, lite, full] GetInputDeviceList(
      [out] unsigned int devNum,
      [out] ohos.hdi.input.v1_0.DeviceInfo[] devList,
      [in] unsigned int size);

    [mini, lite, full] SetPowerStatus(
      [in] unsigned int devIndex,
      [in] unsigned int status);

    [mini, lite, full] GetPowerStatus(
      [in] unsigned int devIndex,
      [out] unsigned int status);

    [mini, lite, full] GetDeviceType(
      [in] unsigned int devIndex,
      [out] unsigned int deviceType);

    [mini, lite, full] GetChipInfo(
      [in] unsigned int devIndex,
      [out] std::string chipInfo);

    [mini, lite, full] GetVendorName(
      [in] unsigned int devIndex,
      [out] std::string vendorName);

    [mini, lite, full] GetChipName(
      [in] unsigned int devIndex,
      [out] std::string chipName);

    [mini, lite, full] SetGestureMode(
      [in] unsigned int devIndex,
      [in] unsigned int gestureMode);

    [mini, lite, full] RunCapacitanceTest(
      [in] unsigned int devIndex,
      [in] unsigned int testType,
      [out] std::string result,
      [in] unsigned int length);

    [mini, lite, full] RunExtraCommand(
      [in] unsigned int devIndex,
      [in] ohos.hdi.input.v1_0.ExtraCmd cmd);

    [mini, lite, full] RegisterReportCallback(
      [in] unsigned int devIndex,
      [in] ohos.hdi.input.v1_0.IInputCallback eventPkgCallback);

    [mini, lite, full] UnregisterReportCallback(
      [in] unsigned int devIndex);

    [mini, lite, full] RegisterHotPlugCallback(
      [in] ohos.hdi.input.v1_0.IInputCallback hotPlugCallback);

    [mini, lite, full] UnregisterHotPlugCallback();
}


AST[name: IInputCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/input_v1_0/foo/input/v1_0/IInputCallback.idl]
package ohos.hdi.input.v1_0;

import ohos.hdi.input.v1_0.InputTypes;

[mini, lite, full, callback] interface IInputCallback {
    [mini, lite, full, callback] EventPkgCallback(
      [in] ohos.hdi.input.v1_0.EventPackage[] pkgs,
      [in] unsigned int devIndex);

    [mini, lite, full, callback] HotPlugCallback(
      [in] ohos.hdi.input.v1_0.HotPlugEvent event);
}


AST[name: InputTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/input_v1_0/foo/input/v1_0/InputTypes.idl]
package ohos.hdi.input.v1_0;

[mini, lite, full] struct DevDesc {
  unsigned int devIndex;
  unsigned int devType;
};

[mini, lite, full] struct DevIdentify {
  unsigned short busType;
  unsigned short vendor;
  unsigned short product;
  unsigned short version;
};

[mini, lite, full] struct DimensionInfo {
  int axis;
  int min;
  int max;
  int fuzz;
  int flat;
  int range;
};

[mini, lite, full] struct DevAttr {
  std::string devName;
  ohos.hdi.input.v1_0.DevIdentify id;
  ohos.hdi.input.v1_0.DimensionInfo[] axisInfo;
};

[mini, lite, full] struct DevAbility {
  unsigned long[] devProp;
  unsigned long[] eventType;
  unsigned long[] absCode;
  unsigned long[] relCode;
  unsigned long[] keyCode;
  unsigned long[] ledCode;
  unsigned long[] miscCode;
  unsigned long[] soundCode;
  unsigned long[] forceCode;
  unsigned long[] switchCode;
  unsigned long[] keyType;
  unsigned long[] ledType;
  unsigned long[] soundType;
  unsigned long[] switchType;
};

[mini, lite, full] struct DeviceInfo {
  unsigned int devIndex;
  unsigned int devType;
  std::string chipInfo;
  std::string vendorName;
  std::string chipName;
  ohos.hdi.input.v1_0.DevAttr attrSet;
  ohos.hdi.input.v1_0.DevAbility abilitySet;
};

[mini, lite, full] struct ExtraCmd {
  std::string cmdCode;
  std::string cmdValue;
};

[mini, lite, full] struct HotPlugEvent {
  unsigned int devIndex;
  unsigned int devType;
  unsigned int status;
};

[mini, lite, full] struct EventPackage {
  unsigned int type;
  unsigned int code;
  int value;
  unsigned long timestamp;
};


