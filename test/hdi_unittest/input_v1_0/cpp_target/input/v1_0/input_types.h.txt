/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_INPUT_V1_0_INPUTTYPES_H
#define OHOS_HDI_INPUT_V1_0_INPUTTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>
#include <vector>

namespace OHOS {
namespace HDI {
namespace Input {
namespace V1_0 {

using namespace OHOS;

struct DevDesc {
    uint32_t devIndex;
    uint32_t devType;
} __attribute__ ((aligned(8)));

struct DevIdentify {
    uint16_t busType;
    uint16_t vendor;
    uint16_t product;
    uint16_t version;
} __attribute__ ((aligned(8)));

struct DimensionInfo {
    int32_t axis;
    int32_t min;
    int32_t max;
    int32_t fuzz;
    int32_t flat;
    int32_t range;
} __attribute__ ((aligned(8)));

struct DevAttr {
    std::string devName;
    OHOS::HDI::Input::V1_0::DevIdentify id;
    std::vector<OHOS::HDI::Input::V1_0::DimensionInfo> axisInfo;
};

struct DevAbility {
    std::vector<uint64_t> devProp;
    std::vector<uint64_t> eventType;
    std::vector<uint64_t> absCode;
    std::vector<uint64_t> relCode;
    std::vector<uint64_t> keyCode;
    std::vector<uint64_t> ledCode;
    std::vector<uint64_t> miscCode;
    std::vector<uint64_t> soundCode;
    std::vector<uint64_t> forceCode;
    std::vector<uint64_t> switchCode;
    std::vector<uint64_t> keyType;
    std::vector<uint64_t> ledType;
    std::vector<uint64_t> soundType;
    std::vector<uint64_t> switchType;
};

struct DeviceInfo {
    uint32_t devIndex;
    uint32_t devType;
    std::string chipInfo;
    std::string vendorName;
    std::string chipName;
    OHOS::HDI::Input::V1_0::DevAttr attrSet;
    OHOS::HDI::Input::V1_0::DevAbility abilitySet;
};

struct ExtraCmd {
    std::string cmdCode;
    std::string cmdValue;
};

struct HotPlugEvent {
    uint32_t devIndex;
    uint32_t devType;
    uint32_t status;
} __attribute__ ((aligned(8)));

struct EventPackage {
    uint32_t type;
    uint32_t code;
    int32_t value;
    uint64_t timestamp;
} __attribute__ ((aligned(8)));
} // V1_0
} // Input
} // HDI
} // OHOS

#endif // OHOS_HDI_INPUT_V1_0_INPUTTYPES_H

