/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/input_interfaces_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    input_interfaces_service

namespace OHOS {
namespace HDI {
namespace Input {
namespace V1_0 {
extern "C" IInputInterfaces *InputInterfacesImplGetInstance(void)
{
    return new (std::nothrow) InputInterfacesService();
}

int32_t InputInterfacesService::ScanInputDevice(std::vector<OHOS::HDI::Input::V1_0::DevDesc>& staArr)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::OpenInputDevice(uint32_t devIndex)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::CloseInputDevice(uint32_t devIndex)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetInputDevice(uint32_t devIndex, OHOS::HDI::Input::V1_0::DeviceInfo& devInfo)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetInputDeviceList(uint32_t& devNum,
     std::vector<OHOS::HDI::Input::V1_0::DeviceInfo>& devList, uint32_t size)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::SetPowerStatus(uint32_t devIndex, uint32_t status)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetPowerStatus(uint32_t devIndex, uint32_t& status)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetDeviceType(uint32_t devIndex, uint32_t& deviceType)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetChipInfo(uint32_t devIndex, std::string& chipInfo)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetVendorName(uint32_t devIndex, std::string& vendorName)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::GetChipName(uint32_t devIndex, std::string& chipName)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::SetGestureMode(uint32_t devIndex, uint32_t gestureMode)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::RunCapacitanceTest(uint32_t devIndex, uint32_t testType, std::string& result,
     uint32_t length)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::RunExtraCommand(uint32_t devIndex, const OHOS::HDI::Input::V1_0::ExtraCmd& cmd)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::RegisterReportCallback(uint32_t devIndex,
     const sptr<OHOS::HDI::Input::V1_0::IInputCallback>& eventPkgCallback)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::UnregisterReportCallback(uint32_t devIndex)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::RegisterHotPlugCallback(const sptr<OHOS::HDI::Input::V1_0::IInputCallback>& hotPlugCallback)
{
    return HDF_SUCCESS;
}

int32_t InputInterfacesService::UnregisterHotPlugCallback()
{
    return HDF_SUCCESS;
}

} // V1_0
} // Input
} // HDI
} // OHOS
