/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USB_GADGET_MTP_V1_0_USBFNMTPINTERFACESTUB_H
#define OHOS_HDI_USB_GADGET_MTP_V1_0_USBFNMTPINTERFACESTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/iusbfn_mtp_interface.h"

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Gadget {
namespace Mtp {
namespace V1_0 {

using namespace OHOS;
class UsbfnMtpInterfaceStub : public IPCObjectStub {
public:
    explicit UsbfnMtpInterfaceStub(const sptr<IUsbfnMtpInterface> &impl);
    virtual ~UsbfnMtpInterfaceStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t UsbfnMtpInterfaceStubStart_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubStop_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubRead_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubWrite_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubReceiveFile_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubSendFile_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubSendEvent_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubInit_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubRelease_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

    static int32_t UsbfnMtpInterfaceStubGetVersion_(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption, sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl);

private:
    int32_t UsbfnMtpInterfaceStubStart(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubStop(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubRead(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubWrite(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubReceiveFile(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubSendFile(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubSendEvent(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubInit(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubRelease(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);

    int32_t UsbfnMtpInterfaceStubGetVersion(MessageParcel& usbfnMtpInterfaceData, MessageParcel& usbfnMtpInterfaceReply, MessageOption& usbfnMtpInterfaceOption);


    static inline ObjectDelegator<OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceStub, OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> objDelegator_;
    sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl_;
};
} // V1_0
} // Mtp
} // Gadget
} // Usb
} // HDI
} // OHOS

#endif // OHOS_HDI_USB_GADGET_MTP_V1_0_USBFNMTPINTERFACESTUB_H

