/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/usbfn_mtp_interface_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    usbfn_mtp_interface_proxy

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Gadget {
namespace Mtp {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);

sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::Get(bool isStub)
{
    return IUsbfnMtpInterface::Get("usbfn_mtp_interface_service", isStub);
}

sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor());
        std::string svrName = (serviceName == "usbfn_mtp_interface_service") ? "service" : serviceName;
        sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface> impl = \
            reinterpret_cast<OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface *>(LoadHdiImpl(desc.c_str(), svrName.c_str()));
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        uint32_t serMajorVer = 0;
        uint32_t serMinorVer = 0;
        int32_t usbfnMtpInterfaceRet = impl->GetVersion(serMajorVer, serMinorVer);
        if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
            HDF_LOGE("%{public}s: get version failed!", __func__);
            return nullptr;
        }

        if (serMajorVer != 1) {
            HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
            return nullptr;
        }
        if (serMinorVer < 0) {
            HDF_LOGE("%{public}s:check Minor version failed! "
                "client minor version(0) should be less or equal to implementation minor version(%u).", __func__, serMinorVer);
            return nullptr;
        }

        return impl;
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy> proxy = new OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t usbfnMtpInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    if (serMinorVer < 0) {
        HDF_LOGE("%{public}s:check Minor version failed! "
            "client minor version(0) should be less or equal to server minor version(%u).", __func__, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Reconnect(
    sptr<OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}
int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Start()
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Start_(GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Stop()
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Stop_(GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Read(std::vector<uint8_t>& data)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Read_(data, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Write(const std::vector<uint8_t>& data)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Write_(data, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::ReceiveFile(const OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& mfs)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::ReceiveFile_(mfs, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendFile(const OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& mfs)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendFile_(mfs, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendEvent(const std::vector<uint8_t>& eventData)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendEvent_(eventData, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Init()
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Init_(GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Release()
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Release_(GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Start_(const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_START, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Stop_(const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_STOP, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Read_(std::vector<uint8_t>& data,
     const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!usbfnMtpInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_READ, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    if (!ReadPodArray(usbfnMtpInterfaceReply, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Write_(const std::vector<uint8_t>& data,
     const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(usbfnMtpInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to write data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_WRITE, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::ReceiveFile_(const OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& mfs, const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSliceBlockMarshalling(usbfnMtpInterfaceData, mfs)) {
        HDF_LOGE("%{public}s: write mfs failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_RECEIVE_FILE, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendFile_(const OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& mfs, const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSliceBlockMarshalling(usbfnMtpInterfaceData, mfs)) {
        HDF_LOGE("%{public}s: write mfs failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_SEND_FILE, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::SendEvent_(const std::vector<uint8_t>& eventData,
     const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(usbfnMtpInterfaceData, eventData)) {
        HDF_LOGE("%{public}s: failed to write eventData", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_SEND_EVENT, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Init_(const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_INIT, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::Release_(const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_RELEASE, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    return usbfnMtpInterfaceRet;
}

int32_t OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbfnMtpInterfaceProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel usbfnMtpInterfaceData;
    MessageParcel usbfnMtpInterfaceReply;
    MessageOption usbfnMtpInterfaceOption(MessageOption::TF_SYNC);

    if (!usbfnMtpInterfaceData.WriteInterfaceToken(OHOS::HDI::Usb::Gadget::Mtp::V1_0::IUsbfnMtpInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t usbfnMtpInterfaceRet = remote->SendRequest(CMD_USBFN_MTP_INTERFACE_GET_VERSION, usbfnMtpInterfaceData, usbfnMtpInterfaceReply, usbfnMtpInterfaceOption);
    if (usbfnMtpInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, usbfnMtpInterfaceRet);
        return usbfnMtpInterfaceRet;
    }

    if (!usbfnMtpInterfaceReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!usbfnMtpInterfaceReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return usbfnMtpInterfaceRet;
}

} // V1_0
} // Mtp
} // Gadget
} // Usb
} // HDI
} // OHOS
