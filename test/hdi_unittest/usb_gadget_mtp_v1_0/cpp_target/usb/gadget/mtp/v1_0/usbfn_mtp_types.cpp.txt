/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/usbfn_mtp_types.h"
#include <hdf_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Usb {
namespace Gadget {
namespace Mtp {
namespace V1_0 {

static bool ReadFileDescriptor(MessageParcel &data, int &fd);
static bool WriteFileDescriptor(MessageParcel &data, int fd);


static bool ReadFileDescriptor(MessageParcel &data, int &fd)
{
    fd = -1;
    bool fdValid = false;
    if (!data.ReadBool(fdValid)) {
        HDF_LOGE("%{public}s: failed to read fdValid", __func__);
        return false;
    }

    if (fdValid) {
        fd = data.ReadFileDescriptor();
        if (fd < 0) {
            HDF_LOGE("%{public}s: failed to read fd", __func__);
            return false;
        }
    }
    return true;
}

static bool WriteFileDescriptor(MessageParcel &data, int fd)
{
    if (!data.WriteBool(fd >= 0 ? true : false)) {
        HDF_LOGE("%{public}s: failed to write fd vailed", __func__);
        return false;
    }
    if (fd < 0) {
        return true;
    }
    if (!data.WriteFileDescriptor(fd)) {
        HDF_LOGE("%{public}s: failed to write fd", __func__);
        return false;
    }
    return true;
}

bool UsbFnMtpFileSliceBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& dataBlock)
{
    if (!WriteFileDescriptor(data, dataBlock.fd)) {
        HDF_LOGE("%{public}s: write dataBlock.fd failed!", __func__);
        return false;
    }

    if (!data.WriteInt64(dataBlock.offset)) {
        HDF_LOGE("%{public}s: write dataBlock.offset failed!", __func__);
        return false;
    }

    if (!data.WriteInt64(dataBlock.length)) {
        HDF_LOGE("%{public}s: write dataBlock.length failed!", __func__);
        return false;
    }

    if (!data.WriteUint16(dataBlock.command)) {
        HDF_LOGE("%{public}s: write dataBlock.command failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.transactionId)) {
        HDF_LOGE("%{public}s: write dataBlock.transactionId failed!", __func__);
        return false;
    }
    return true;
}

bool UsbFnMtpFileSliceBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::Gadget::Mtp::V1_0::UsbFnMtpFileSlice& dataBlock)
{
    dataBlock.fd = -1;
    if (!ReadFileDescriptor(data, dataBlock.fd)) {
        HDF_LOGE("%{public}s: read dataBlock.fd failed!", __func__);
        return false;
    }

    if (!data.ReadInt64(dataBlock.offset)) {
        HDF_LOGE("%{public}s: read dataBlock.offset failed!", __func__);
        return false;
    }

    if (!data.ReadInt64(dataBlock.length)) {
        HDF_LOGE("%{public}s: read dataBlock.length failed!", __func__);
        return false;
    }

    if (!data.ReadUint16(dataBlock.command)) {
        HDF_LOGE("%{public}s: read dataBlock.command failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.transactionId)) {
        HDF_LOGE("%{public}s: read dataBlock.transactionId failed!", __func__);
        return false;
    }
    return true;
}

} // V1_0
} // Mtp
} // Gadget
} // Usb
} // HDI
} // OHOS
