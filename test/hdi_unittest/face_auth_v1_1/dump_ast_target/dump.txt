AST[name: IFaceAuthInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_1/IFaceAuthInterface.idl]
package ohos.hdi.face_auth.v1_1;

import ohos.hdi.face_auth.v1_1.IExecutor;
import ohos.hdi.face_auth.v1_0.IFaceAuthInterface;

[mini, lite, full] interface IFaceAuthInterface {
    [mini, lite, full] GetExecutorListV1_1(
      [out] ohos.hdi.face_auth.v1_1.IExecutor[] executorList);
}


AST[name: IExecutor file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_1/IExecutor.idl]
package ohos.hdi.face_auth.v1_1;

import ohos.hdi.face_auth.v1_1.ISaCommandCallback;
import ohos.hdi.face_auth.v1_1.FaceAuthTypes;
import ohos.hdi.face_auth.v1_0.IExecutor;
import ohos.hdi.face_auth.v1_0.FaceAuthTypes;

[mini, lite, full] interface IExecutor {
    [mini, lite, full] GetProperty(
      [in] unsigned long[] templateIdList,
      [in] ohos.hdi.face_auth.v1_1.GetPropertyType[] propertyTypes,
      [out] ohos.hdi.face_auth.v1_1.Property property);

    [mini, lite, full] SetCachedTemplates(
      [in] unsigned long[] templateIdList);

    [mini, lite, full] RegisterSaCommandCallback(
      [in] ohos.hdi.face_auth.v1_1.ISaCommandCallback callbackObj);
}


AST[name: ISaCommandCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_1/ISaCommandCallback.idl]
package ohos.hdi.face_auth.v1_1;

import ohos.hdi.face_auth.v1_1.FaceAuthTypes;

[mini, lite, full, callback] interface ISaCommandCallback {
    [mini, lite, full, callback] OnSaCommands(
      [in] ohos.hdi.face_auth.v1_1.SaCommand[] commands);
}


AST[name: IExecutor file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_0/IExecutor.idl]
package ohos.hdi.face_auth.v1_0;

import ohos.hdi.camera.v1_0.BufferProducerSequenceable;
import ohos.hdi.face_auth.v1_0.IExecutorCallback;
import ohos.hdi.face_auth.v1_0.FaceAuthTypes;

[mini, lite, full] interface IExecutor {
    [mini, lite, full] GetExecutorInfo(
      [out] ohos.hdi.face_auth.v1_0.ExecutorInfo executorInfo);

    [mini, lite, full] GetTemplateInfo(
      [in] unsigned long templateId,
      [out] ohos.hdi.face_auth.v1_0.TemplateInfo templateInfo);

    [mini, lite, full] OnRegisterFinish(
      [in] unsigned long[] templateIdList,
      [in] unsigned char[] frameworkPublicKey,
      [in] unsigned char[] extraInfo);

    [mini, lite, full] Enroll(
      [in] unsigned long scheduleId,
      [in] unsigned char[] extraInfo,
      [in] ohos.hdi.face_auth.v1_0.IExecutorCallback callbackObj);

    [mini, lite, full] Authenticate(
      [in] unsigned long scheduleId,
      [in] unsigned long[] templateIdList,
      [in] unsigned char[] extraInfo,
      [in] ohos.hdi.face_auth.v1_0.IExecutorCallback callbackObj);

    [mini, lite, full] Identify(
      [in] unsigned long scheduleId,
      [in] unsigned char[] extraInfo,
      [in] ohos.hdi.face_auth.v1_0.IExecutorCallback callbackObj);

    [mini, lite, full] Delete(
      [in] unsigned long[] templateIdList);

    [mini, lite, full] Cancel(
      [in] unsigned long scheduleId);

    [mini, lite, full] SendCommand(
      [in] int commandId,
      [in] unsigned char[] extraInfo,
      [in] ohos.hdi.face_auth.v1_0.IExecutorCallback callbackObj);

    [mini, lite, full] SetBufferProducer(
      [in] ohos.hdi.camera.v1_0.BufferProducerSequenceable bufferProducer);
}


AST[name: BufferProducerSequenceable file: ]
package ohos.hdi.camera.v1_0;


AST[name: FaceAuthTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_1/FaceAuthTypes.idl]
package ohos.hdi.face_auth.v1_1;

[mini, lite, full] enum GetPropertyType : int {
  AUTH_SUB_TYPE = 1,
  LOCKOUT_DURATION = 2,
  REMAIN_ATTEMPTS = 3,
  ENROLL_PROGRESS = 4,
  SENSOR_INFO = 5,
};

[mini, lite, full] struct Property {
  unsigned long authSubType;
  int lockoutDuration;
  int remainAttempts;
  std::string enrollmentProgress;
  std::string sensorInfo;
};

[mini, lite, full] enum SaCommandId : int {
  BEGIN_SCREEN_BRIGHTNESS_INCREASE = 1,
  END_SCREEN_BRIGHTNESS_INCREASE = 2,
};

[mini, lite, full] struct SaCommandParamNone {
};

[mini, lite, full] union SaCommandParam {
  ohos.hdi.face_auth.v1_1.SaCommandParamNone none;
};

[mini, lite, full] struct SaCommand {
  ohos.hdi.face_auth.v1_1.SaCommandId id;
  ohos.hdi.face_auth.v1_1.SaCommandParam param;
};

[mini, lite, full] enum CommandId : int {
  LOCK_TEMPLATE = 1,
  UNLOCK_TEMPLATE = 2,
  INIT_ALGORITHM = 3,
  VENDOR_COMMAND_BEGIN = 10000,
};


AST[name: IFaceAuthInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_0/IFaceAuthInterface.idl]
package ohos.hdi.face_auth.v1_0;

import ohos.hdi.face_auth.v1_0.IExecutor;

[mini, lite, full] interface IFaceAuthInterface {
    [mini, lite, full] GetExecutorList(
      [out] ohos.hdi.face_auth.v1_0.IExecutor[] executorList);
}


AST[name: IExecutorCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_0/IExecutorCallback.idl]
package ohos.hdi.face_auth.v1_0;

[mini, lite, full, callback] interface IExecutorCallback {
    [mini, lite, full, callback] OnResult(
      [in] int result,
      [in] unsigned char[] extraInfo);

    [mini, lite, full, callback] OnTip(
      [in] int tip,
      [in] unsigned char[] extraInfo);
}


AST[name: FaceAuthTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/face_auth_v1_1/foo/face_auth/v1_0/FaceAuthTypes.idl]
package ohos.hdi.face_auth.v1_0;

[mini, lite, full] enum AuthType : int {
  PIN = 1,
  FACE = 2,
  FINGERPRINT = 4,
};

[mini, lite, full] enum ExecutorRole : int {
  COLLECTOR = 1,
  VERIFIER = 2,
  ALL_IN_ONE = 3,
};

[mini, lite, full] enum ExecutorSecureLevel : int {
  ESL0 = 0,
  ESL1 = 1,
  ESL2 = 2,
  ESL3 = 3,
};

[mini, lite, full] enum CommandId : int {
  LOCK_TEMPLATE = 1,
  UNLOCK_TEMPLATE = 2,
  VENDOR_COMMAND_BEGIN = 10000,
};

[mini, lite, full] enum FaceTipsCode : int {
  FACE_AUTH_TIP_TOO_BRIGHT = 1,
  FACE_AUTH_TIP_TOO_DARK = 2,
  FACE_AUTH_TIP_TOO_CLOSE = 3,
  FACE_AUTH_TIP_TOO_FAR = 4,
  FACE_AUTH_TIP_TOO_HIGH = 5,
  FACE_AUTH_TIP_TOO_LOW = 6,
  FACE_AUTH_TIP_TOO_RIGHT = 7,
  FACE_AUTH_TIP_TOO_LEFT = 8,
  FACE_AUTH_TIP_TOO_MUCH_MOTION = 9,
  FACE_AUTH_TIP_POOR_GAZE = 10,
  FACE_AUTH_TIP_NOT_DETECTED = 11,
  VENDOR_FACE_AUTH_TIP_BEGIN = 10000,
};

[mini, lite, full] struct ExecutorInfo {
  unsigned short sensorId;
  unsigned int executorType;
  ohos.hdi.face_auth.v1_0.ExecutorRole executorRole;
  ohos.hdi.face_auth.v1_0.AuthType authType;
  ohos.hdi.face_auth.v1_0.ExecutorSecureLevel esl;
  unsigned char[] publicKey;
  unsigned char[] extraInfo;
};

[mini, lite, full] struct TemplateInfo {
  unsigned int executorType;
  int lockoutDuration;
  int remainAttempts;
  unsigned char[] extraInfo;
};


