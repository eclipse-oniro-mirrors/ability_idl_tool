/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_FACE_AUTH_V1_1_FACEAUTHTYPES_H
#define OHOS_HDI_FACE_AUTH_V1_1_FACEAUTHTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace FaceAuth {
namespace V1_1 {

using namespace OHOS;

enum GetPropertyType : int32_t {
    AUTH_SUB_TYPE = 1,
    LOCKOUT_DURATION = 2,
    REMAIN_ATTEMPTS = 3,
    ENROLL_PROGRESS = 4,
    SENSOR_INFO = 5,
};

struct Property {
    uint64_t authSubType;
    int32_t lockoutDuration;
    int32_t remainAttempts;
    std::string enrollmentProgress;
    std::string sensorInfo;
};

enum SaCommandId : int32_t {
    BEGIN_SCREEN_BRIGHTNESS_INCREASE = 1,
    END_SCREEN_BRIGHTNESS_INCREASE = 2,
};

struct SaCommandParamNone {
} __attribute__ ((aligned(8)));

union SaCommandParam {
    OHOS::HDI::FaceAuth::V1_1::SaCommandParamNone none;
}  __attribute__ ((aligned(8)));

struct SaCommand {
    OHOS::HDI::FaceAuth::V1_1::SaCommandId id;
    OHOS::HDI::FaceAuth::V1_1::SaCommandParam param;
} __attribute__ ((aligned(8)));

enum CommandId : int32_t {
    LOCK_TEMPLATE = 1,
    UNLOCK_TEMPLATE = 2,
    INIT_ALGORITHM = 3,
    VENDOR_COMMAND_BEGIN = 10000,
};

bool PropertyBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::FaceAuth::V1_1::Property& dataBlock);

bool PropertyBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::FaceAuth::V1_1::Property& dataBlock);

bool SaCommandParamNoneBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::FaceAuth::V1_1::SaCommandParamNone& dataBlock);

bool SaCommandParamNoneBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::FaceAuth::V1_1::SaCommandParamNone& dataBlock);

bool SaCommandBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::FaceAuth::V1_1::SaCommand& dataBlock);

bool SaCommandBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::FaceAuth::V1_1::SaCommand& dataBlock);


} // V1_1
} // FaceAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_FACE_AUTH_V1_1_FACEAUTHTYPES_H

