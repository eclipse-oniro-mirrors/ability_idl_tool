/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_FACE_AUTH_V1_1_EXECUTORSTUB_H
#define OHOS_HDI_FACE_AUTH_V1_1_EXECUTORSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/executor_stub.h"
#include "v1_1/iexecutor.h"

namespace OHOS {
namespace HDI {
namespace FaceAuth {
namespace V1_1 {

using namespace OHOS;
class ExecutorStub : public IPCObjectStub {
public:
    explicit ExecutorStub(const sptr<IExecutor> &impl);
    virtual ~ExecutorStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t ExecutorStubGetProperty_(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption, sptr<OHOS::HDI::FaceAuth::V1_1::IExecutor> impl);

    static int32_t ExecutorStubSetCachedTemplates_(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption, sptr<OHOS::HDI::FaceAuth::V1_1::IExecutor> impl);

    static int32_t ExecutorStubRegisterSaCommandCallback_(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption, sptr<OHOS::HDI::FaceAuth::V1_1::IExecutor> impl);

private:
    int32_t ExecutorStubGetProperty(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubSetCachedTemplates(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubRegisterSaCommandCallback(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubGetExecutorInfo(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubGetTemplateInfo(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubOnRegisterFinish(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubEnroll(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubAuthenticate(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubIdentify(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubDelete(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubCancel(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubSendCommand(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubSetBufferProducer(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);

    int32_t ExecutorStubGetVersion(MessageParcel& executorData, MessageParcel& executorReply, MessageOption& executorOption);


    static inline ObjectDelegator<OHOS::HDI::FaceAuth::V1_1::ExecutorStub, OHOS::HDI::FaceAuth::V1_1::IExecutor> objDelegator_;
    sptr<OHOS::HDI::FaceAuth::V1_1::IExecutor> impl_;
};
} // V1_1
} // FaceAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_FACE_AUTH_V1_1_EXECUTORSTUB_H

