/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/executor_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    executor_service

namespace OHOS {
namespace HDI {
namespace FaceAuth {
namespace V1_1 {
extern "C" IExecutor *ExecutorImplGetInstance(void)
{
    return new (std::nothrow) ExecutorService();
}

int32_t ExecutorService::GetProperty(const std::vector<uint64_t>& templateIdList,
     const std::vector<OHOS::HDI::FaceAuth::V1_1::GetPropertyType>& propertyTypes, OHOS::HDI::FaceAuth::V1_1::Property& property)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::SetCachedTemplates(const std::vector<uint64_t>& templateIdList)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::RegisterSaCommandCallback(const sptr<OHOS::HDI::FaceAuth::V1_1::ISaCommandCallback>& callbackObj)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::GetExecutorInfo(OHOS::HDI::FaceAuth::V1_0::ExecutorInfo& executorInfo)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::GetTemplateInfo(uint64_t templateId, OHOS::HDI::FaceAuth::V1_0::TemplateInfo& templateInfo)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::OnRegisterFinish(const std::vector<uint64_t>& templateIdList,
     const std::vector<uint8_t>& frameworkPublicKey, const std::vector<uint8_t>& extraInfo)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::Enroll(uint64_t scheduleId, const std::vector<uint8_t>& extraInfo,
     const sptr<OHOS::HDI::FaceAuth::V1_0::IExecutorCallback>& callbackObj)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::Authenticate(uint64_t scheduleId, const std::vector<uint64_t>& templateIdList,
     const std::vector<uint8_t>& extraInfo, const sptr<OHOS::HDI::FaceAuth::V1_0::IExecutorCallback>& callbackObj)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::Identify(uint64_t scheduleId, const std::vector<uint8_t>& extraInfo,
     const sptr<OHOS::HDI::FaceAuth::V1_0::IExecutorCallback>& callbackObj)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::Delete(const std::vector<uint64_t>& templateIdList)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::Cancel(uint64_t scheduleId)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::SendCommand(int32_t commandId, const std::vector<uint8_t>& extraInfo,
     const sptr<OHOS::HDI::FaceAuth::V1_0::IExecutorCallback>& callbackObj)
{
    return HDF_SUCCESS;
}

int32_t ExecutorService::SetBufferProducer(const sptr<OHOS::HDI::Camera::V1_0::BufferProducerSequenceable>& bufferProducer)
{
    return HDF_SUCCESS;
}

} // V1_1
} // FaceAuth
} // HDI
} // OHOS
