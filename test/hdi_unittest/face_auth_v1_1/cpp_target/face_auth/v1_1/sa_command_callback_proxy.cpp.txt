/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/sa_command_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    sa_command_callback_proxy

namespace OHOS {
namespace HDI {
namespace FaceAuth {
namespace V1_1 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::OnSaCommands(const std::vector<OHOS::HDI::FaceAuth::V1_1::SaCommand>& commands)
{
    return OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::OnSaCommands_(commands, Remote());
}

int32_t OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::OnSaCommands_(const std::vector<OHOS::HDI::FaceAuth::V1_1::SaCommand>& commands, const sptr<IRemoteObject> remote)
{
    MessageParcel saCommandCallbackData;
    MessageParcel saCommandCallbackReply;
    MessageOption saCommandCallbackOption(MessageOption::TF_SYNC);

    if (!saCommandCallbackData.WriteInterfaceToken(OHOS::HDI::FaceAuth::V1_1::ISaCommandCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(saCommandCallbackData, commands)) {
        HDF_LOGE("%{public}s: failed to write commands", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t saCommandCallbackRet = remote->SendRequest(CMD_SA_COMMAND_CALLBACK_ON_SA_COMMANDS, saCommandCallbackData, saCommandCallbackReply, saCommandCallbackOption);
    if (saCommandCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, saCommandCallbackRet);
        return saCommandCallbackRet;
    }

    return saCommandCallbackRet;
}

int32_t OHOS::HDI::FaceAuth::V1_1::SaCommandCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel saCommandCallbackData;
    MessageParcel saCommandCallbackReply;
    MessageOption saCommandCallbackOption(MessageOption::TF_SYNC);

    if (!saCommandCallbackData.WriteInterfaceToken(OHOS::HDI::FaceAuth::V1_1::ISaCommandCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t saCommandCallbackRet = remote->SendRequest(CMD_SA_COMMAND_CALLBACK_GET_VERSION, saCommandCallbackData, saCommandCallbackReply, saCommandCallbackOption);
    if (saCommandCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, saCommandCallbackRet);
        return saCommandCallbackRet;
    }

    if (!saCommandCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!saCommandCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return saCommandCallbackRet;
}

} // V1_1
} // FaceAuth
} // HDI
} // OHOS
