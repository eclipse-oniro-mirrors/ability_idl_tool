/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/display_composer_type.h"
#include <hdf_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Display {
namespace Composer {
namespace V1_1 {



bool DisplayModeInfoExtBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt))) {
        return false;
    }
    return true;
}

bool DisplayModeInfoExtBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt& dataBlock)
{
    const OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt), dataBlockPtr, sizeof(OHOS::HDI::Display::Composer::V1_1::DisplayModeInfoExt)) != EOK) {
        return false;
    }
    return true;
}

} // V1_1
} // Composer
} // Display
} // HDI
} // OHOS
