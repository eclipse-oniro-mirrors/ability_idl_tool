AST[name: IDisplayComposer file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_1/IDisplayComposer.idl]
package ohos.hdi.display.composer.v1_1;

import ohos.hdi.display.composer.v1_0.IRefreshCallback;
import ohos.hdi.display.composer.v1_1.ISeamlessChangeCallback;
import ohos.hdi.display.composer.v1_1.IModeCallback;
import ohos.hdi.display.composer.v1_1.DisplayComposerType;
import ohos.hdi.display.composer.v1_0.DisplayComposerType;
import ohos.hdi.display.composer.v1_0.IDisplayComposer;

[mini, lite, full] interface IDisplayComposer {
    [mini, lite, full] RegSeamlessChangeCallback(
      [in] ohos.hdi.display.composer.v1_1.ISeamlessChangeCallback cb);

    [mini, lite, full] GetDisplaySupportedModesExt(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_1.DisplayModeInfoExt[] modes);

    [mini, lite, full] SetDisplayModeAsync(
      [in] unsigned int devId,
      [in] unsigned int modeId,
      [in] ohos.hdi.display.composer.v1_1.IModeCallback cb);

    [mini, lite, full] GetDisplayVBlankPeriod(
      [in] unsigned int devId,
      [out] unsigned long period);

    [mini, lite, full] SetLayerPerFrameParameter(
      [in] unsigned int devId,
      [in] unsigned int layerId,
      [in] std::string key,
      [in] byte[] value);

    [mini, lite, full] GetSupportedLayerPerFrameParameterKey(
      [out] std::string[] keys);

    [mini, lite, full] SetDisplayOverlayResolution(
      [in] unsigned int devId,
      [in] unsigned int width,
      [in] unsigned int height);

    [mini, lite, full] RegRefreshCallback(
      [in] ohos.hdi.display.composer.v1_0.IRefreshCallback cb);

    [mini, lite, full] GetDisplaySupportedColorGamuts(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_0.ColorGamut[] gamuts);

    [mini, lite, full] GetHDRCapabilityInfos(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_0.HDRCapability info);
}


AST[name: IModeCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_1/IModeCallback.idl]
package ohos.hdi.display.composer.v1_1;

import ohos.hdi.display.composer.v1_1.DisplayComposerType;

[mini, lite, full, callback] interface IModeCallback {
    [mini, lite, full, callback] OnMode(
      [in] unsigned int modeId,
      [in] unsigned long vBlankPeriod);
}


AST[name: IDisplayComposer file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_0/IDisplayComposer.idl]
package ohos.hdi.display.composer.v1_0;

import OHOS.HDI.Display.HdifdParcelable;
import ohos.hdi.display.composer.v1_0.IRefreshCallback;
import ohos.hdi.display.composer.v1_0.IHotPlugCallback;
import ohos.hdi.display.composer.v1_0.IVBlankCallback;
import ohos.hdi.display.composer.v1_0.DisplayComposerType;

[mini, lite, full] interface IDisplayComposer {
    [mini, lite, full] RegHotPlugCallback(
      [in] ohos.hdi.display.composer.v1_0.IHotPlugCallback cb);

    [mini, lite, full] SetClientBufferCacheCount(
      [in] unsigned int devId,
      [in] unsigned int count);

    [mini, lite, full] RegDisplayVBlankCallback(
      [in] unsigned int devId,
      [in] ohos.hdi.display.composer.v1_0.IVBlankCallback cb);

    [mini, lite, full] GetDisplayCapability(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_0.DisplayCapability info);

    [mini, lite, full] GetDisplaySupportedModes(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_0.DisplayModeInfo[] modes);

    [mini, lite, full] GetDisplayMode(
      [in] unsigned int devId,
      [out] unsigned int modeId);

    [mini, lite, full] SetDisplayMode(
      [in] unsigned int devId,
      [in] unsigned int modeId);

    [mini, lite, full] GetDisplayPowerStatus(
      [in] unsigned int devId,
      [out] ohos.hdi.display.composer.v1_0.DispPowerStatus status);

    [mini, lite, full] SetDisplayPowerStatus(
      [in] unsigned int devId,
      [in] ohos.hdi.display.composer.v1_0.DispPowerStatus status);

    [mini, lite, full] GetDisplayBacklight(
      [in] unsigned int devId,
      [out] unsigned int level);

    [mini, lite, full] SetDisplayBacklight(
      [in] unsigned int devId,
      [in] unsigned int level);

    [mini, lite, full] SetDisplayVsyncEnabled(
      [in] unsigned int devId,
      [in] boolean enabled);

    [mini, lite, full] CreateLayer(
      [in] unsigned int devId,
      [in] ohos.hdi.display.composer.v1_0.LayerInfo layerInfo,
      [in] unsigned int cacheCount,
      [out] unsigned int layerId);

    [mini, lite, full] DestroyLayer(
      [in] unsigned int devId,
      [in] unsigned int layerId);

    [mini, lite, full] SetDisplayClientCrop(
      [in] unsigned int devId,
      [in] ohos.hdi.display.composer.v1_0.IRect rect);

    [mini, lite, full] GetDisplayReleaseFence(
      [in] unsigned int devId,
      [out] unsigned int[] layers,
      [out] OHOS.HDI.Display.HdifdParcelable[] fences);

    [mini, lite, full] CreateVirtualDisplay(
      [in] unsigned int width,
      [in] unsigned int height,
      [out] int format,
      [out] unsigned int devId);

    [mini, lite, full] DestroyVirtualDisplay(
      [in] unsigned int devId);

    [mini, lite, full] SetVirtualDisplayBuffer(
      [in] unsigned int devId,
      [in] NativeBuffer buffer,
      [in] OHOS.HDI.Display.HdifdParcelable fence);

    [mini, lite, full] SetDisplayProperty(
      [in] unsigned int devId,
      [in] unsigned int id,
      [in] unsigned long value);

    [mini, lite, full] GetDisplayProperty(
      [in] unsigned int devId,
      [in] unsigned int id,
      [out] unsigned long value);

    [mini, lite, full] InitCmdRequest(
      [in] SharedMemQueue<int> request);

    [mini, lite, full] CmdRequest(
      [in] unsigned int inEleCnt,
      [in] ohos.hdi.display.composer.v1_0.HdifdInfo[] inFds,
      [out] unsigned int outEleCnt,
      [out] ohos.hdi.display.composer.v1_0.HdifdInfo[] outFds);

    [mini, lite, full] GetCmdReply(
      [out] SharedMemQueue<int> reply);
}


AST[name: IRefreshCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_0/IRefreshCallback.idl]
package ohos.hdi.display.composer.v1_0;

import ohos.hdi.display.composer.v1_0.DisplayComposerType;

[mini, lite, full, callback] interface IRefreshCallback {
    [mini, lite, full, callback] OnRefresh(
      [in] unsigned int devId);
}


AST[name: IHotPlugCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_0/IHotPlugCallback.idl]
package ohos.hdi.display.composer.v1_0;

import ohos.hdi.display.composer.v1_0.DisplayComposerType;

[mini, lite, full, callback] interface IHotPlugCallback {
    [mini, lite, full, callback] OnHotPlug(
      [in] unsigned int outputId,
      [in] boolean connected);
}


AST[name: ISeamlessChangeCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_1/ISeamlessChangeCallback.idl]
package ohos.hdi.display.composer.v1_1;

[mini, lite, full, callback] interface ISeamlessChangeCallback {
    [mini, lite, full, callback] OnSeamlessChange(
      [in] unsigned int devId);
}


AST[name: DisplayComposerType file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_1/DisplayComposerType.idl]
package ohos.hdi.display.composer.v1_1;

import ohos.hdi.display.composer.v1_0.DisplayComposerType;
import OHOS.HDI.Display.HdifdParcelable;

[mini, lite, full] enum PixelFormat : ohos.hdi.display.composer.v1_0.PixelFormat  : int {
  PIXEL_FMT_CLUT8 = 0,
  PIXEL_FMT_CLUT1,
  PIXEL_FMT_CLUT4,
  PIXEL_FMT_RGB_565,
  PIXEL_FMT_RGBA_5658,
  PIXEL_FMT_RGBX_4444,
  PIXEL_FMT_RGBA_4444,
  PIXEL_FMT_RGB_444,
  PIXEL_FMT_RGBX_5551,
  PIXEL_FMT_RGBA_5551,
  PIXEL_FMT_RGB_555,
  PIXEL_FMT_RGBX_8888,
  PIXEL_FMT_RGBA_8888,
  PIXEL_FMT_RGB_888,
  PIXEL_FMT_BGR_565,
  PIXEL_FMT_BGRX_4444,
  PIXEL_FMT_BGRA_4444,
  PIXEL_FMT_BGRX_5551,
  PIXEL_FMT_BGRA_5551,
  PIXEL_FMT_BGRX_8888,
  PIXEL_FMT_BGRA_8888,
  PIXEL_FMT_YUV_422_I,
  PIXEL_FMT_YCBCR_422_SP,
  PIXEL_FMT_YCRCB_422_SP,
  PIXEL_FMT_YCBCR_420_SP,
  PIXEL_FMT_YCRCB_420_SP,
  PIXEL_FMT_YCBCR_422_P,
  PIXEL_FMT_YCRCB_422_P,
  PIXEL_FMT_YCBCR_420_P,
  PIXEL_FMT_YCRCB_420_P,
  PIXEL_FMT_YUYV_422_PKG,
  PIXEL_FMT_UYVY_422_PKG,
  PIXEL_FMT_YVYU_422_PKG,
  PIXEL_FMT_VYUY_422_PKG,
  PIXEL_FMT_RGBA_1010102,
  PIXEL_FMT_VENDER_MASK = 0X7FFF0000,
  PIXEL_FMT_BUTT = 0X7FFFFFFF,
  PIXEL_FMT_YCBCR_P010 = 35,
  PIXEL_FMT_YCRCB_P010,
  PIXEL_FMT_RAW10,
  PIXEL_FMT_BLOB,
};

[mini, lite, full] enum DispPowerStatus : ohos.hdi.display.composer.v1_0.DispPowerStatus  : int {
  POWER_STATUS_ON = 0,
  POWER_STATUS_STANDBY = 1,
  POWER_STATUS_SUSPEND = 2,
  POWER_STATUS_OFF = 3,
  POWER_STATUS_BUTT,
  POWER_STATUS_OFF_FAKE = 4,
  POWER_STATUS_BUTT_V1_1,
};

[mini, lite, full] enum CompositionType : ohos.hdi.display.composer.v1_0.CompositionType  : int {
  COMPOSITION_CLIENT,
  COMPOSITION_DEVICE,
  COMPOSITION_CURSOR,
  COMPOSITION_VIDEO,
  COMPOSITION_DEVICE_CLEAR,
  COMPOSITION_CLIENT_CLEAR,
  COMPOSITION_TUNNEL,
  COMPOSITION_BUTT,
  COMPOSITION_SOLID_COLOR = 7,
  COMPOSITION_BUTT_V1_1,
};

[mini, lite, full] struct DisplayModeInfoExt {
  ohos.hdi.display.composer.v1_0.DisplayModeInfo v1_0;
  unsigned int groupId;
};


AST[name: IVBlankCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_0/IVBlankCallback.idl]
package ohos.hdi.display.composer.v1_0;

import ohos.hdi.display.composer.v1_0.DisplayComposerType;

[mini, lite, full, callback] interface IVBlankCallback {
    [mini, lite, full, callback] OnVBlank(
      [in] unsigned int sequence,
      [in] unsigned long ns);
}


AST[name: DisplayComposerType file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/display_composer_v1_1/foo/display/composer/v1_0/DisplayComposerType.idl]
package ohos.hdi.display.composer.v1_0;

import OHOS.HDI.Display.HdifdParcelable;

[mini, lite, full] enum DispCmd : int {
  REQUEST_CMD_PREPARE_DISPLAY_LAYERS = 64,
  REQUEST_CMD_SET_DISPLAY_CLIENT_BUFFER = 65,
  REQUEST_CMD_SET_DISPLAY_CLIENT_DAMAGE = 66,
  REQUEST_CMD_COMMIT = 67,
  REQUEST_CMD_SET_LAYER_ALPHA = 68,
  REQUEST_CMD_SET_LAYER_REGION = 69,
  REQUEST_CMD_SET_LAYER_CROP = 70,
  REQUEST_CMD_SET_LAYER_ZORDER = 71,
  REQUEST_CMD_SET_LAYER_PREMULTI = 72,
  REQUEST_CMD_SET_LAYER_TRANSFORM_MODE = 73,
  REQUEST_CMD_SET_LAYER_DIRTY_REGION = 74,
  REQUEST_CMD_SET_LAYER_VISIBLE_REGION = 75,
  REQUEST_CMD_SET_LAYER_BUFFER = 76,
  REQUEST_CMD_SET_LAYER_COMPOSITION_TYPE = 77,
  REQUEST_CMD_SET_LAYER_BLEND_TYPE = 78,
  REQUEST_CMD_SET_LAYER_VISIBLE = 79,
  REQUEST_CMD_SET_LAYER_MASK_INFO = 80,
  REQUEST_CMD_SET_LAYER_COLOR = 81,
  REQUEST_CMD_BUTT,
  REPLY_CMD_SET_ERROR = 512,
  REPLY_CMD_PREPARE_DISPLAY_LAYERS = 513,
  REPLY_CMD_COMMIT = 514,
  REPLY_CMD_BUTT,
  CONTROL_CMD_REQUEST_BEGIN = 1024,
  CONTROL_CMD_REPLY_BEGIN = 1025,
  CONTROL_CMD_REQUEST_END = 1026,
  CONTROL_CMD_REPLY_END = 1027,
  CONTROL_CMD_BUTT,
};

[mini, lite, full] enum DispErrCode : int {
  DISPLAY_SUCCESS = 0,
  DISPLAY_FAILURE = -1,
  DISPLAY_FD_ERR = -2,
  DISPLAY_PARAM_ERR = -3,
  DISPLAY_NULL_PTR = -4,
  DISPLAY_NOT_SUPPORT = -5,
  DISPLAY_NOMEM = -6,
  DISPLAY_SYS_BUSY = -7,
  DISPLAY_NOT_PERM = -8,
};

[mini, lite, full] enum PixelFormat : int {
  PIXEL_FMT_CLUT8 = 0,
  PIXEL_FMT_CLUT1,
  PIXEL_FMT_CLUT4,
  PIXEL_FMT_RGB_565,
  PIXEL_FMT_RGBA_5658,
  PIXEL_FMT_RGBX_4444,
  PIXEL_FMT_RGBA_4444,
  PIXEL_FMT_RGB_444,
  PIXEL_FMT_RGBX_5551,
  PIXEL_FMT_RGBA_5551,
  PIXEL_FMT_RGB_555,
  PIXEL_FMT_RGBX_8888,
  PIXEL_FMT_RGBA_8888,
  PIXEL_FMT_RGB_888,
  PIXEL_FMT_BGR_565,
  PIXEL_FMT_BGRX_4444,
  PIXEL_FMT_BGRA_4444,
  PIXEL_FMT_BGRX_5551,
  PIXEL_FMT_BGRA_5551,
  PIXEL_FMT_BGRX_8888,
  PIXEL_FMT_BGRA_8888,
  PIXEL_FMT_YUV_422_I,
  PIXEL_FMT_YCBCR_422_SP,
  PIXEL_FMT_YCRCB_422_SP,
  PIXEL_FMT_YCBCR_420_SP,
  PIXEL_FMT_YCRCB_420_SP,
  PIXEL_FMT_YCBCR_422_P,
  PIXEL_FMT_YCRCB_422_P,
  PIXEL_FMT_YCBCR_420_P,
  PIXEL_FMT_YCRCB_420_P,
  PIXEL_FMT_YUYV_422_PKG,
  PIXEL_FMT_UYVY_422_PKG,
  PIXEL_FMT_YVYU_422_PKG,
  PIXEL_FMT_VYUY_422_PKG,
  PIXEL_FMT_RGBA_1010102,
  PIXEL_FMT_VENDER_MASK = 0X7FFF0000,
  PIXEL_FMT_BUTT = 0X7FFFFFFF,
};

[mini, lite, full] enum BufferUsage : unsigned long {
  HBM_USE_CPU_READ = (1ULL << 0),
  HBM_USE_CPU_WRITE = (1ULL << 1),
  HBM_USE_MEM_MMZ = (1ULL << 2),
  HBM_USE_MEM_DMA = (1ULL << 3),
  HBM_USE_MEM_SHARE = (1ULL << 4),
  HBM_USE_MEM_MMZ_CACHE = (1ULL << 5),
  HBM_USE_MEM_FB = (1ULL << 6),
  HBM_USE_ASSIGN_SIZE = (1ULL << 7),
  HBM_USE_HW_RENDER = (1ULL << 8),
  HBM_USE_HW_TEXTURE = (1ULL << 9),
  HBM_USE_HW_COMPOSER = (1ULL << 10),
  HBM_USE_PROTECTED = (1ULL << 11),
  HBM_USE_CAMERA_READ = (1ULL << 12),
  HBM_USE_CAMERA_WRITE = (1ULL << 13),
  HBM_USE_VIDEO_ENCODER = (1ULL << 14),
  HBM_USE_VIDEO_DECODER = (1ULL << 15),
  HBM_USE_CPU_READ_OFTEN = (1ULL << 16),
  HBM_USE_VENDOR_PRI0 = (1ULL << 44),
  HBM_USE_VENDOR_PRI1 = (1ULL << 45),
  HBM_USE_VENDOR_PRI2 = (1ULL << 46),
  HBM_USE_VENDOR_PRI3 = (1ULL << 47),
  HBM_USE_VENDOR_PRI4 = (1ULL << 48),
  HBM_USE_VENDOR_PRI5 = (1ULL << 49),
  HBM_USE_VENDOR_PRI6 = (1ULL << 50),
  HBM_USE_VENDOR_PRI7 = (1ULL << 51),
  HBM_USE_VENDOR_PRI8 = (1ULL << 52),
  HBM_USE_VENDOR_PRI9 = (1ULL << 53),
  HBM_USE_VENDOR_PRI10 = (1ULL << 54),
  HBM_USE_VENDOR_PRI11 = (1ULL << 55),
  HBM_USE_VENDOR_PRI12 = (1ULL << 56),
  HBM_USE_VENDOR_PRI13 = (1ULL << 57),
  HBM_USE_VENDOR_PRI14 = (1ULL << 58),
  HBM_USE_VENDOR_PRI15 = (1ULL << 59),
  HBM_USE_VENDOR_PRI16 = (1ULL << 60),
  HBM_USE_VENDOR_PRI17 = (1ULL << 61),
  HBM_USE_VENDOR_PRI18 = (1ULL << 62),
  HBM_USE_VENDOR_PRI19 = (1ULL << 63),
};

[mini, lite, full] enum TransformType : int {
  ROTATE_NONE = 0,
  ROTATE_90,
  ROTATE_180,
  ROTATE_270,
  MIRROR_H,
  MIRROR_V,
  MIRROR_H_ROTATE_90,
  MIRROR_V_ROTATE_90,
  ROTATE_BUTT,
};

[mini, lite, full] enum DispPowerStatus : int {
  POWER_STATUS_ON = 0,
  POWER_STATUS_STANDBY = 1,
  POWER_STATUS_SUSPEND = 2,
  POWER_STATUS_OFF = 3,
  POWER_STATUS_BUTT,
};

[mini, lite, full] enum CompositionType : int {
  COMPOSITION_CLIENT,
  COMPOSITION_DEVICE,
  COMPOSITION_CURSOR,
  COMPOSITION_VIDEO,
  COMPOSITION_DEVICE_CLEAR,
  COMPOSITION_CLIENT_CLEAR,
  COMPOSITION_TUNNEL,
  COMPOSITION_BUTT,
};

[mini, lite, full] enum LayerType : int {
  LAYER_TYPE_GRAPHIC,
  LAYER_TYPE_OVERLAY,
  LAYER_TYPE_SDIEBAND,
  LAYER_TYPE_CURSOR,
  LAYER_TYPE_BUTT,
};

[mini, lite, full] enum BlendType : int {
  BLEND_NONE = 0,
  BLEND_CLEAR,
  BLEND_SRC,
  BLEND_SRCOVER,
  BLEND_DSTOVER,
  BLEND_SRCIN,
  BLEND_DSTIN,
  BLEND_SRCOUT,
  BLEND_DSTOUT,
  BLEND_SRCATOP,
  BLEND_DSTATOP,
  BLEND_ADD,
  BLEND_XOR,
  BLEND_DST,
  BLEND_AKS,
  BLEND_AKD,
  BLEND_BUTT,
};

[mini, lite, full] enum RopType : int {
  ROP_BLACK = 0,
  ROP_NOTMERGEPEN,
  ROP_MASKNOTPEN,
  ROP_NOTCOPYPEN,
  ROP_MASKPENNOT,
  ROP_NOT,
  ROP_XORPEN,
  ROP_NOTMASKPEN,
  ROP_MASKPEN,
  ROP_NOTXORPEN,
  ROP_NOP,
  ROP_MERGENOTPEN,
  ROP_COPYPE,
  ROP_MERGEPENNOT,
  ROP_MERGEPEN,
  ROP_WHITE,
  ROP_BUTT,
};

[mini, lite, full] enum ColorKey : int {
  CKEY_NONE = 0,
  CKEY_SRC,
  CKEY_DST,
  CKEY_BUTT,
};

[mini, lite, full] enum MirrorType : int {
  MIRROR_NONE = 0,
  MIRROR_LR,
  MIRROR_TB,
  MIRROR_BUTT,
};

[mini, lite, full] enum Connection : int {
  CON_INVALID = 0,
  CONNECTED,
  DISCONNECTED,
};

[mini, lite, full] enum InterfaceType : int {
  DISP_INTF_HDMI = 0,
  DISP_INTF_LCD,
  DISP_INTF_BT1120,
  DISP_INTF_BT656,
  DISP_INTF_YPBPR,
  DISP_INTF_RGB,
  DISP_INTF_CVBS,
  DISP_INTF_SVIDEO,
  DISP_INTF_VGA,
  DISP_INTF_MIPI,
  DISP_INTF_PANEL,
  DISP_INTF_BUTT,
};

[mini, lite, full] struct PropertyObject {
  std::string name;
  unsigned int propId;
  unsigned long value;
};

[mini, lite, full] struct DisplayCapability {
  std::string name;
  ohos.hdi.display.composer.v1_0.InterfaceType type;
  unsigned int phyWidth;
  unsigned int phyHeight;
  unsigned int supportLayers;
  unsigned int virtualDispCount;
  boolean supportWriteBack;
  unsigned int propertyCount;
  ohos.hdi.display.composer.v1_0.PropertyObject[] props;
};

[mini, lite, full] struct DisplayModeInfo {
  int width;
  int height;
  unsigned int freshRate;
  int id;
};

[mini, lite, full] struct LayerInfo {
  int width;
  int height;
  ohos.hdi.display.composer.v1_0.LayerType type;
  int bpp;
  ohos.hdi.display.composer.v1_0.PixelFormat pixFormat;
};

[mini, lite, full] struct LayerAlpha {
  boolean enGlobalAlpha;
  boolean enPixelAlpha;
  unsigned char alpha0;
  unsigned char alpha1;
  unsigned char gAlpha;
};

[mini, lite, full] struct IRect {
  int x;
  int y;
  int w;
  int h;
};

[mini, lite, full] struct ISurface {
  unsigned long phyAddr;
  int height;
  int width;
  int stride;
  ohos.hdi.display.composer.v1_0.PixelFormat enColorFmt;
  boolean bYCbCrClut;
  boolean bAlphaMax255;
  boolean bAlphaExt1555;
  unsigned char alpha0;
  unsigned char alpha1;
  unsigned long cbcrPhyAddr;
  int cbcrStride;
  unsigned long clutPhyAddr;
};

[mini, lite, full] struct ILine {
  int x0;
  int y0;
  int x1;
  int y1;
  unsigned int color;
};

[mini, lite, full] struct ICircle {
  int x;
  int y;
  int r;
  unsigned int color;
};

[mini, lite, full] struct Rectangle {
  ohos.hdi.display.composer.v1_0.IRect rect;
  unsigned int color;
};

[mini, lite, full] struct GfxOpt {
  boolean enGlobalAlpha;
  unsigned int globalAlpha;
  boolean enPixelAlpha;
  ohos.hdi.display.composer.v1_0.BlendType blendType;
  ohos.hdi.display.composer.v1_0.ColorKey colorKeyFrom;
  boolean enableRop;
  ohos.hdi.display.composer.v1_0.RopType colorRopType;
  ohos.hdi.display.composer.v1_0.RopType alphaRopType;
  boolean enableScale;
  ohos.hdi.display.composer.v1_0.TransformType rotateType;
  ohos.hdi.display.composer.v1_0.MirrorType mirrorType;
};

[mini, lite, full] enum ColorGamut : int {
  COLOR_GAMUT_INVALID = -1,
  COLOR_GAMUT_NATIVE = 0,
  COLOR_GAMUT_STANDARD_BT601 = 1,
  COLOR_GAMUT_STANDARD_BT709 = 2,
  COLOR_GAMUT_DCI_P3 = 3,
  COLOR_GAMUT_SRGB = 4,
  COLOR_GAMUT_ADOBE_RGB = 5,
  COLOR_GAMUT_DISPLAY_P3 = 6,
  COLOR_GAMUT_BT2020 = 7,
  COLOR_GAMUT_BT2100_PQ = 8,
  COLOR_GAMUT_BT2100_HLG = 9,
  COLOR_GAMUT_DISPLAY_BT2020 = 10,
};

[mini, lite, full] enum GamutMap : int {
  GAMUT_MAP_CONSTANT = 0,
  GAMUT_MAP_EXPANSION = 1,
  GAMUT_MAP_HDR_CONSTANT = 2,
  GAMUT_MAP_HDR_EXPANSION = 3,
};

[mini, lite, full] enum ColorDataSpace : int {
  COLOR_DATA_SPACE_UNKNOWN = 0,
  GAMUT_BT601 = 0x00000001,
  GAMUT_BT709 = 0x00000002,
  GAMUT_DCI_P3 = 0x00000003,
  GAMUT_SRGB = 0x00000004,
  GAMUT_ADOBE_RGB = 0x00000005,
  GAMUT_DISPLAY_P3 = 0x00000006,
  GAMUT_BT2020 = 0x00000007,
  GAMUT_BT2100_PQ = 0x00000008,
  GAMUT_BT2100_HLG = 0x00000009,
  GAMUT_DISPLAY_BT2020 = 0x0000000a,
  TRANSFORM_FUNC_UNSPECIFIED = 0x00000100,
  TRANSFORM_FUNC_LINEAR = 0x00000200,
  TRANSFORM_FUNC_SRGB = 0x00000300,
  TRANSFORM_FUNC_SMPTE_170M = 0x00000400,
  TRANSFORM_FUNC_GM2_2 = 0x00000500,
  TRANSFORM_FUNC_GM2_6 = 0x00000600,
  TRANSFORM_FUNC_GM2_8 = 0x00000700,
  TRANSFORM_FUNC_ST2084 = 0x00000800,
  TRANSFORM_FUNC_HLG = 0x00000900,
  PRECISION_UNSPECIFIED = 0x00010000,
  PRECISION_FULL = 0x00020000,
  PRESION_LIMITED = 0x00030000,
  PRESION_EXTENDED = 0x00040000,
  BT601_SMPTE170M_FULL = 1 | 1024 | 131072,
  BT601_SMPTE170M_LIMITED = 1 | 1024 | 196608,
  BT709_LINEAR_FULL = 2 | 512 | 131072,
  BT709_LINEAR_EXTENDED = 2 | 512 | 262144,
  BT709_SRGB_FULL = 2 | 768 | 131072,
  BT709_SRGB_EXTENDED = 2 | 768 | 262144,
  BT709_SMPTE170M_LIMITED = 2 | 1024 | 196608,
  DCI_P3_LINEAR_FULL = 3 | 512 | 131072,
  DCI_P3_GAMMA26_FULL = 3 | 1536 | 131072,
  DISPLAY_P3_LINEAR_FULL = 6 | 512 | 131072,
  DCI_P3_SRGB_FULL = 3 | 768 | 131072,
  ADOBE_RGB_GAMMA22_FULL = 5 | 1280 | 131072,
  BT2020_LINEAR_FULL = 7 | 512 | 131072,
  BT2020_SRGB_FULL = 7 | 768 | 131072,
  BT2020_SMPTE170M_FULL = 7 | 1024 | 131072,
  BT2020_ST2084_FULL = 7 | 2048 | 131072,
  BT2020_HLG_FULL = 7 | 2304 | 131072,
  BT2020_ST2084_LIMITED = 7 | 2048 | 196608,
};

[mini, lite, full] enum HDRFormat : int {
  NOT_SUPPORT_HDR = 0,
  DOLBY_VISION = 1,
  HDR10 = 2,
  HLG = 3,
  HDR10_PLUS = 4,
  HDR_VIVID = 5,
};

[mini, lite, full] struct HDRCapability {
  unsigned int formatCount;
  ohos.hdi.display.composer.v1_0.HDRFormat[] formats;
  float maxLum;
  float maxAverageLum;
  float minLum;
};

[mini, lite, full] enum HDRMetadataKey : int {
  MATAKEY_RED_PRIMARY_X = 0,
  MATAKEY_RED_PRIMARY_Y = 1,
  MATAKEY_GREEN_PRIMARY_X = 2,
  MATAKEY_GREEN_PRIMARY_Y = 3,
  MATAKEY_BLUE_PRIMARY_X = 4,
  MATAKEY_BLUE_PRIMARY_Y = 5,
  MATAKEY_WHITE_PRIMARY_X = 6,
  MATAKEY_WHITE_PRIMARY_Y = 7,
  MATAKEY_MAX_LUMINANCE = 8,
  MATAKEY_MIN_LUMINANCE = 9,
  MATAKEY_MAX_CONTENT_LIGHT_LEVEL = 10,
  MATAKEY_MAX_FRAME_AVERAGE_LIGHT_LEVEL = 11,
  MATAKEY_HDR10_PLUS = 12,
  MATAKEY_HDR_VIVID = 13,
};

[mini, lite, full] struct HDRMetaData {
  ohos.hdi.display.composer.v1_0.HDRMetadataKey key;
  float value;
};

[mini, lite, full] enum PresentTimestampType : int {
  HARDWARE_DISPLAY_PTS_UNSUPPORTED = 0,
  HARDWARE_DISPLAY_PTS_DELAY = 1 << 0,
  HARDWARE_DISPLAY_PTS_TIMESTAMP = 1 << 1,
};

[mini, lite, full] enum MaskInfo : int {
  LAYER_NORAML = 0,
  LAYER_HBM_SYNC = 1,
};

[mini, lite, full] struct PresentTimestamp {
  ohos.hdi.display.composer.v1_0.PresentTimestampType type;
  long time;
};

[mini, lite, full] struct ExtDataHandle {
  int fd;
  unsigned int reserveInts;
  int[] reserve;
};

[mini, lite, full] struct YUVDescInfo {
  unsigned long baseAddr;
  unsigned int yOffset;
  unsigned int uOffset;
  unsigned int vOffset;
  unsigned int yStride;
  unsigned int uvStride;
  unsigned int uvStep;
};

[mini, lite, full] struct HdifdInfo {
  int id;
  OHOS.HDI.Display.HdifdParcelable hdiFd;
};

[mini, lite, full] struct LayerColor {
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char a;
};


AST[name: HdifdParcelable file: ]
package OHOS.HDI.Display;


