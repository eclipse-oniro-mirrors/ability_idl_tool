/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_INTELLIGENT_VOICE_ENGINE_V1_0_INTELLVOICEENGINEADAPTERPROXY_H
#define OHOS_HDI_INTELLIGENT_VOICE_ENGINE_V1_0_INTELLVOICEENGINEADAPTERPROXY_H

#include "v1_0/iintell_voice_engine_adapter.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Engine {
namespace V1_0 {

class IntellVoiceEngineAdapterProxy : public IProxyBroker<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter> {
public:
    explicit IntellVoiceEngineAdapterProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter>(remote) {
    }
    virtual ~IntellVoiceEngineAdapterProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t SetCallback(const sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineCallback>& engineCallback) override;

    int32_t Attach(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& info) override;

    int32_t Detach() override;

    int32_t SetParameter(const std::string& keyValueList) override;

    int32_t GetParameter(const std::string& keyList, std::string& valueList) override;

    int32_t Start(const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& info) override;

    int32_t Stop() override;

    int32_t WriteAudio(const std::vector<uint8_t>& buffer) override;

    int32_t Read(OHOS::HDI::IntelligentVoice::Engine::V1_0::ContentType type, sptr<Ashmem>& buffer) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t SetCallback_(const sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineCallback>& engineCallback, const sptr<IRemoteObject> remote);

    static int32_t Attach_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& info,
         const sptr<IRemoteObject> remote);

    static int32_t Detach_(const sptr<IRemoteObject> remote);

    static int32_t SetParameter_(const std::string& keyValueList, const sptr<IRemoteObject> remote);

    static int32_t GetParameter_(const std::string& keyList, std::string& valueList, const sptr<IRemoteObject> remote);

    static int32_t Start_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& info,
         const sptr<IRemoteObject> remote);

    static int32_t Stop_(const sptr<IRemoteObject> remote);

    static int32_t WriteAudio_(const std::vector<uint8_t>& buffer, const sptr<IRemoteObject> remote);

    static int32_t Read_(OHOS::HDI::IntelligentVoice::Engine::V1_0::ContentType type, sptr<Ashmem>& buffer,
         const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy> delegator_;
};

} // V1_0
} // Engine
} // IntelligentVoice
} // HDI
} // OHOS

#endif // OHOS_HDI_INTELLIGENT_VOICE_ENGINE_V1_0_INTELLVOICEENGINEADAPTERPROXY_H

