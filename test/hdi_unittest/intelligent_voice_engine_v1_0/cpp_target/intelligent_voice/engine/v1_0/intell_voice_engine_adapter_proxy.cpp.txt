/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_engine_adapter_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    intell_voice_engine_adapter_proxy

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Engine {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetCallback(const sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineCallback>& engineCallback)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetCallback_(engineCallback, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Attach(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& info)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Attach_(info, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Detach()
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Detach_(Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetParameter(const std::string& keyValueList)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetParameter_(keyValueList, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetParameter(const std::string& keyList, std::string& valueList)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetParameter_(keyList, valueList, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Start(const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& info)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Start_(info, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Stop()
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Stop_(Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::WriteAudio(const std::vector<uint8_t>& buffer)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::WriteAudio_(buffer, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Read(OHOS::HDI::IntelligentVoice::Engine::V1_0::ContentType type, sptr<Ashmem>& buffer)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Read_(type, buffer, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetCallback_(const sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineCallback>& engineCallback, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (engineCallback == nullptr) {
        HDF_LOGE("%{public}s: parameter engineCallback is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(engineCallback, OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write engineCallback failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_SET_CALLBACK, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Attach_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& info, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfoBlockMarshalling(intellVoiceEngineAdapterData, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_ATTACH, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Detach_(const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_DETACH, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::SetParameter_(const std::string& keyValueList, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterData.WriteCString(keyValueList.c_str())) {
        HDF_LOGE("%{public}s: write keyValueList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_SET_PARAMETER, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetParameter_(const std::string& keyList, std::string& valueList, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterData.WriteCString(keyList.c_str())) {
        HDF_LOGE("%{public}s: write keyList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_GET_PARAMETER, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    const char* valueListCp = intellVoiceEngineAdapterReply.ReadCString();
    if (valueListCp == nullptr) {
        HDF_LOGE("%{public}s: read valueList failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    valueList = valueListCp;

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Start_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& info, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfoBlockMarshalling(intellVoiceEngineAdapterData, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_START, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Stop_(const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_STOP, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::WriteAudio_(const std::vector<uint8_t>& buffer, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(intellVoiceEngineAdapterData, buffer)) {
        HDF_LOGE("%{public}s: failed to write buffer", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_WRITE_AUDIO, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::Read_(OHOS::HDI::IntelligentVoice::Engine::V1_0::ContentType type, sptr<Ashmem>& buffer, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterData.WriteUint64(static_cast<uint64_t>(type))) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_READ, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    buffer = intellVoiceEngineAdapterReply.ReadAshmem();
    if (buffer == nullptr) {
        HDF_LOGE("%{public}s: failed to read ashmem object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineAdapterRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineAdapterData;
    MessageParcel intellVoiceEngineAdapterReply;
    MessageOption intellVoiceEngineAdapterOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineAdapterData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineAdapterRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_ADAPTER_GET_VERSION, intellVoiceEngineAdapterData, intellVoiceEngineAdapterReply, intellVoiceEngineAdapterOption);
    if (intellVoiceEngineAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineAdapterRet);
        return intellVoiceEngineAdapterRet;
    }

    if (!intellVoiceEngineAdapterReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineAdapterReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineAdapterRet;
}

} // V1_0
} // Engine
} // IntelligentVoice
} // HDI
} // OHOS
