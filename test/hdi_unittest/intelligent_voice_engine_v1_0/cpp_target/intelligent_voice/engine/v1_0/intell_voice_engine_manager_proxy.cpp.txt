/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_engine_manager_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>
#include "intelligent_voice/engine/v1_0/intell_voice_engine_adapter_proxy.h"

#define HDF_LOG_TAG    intell_voice_engine_manager_proxy

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Engine {
namespace V1_0 {

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);

sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::Get(bool isStub)
{
    return IIntellVoiceEngineManager::Get("intell_voice_engine_manager_service", isStub);
}

sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "intell_voice_engine_manager_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy> proxy = new OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t intellVoiceEngineManagerRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::Reconnect(
    sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}
int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetAdapterDescriptors(std::vector<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor>& descs)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetAdapterDescriptors_(descs, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::CreateAdapter(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& descriptor, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter>& adapter)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::CreateAdapter_(descriptor, adapter, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::ReleaseAdapter(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& descriptor)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::ReleaseAdapter_(descriptor, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetAdapterDescriptors_(std::vector<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor>& descs, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineManagerData;
    MessageParcel intellVoiceEngineManagerReply;
    MessageOption intellVoiceEngineManagerOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineManagerData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineManagerData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineManagerRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_MANAGER_GET_ADAPTER_DESCRIPTORS, intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    if (!ReadPodArray(intellVoiceEngineManagerReply, descs)) {
        HDF_LOGE("%{public}s: failed to read descs", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::CreateAdapter_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& descriptor, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter>& adapter, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineManagerData;
    MessageParcel intellVoiceEngineManagerReply;
    MessageOption intellVoiceEngineManagerOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineManagerData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptorBlockMarshalling(intellVoiceEngineManagerData, descriptor)) {
        HDF_LOGE("%{public}s: write descriptor failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineManagerRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_MANAGER_CREATE_ADAPTER, intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    sptr<IRemoteObject> adapterRemote = intellVoiceEngineManagerReply.ReadRemoteObject();
    if (adapterRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    adapter = new OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterProxy(adapterRemote);
    if (adapter == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::ReleaseAdapter_(const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& descriptor, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineManagerData;
    MessageParcel intellVoiceEngineManagerReply;
    MessageOption intellVoiceEngineManagerOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineManagerData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptorBlockMarshalling(intellVoiceEngineManagerData, descriptor)) {
        HDF_LOGE("%{public}s: write descriptor failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineManagerRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_MANAGER_RELEASE_ADAPTER, intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceEngineManagerData;
    MessageParcel intellVoiceEngineManagerReply;
    MessageOption intellVoiceEngineManagerOption(MessageOption::TF_SYNC);

    if (!intellVoiceEngineManagerData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceEngineManagerRet = remote->SendRequest(CMD_INTELL_VOICE_ENGINE_MANAGER_GET_VERSION, intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    if (!intellVoiceEngineManagerReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineManagerReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}

} // V1_0
} // Engine
} // IntelligentVoice
} // HDI
} // OHOS
