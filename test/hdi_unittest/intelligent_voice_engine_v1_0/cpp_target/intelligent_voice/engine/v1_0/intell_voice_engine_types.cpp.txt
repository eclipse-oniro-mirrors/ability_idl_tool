/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_engine_types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Engine {
namespace V1_0 {



bool IntellVoiceEngineAdapterDescriptorBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor))) {
        return false;
    }
    return true;
}

bool IntellVoiceEngineAdapterDescriptorBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor& dataBlock)
{
    const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor *dataBlockPtr = reinterpret_cast<const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor), dataBlockPtr, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor)) != EOK) {
        return false;
    }
    return true;
}

bool IntellVoiceEngineAdapterInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& dataBlock)
{
    if (!data.WriteCString(dataBlock.wakeupPhrase.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.wakeupPhrase failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.minBufSize)) {
        HDF_LOGE("%{public}s: write dataBlock.minBufSize failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.sampleChannels)) {
        HDF_LOGE("%{public}s: write dataBlock.sampleChannels failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.bitsPerSample)) {
        HDF_LOGE("%{public}s: write dataBlock.bitsPerSample failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.sampleRate)) {
        HDF_LOGE("%{public}s: write dataBlock.sampleRate failed!", __func__);
        return false;
    }
    return true;
}

bool IntellVoiceEngineAdapterInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterInfo& dataBlock)
{
    const char* wakeupPhraseCp = data.ReadCString();
    if (wakeupPhraseCp == nullptr) {
        HDF_LOGE("%{public}s: read wakeupPhraseCp failed", __func__);
        return false;
    }
    dataBlock.wakeupPhrase = wakeupPhraseCp;

    if (!data.ReadInt32(dataBlock.minBufSize)) {
        HDF_LOGE("%{public}s: read dataBlock.minBufSize failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.sampleChannels)) {
        HDF_LOGE("%{public}s: read dataBlock.sampleChannels failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.bitsPerSample)) {
        HDF_LOGE("%{public}s: read dataBlock.bitsPerSample failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.sampleRate)) {
        HDF_LOGE("%{public}s: read dataBlock.sampleRate failed!", __func__);
        return false;
    }
    return true;
}

bool StartInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo))) {
        return false;
    }
    return true;
}

bool StartInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo& dataBlock)
{
    const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo *dataBlockPtr = reinterpret_cast<const OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo), dataBlockPtr, sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::StartInfo)) != EOK) {
        return false;
    }
    return true;
}

bool IntellVoiceEngineCallBackEventBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineCallBackEvent& dataBlock)
{
    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.msgId))) {
        HDF_LOGE("%{public}s: write dataBlock.msgId failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.result))) {
        HDF_LOGE("%{public}s: write dataBlock.result failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.info.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.info failed!", __func__);
        return false;
    }
    return true;
}

bool IntellVoiceEngineCallBackEventBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineCallBackEvent& dataBlock)
{
    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.msgId failed!", __func__);
            return false;
        }
        dataBlock.msgId = static_cast<enum IntellVoiceEngineMessageType>(enumTmp);
    }

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.result failed!", __func__);
            return false;
        }
        dataBlock.result = static_cast<enum IntellVoiceEngineErrors>(enumTmp);
    }

    const char* infoCp = data.ReadCString();
    if (infoCp == nullptr) {
        HDF_LOGE("%{public}s: read infoCp failed", __func__);
        return false;
    }
    dataBlock.info = infoCp;
    return true;
}

} // V1_0
} // Engine
} // IntelligentVoice
} // HDI
} // OHOS
