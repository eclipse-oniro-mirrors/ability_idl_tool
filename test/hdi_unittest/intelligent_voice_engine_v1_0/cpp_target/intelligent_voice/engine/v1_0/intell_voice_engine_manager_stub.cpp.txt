/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/intell_voice_engine_manager_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <object_collector.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    intell_voice_engine_manager_stub

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Engine {
namespace V1_0 {
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::Get(bool isStub)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::Get("intell_voice_engine_manager_service", isStub);
}

sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "intell_voice_engine_manager_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager *>(impl);
}


OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStub(const sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> &impl)
    : IPCObjectStub(OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::~IntellVoiceEngineManagerStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_INTELL_VOICE_ENGINE_MANAGER_GET_VERSION:
            return IntellVoiceEngineManagerStubGetVersion(data, reply, option);
        case CMD_INTELL_VOICE_ENGINE_MANAGER_GET_ADAPTER_DESCRIPTORS:
            return IntellVoiceEngineManagerStubGetAdapterDescriptors(data, reply, option);
        case CMD_INTELL_VOICE_ENGINE_MANAGER_CREATE_ADAPTER:
            return IntellVoiceEngineManagerStubCreateAdapter(data, reply, option);
        case CMD_INTELL_VOICE_ENGINE_MANAGER_RELEASE_ADAPTER:
            return IntellVoiceEngineManagerStubReleaseAdapter(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetAdapterDescriptors(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetAdapterDescriptors_(intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubCreateAdapter(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubCreateAdapter_(intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubReleaseAdapter(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubReleaseAdapter_(intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetVersion(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption)
{
    return OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetVersion_(intellVoiceEngineManagerData, intellVoiceEngineManagerReply, intellVoiceEngineManagerOption, impl_);
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetAdapterDescriptors_(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> impl)
{
    if (intellVoiceEngineManagerData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool intellVoiceEngineManagerMemSet = false;
    if (!intellVoiceEngineManagerData.ReadBool(intellVoiceEngineManagerMemSet)) {
        HDF_LOGE("%{public}s: failed to read intellVoiceEngineManagerMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor> descs;
    if (intellVoiceEngineManagerMemSet) {
        uint32_t capacity = 0;
        if (!intellVoiceEngineManagerData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor), HDF_ERR_INVALID_PARAM);
        descs.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceEngineManagerRet = impl->GetAdapterDescriptors(descs);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    if (!WritePodArray(intellVoiceEngineManagerReply, descs)) {
        HDF_LOGE("%{public}s: failed to write descs", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubCreateAdapter_(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> impl)
{
    if (intellVoiceEngineManagerData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor descriptor;
    if (!IntellVoiceEngineAdapterDescriptorBlockUnmarshalling(intellVoiceEngineManagerData, descriptor)) {
        HDF_LOGE("%{public}s: read descriptor failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter> adapter;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceEngineManagerRet = impl->CreateAdapter(descriptor, adapter);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    if (adapter == nullptr) {
        HDF_LOGE("%{public}s: parameter adapter is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineManagerReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(adapter, OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineAdapter::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write adapter failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubReleaseAdapter_(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> impl)
{
    if (intellVoiceEngineManagerData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineAdapterDescriptor descriptor;
    if (!IntellVoiceEngineAdapterDescriptorBlockUnmarshalling(intellVoiceEngineManagerData, descriptor)) {
        HDF_LOGE("%{public}s: read descriptor failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceEngineManagerRet = impl->ReleaseAdapter(descriptor);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    return intellVoiceEngineManagerRet;
}

int32_t OHOS::HDI::IntelligentVoice::Engine::V1_0::IntellVoiceEngineManagerStub::IntellVoiceEngineManagerStubGetVersion_(MessageParcel& intellVoiceEngineManagerData, MessageParcel& intellVoiceEngineManagerReply, MessageOption& intellVoiceEngineManagerOption, sptr<OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager> impl)
{
    if (intellVoiceEngineManagerData.ReadInterfaceToken() != OHOS::HDI::IntelligentVoice::Engine::V1_0::IIntellVoiceEngineManager::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t intellVoiceEngineManagerRet = impl->GetVersion(majorVer, minorVer);
    if (intellVoiceEngineManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceEngineManagerRet);
        return intellVoiceEngineManagerRet;
    }

    if (!intellVoiceEngineManagerReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!intellVoiceEngineManagerReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceEngineManagerRet;
}
} // V1_0
} // Engine
} // IntelligentVoice
} // HDI
} // OHOS
