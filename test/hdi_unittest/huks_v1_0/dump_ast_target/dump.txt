AST[name: IHuks file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/huks_v1_0/foo/huks/v1_0/IHuks.idl]
package ohos.hdi.huks.v1_0;

import ohos.hdi.huks.v1_0.IHuksTypes;

[mini, lite, full] interface IHuks {
    [mini, lite, full] ModuleInit();

    [mini, lite, full] ModuleDestroy();

    [mini, lite, full] GenerateKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob keyAlias,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob keyIn,
      [out] ohos.hdi.huks.v1_0.HuksBlob encKeyOut);

    [mini, lite, full] ImportKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob keyAlias,
      [in] ohos.hdi.huks.v1_0.HuksBlob key,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob encKeyOut);

    [mini, lite, full] ImportWrappedKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob wrappingKeyAlias,
      [in] ohos.hdi.huks.v1_0.HuksBlob wrappingEncKey,
      [in] ohos.hdi.huks.v1_0.HuksBlob wrappedKeyData,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob encKeyOut);

    [mini, lite, full] ExportPublicKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob keyOut);

    [mini, lite, full] Init(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob handle,
      [out] ohos.hdi.huks.v1_0.HuksBlob token);

    [mini, lite, full] Update(
      [in] ohos.hdi.huks.v1_0.HuksBlob handle,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob inData,
      [out] ohos.hdi.huks.v1_0.HuksBlob outData);

    [mini, lite, full] Finish(
      [in] ohos.hdi.huks.v1_0.HuksBlob handle,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob inData,
      [out] ohos.hdi.huks.v1_0.HuksBlob outData);

    [mini, lite, full] Abort(
      [in] ohos.hdi.huks.v1_0.HuksBlob handle,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet);

    [mini, lite, full] CheckKeyValidity(
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey);

    [mini, lite, full] AttestKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob certChain);

    [mini, lite, full] GenerateRandom(
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob random);

    [mini, lite, full] Sign(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob srcData,
      [out] ohos.hdi.huks.v1_0.HuksBlob signature);

    [mini, lite, full] Verify(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob srcData,
      [in] ohos.hdi.huks.v1_0.HuksBlob signature);

    [mini, lite, full] Encrypt(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob plainText,
      [out] ohos.hdi.huks.v1_0.HuksBlob cipherText);

    [mini, lite, full] Decrypt(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob cipherText,
      [out] ohos.hdi.huks.v1_0.HuksBlob plainText);

    [mini, lite, full] AgreeKey(
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob encPrivateKey,
      [in] ohos.hdi.huks.v1_0.HuksBlob peerPublicKey,
      [out] ohos.hdi.huks.v1_0.HuksBlob agreedKey);

    [mini, lite, full] DeriveKey(
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob encKdfKey,
      [out] ohos.hdi.huks.v1_0.HuksBlob derivedKey);

    [mini, lite, full] Mac(
      [in] ohos.hdi.huks.v1_0.HuksBlob encKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [in] ohos.hdi.huks.v1_0.HuksBlob srcData,
      [out] ohos.hdi.huks.v1_0.HuksBlob mac);

    [mini, lite, full] UpgradeKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob encOldKey,
      [in] ohos.hdi.huks.v1_0.HuksParamSet paramSet,
      [out] ohos.hdi.huks.v1_0.HuksBlob encNewKey);

    [mini, lite, full] ExportChipsetPlatformPublicKey(
      [in] ohos.hdi.huks.v1_0.HuksBlob salt,
      [in] ohos.hdi.huks.v1_0.HuksChipsetPlatformDecryptScene scene,
      [out] ohos.hdi.huks.v1_0.HuksBlob publicKey);
}


AST[name: IHuksTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/huks_v1_0/foo/huks/v1_0/IHuksTypes.idl]
package ohos.hdi.huks.v1_0;

[mini, lite, full] struct HuksBlob {
  unsigned char[] data;
};

[mini, lite, full] struct HuksParamSet {
  unsigned char[] data;
};

[mini, lite, full] enum HuksChipsetPlatformDecryptScene : int {
  HUKS_CHIPSET_PLATFORM_DECRYPT_SCENCE_TA_TO_TA = 1,
};


