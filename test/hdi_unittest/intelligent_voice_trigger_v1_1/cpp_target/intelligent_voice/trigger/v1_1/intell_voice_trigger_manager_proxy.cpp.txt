/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/intell_voice_trigger_manager_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>
#include "intelligent_voice/trigger/v1_1/intell_voice_trigger_adapter_proxy.h"

#define HDF_LOG_TAG    intell_voice_trigger_manager_proxy

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Trigger {
namespace V1_1 {


template<typename ChildType, typename ParentType>
static sptr<ChildType> CastFromTemplate(const sptr<ParentType> &parent)
{
    if (parent == nullptr) {
        HDF_LOGE("%{public}s:parent is nullptr!", __func__);
        return nullptr;
    }

    if (!parent->IsProxy()) {
        HDF_LOGE("%{public}s:not proxy, not support castfrom!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = OHOS::HDI::hdi_objcast<ParentType>(parent);
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:hdi_objcast failed!", __func__);
        return nullptr;
    }

    sptr<ChildType> proxy = OHOS::HDI::hdi_facecast<ChildType>(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:hdi_facecast failed!", __func__);
        return nullptr;
    }

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t intellVoiceTriggerManagerRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (intellVoiceTriggerManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager> OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager::Get(bool isStub)
{
    return IIntellVoiceTriggerManager::Get("intell_voice_trigger_manager_service", isStub);
}

sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager> OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "intell_voice_trigger_manager_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy> proxy = new OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t intellVoiceTriggerManagerRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (intellVoiceTriggerManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::Reconnect(
    sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager> OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager::CastFrom(const sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerManager> &parent)
{
    return CastFromTemplate<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager, OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerManager>(parent);
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::LoadAdapter_V1_1(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& descriptor, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerAdapter>& adapter)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::LoadAdapter_V1_1_(descriptor, adapter, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::LoadAdapter(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& descriptor, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerAdapter>& adapter)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerManagerProxy::LoadAdapter_(descriptor, adapter, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::UnloadAdapter(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& descriptor)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerManagerProxy::UnloadAdapter_(descriptor, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerManagerProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerManagerProxy::LoadAdapter_V1_1_(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptor& descriptor, sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerAdapter>& adapter, const sptr<IRemoteObject> remote)
{
    MessageParcel intellVoiceTriggerManagerData;
    MessageParcel intellVoiceTriggerManagerReply;
    MessageOption intellVoiceTriggerManagerOption(MessageOption::TF_SYNC);

    if (!intellVoiceTriggerManagerData.WriteInterfaceToken(OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerManager::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerAdapterDsecriptorBlockMarshalling(intellVoiceTriggerManagerData, descriptor)) {
        HDF_LOGE("%{public}s: write descriptor failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t intellVoiceTriggerManagerRet = remote->SendRequest(CMD_INTELL_VOICE_TRIGGER_MANAGER_LOAD_ADAPTER__V1_1, intellVoiceTriggerManagerData, intellVoiceTriggerManagerReply, intellVoiceTriggerManagerOption);
    if (intellVoiceTriggerManagerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, intellVoiceTriggerManagerRet);
        return intellVoiceTriggerManagerRet;
    }

    sptr<IRemoteObject> adapterRemote = intellVoiceTriggerManagerReply.ReadRemoteObject();
    if (adapterRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    adapter = new OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerAdapterProxy(adapterRemote);
    if (adapter == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return intellVoiceTriggerManagerRet;
}

} // V1_1
} // Trigger
} // IntelligentVoice
} // HDI
} // OHOS
