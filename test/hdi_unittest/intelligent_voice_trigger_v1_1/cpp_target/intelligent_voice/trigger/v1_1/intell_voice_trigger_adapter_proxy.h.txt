/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_1_INTELLVOICETRIGGERADAPTERPROXY_H
#define OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_1_INTELLVOICETRIGGERADAPTERPROXY_H

#include "v1_0/intell_voice_trigger_adapter_proxy.h"
#include "v1_1/iintell_voice_trigger_adapter.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace IntelligentVoice {
namespace Trigger {
namespace V1_1 {

class IntellVoiceTriggerAdapterProxy : public IProxyBroker<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerAdapter> {
public:
    explicit IntellVoiceTriggerAdapterProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IIntellVoiceTriggerAdapter>(remote) {
    }
    virtual ~IntellVoiceTriggerAdapterProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t SetParams(const std::string& key, const std::string& value) override;

    int32_t GetParams(const std::string& key, std::string& value) override;

    int32_t GetProperties(OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerProperties& properties) override;

    int32_t LoadModel(const OHOS::HDI::IntelligentVoice::Trigger::V1_0::IntellVoiceTriggerModel& model,
         const sptr<OHOS::HDI::IntelligentVoice::Trigger::V1_0::IIntellVoiceTriggerCallback>& triggerCallback, int32_t cookie, int32_t& handle) override;

    int32_t UnloadModel(int32_t handle) override;

    int32_t Start(int32_t handle) override;

    int32_t Stop(int32_t handle) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t SetParams_(const std::string& key, const std::string& value, const sptr<IRemoteObject> remote);

    static int32_t GetParams_(const std::string& key, std::string& value, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::IntelligentVoice::Trigger::V1_1::IntellVoiceTriggerAdapterProxy> delegator_;
};

} // V1_1
} // Trigger
} // IntelligentVoice
} // HDI
} // OHOS

#endif // OHOS_HDI_INTELLIGENT_VOICE_TRIGGER_V1_1_INTELLVOICETRIGGERADAPTERPROXY_H

