AST[name: IWififenceInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_wififence_v1_0/foo/location/lpfence/wififence/v1_0/IWififenceInterface.idl]
package ohos.hdi.location.lpfence.wififence.v1_0;

import ohos.hdi.location.lpfence.wififence.v1_0.IWififenceCallback;
import ohos.hdi.location.lpfence.wififence.v1_0.WififenceTypes;

[mini, lite, full] interface IWififenceInterface {
    [mini, lite, full] RegisterWififenceCallback(
      [in] ohos.hdi.location.lpfence.wififence.v1_0.IWififenceCallback callbackObj);

    [mini, lite, full] UnregisterWififenceCallback(
      [in] ohos.hdi.location.lpfence.wififence.v1_0.IWififenceCallback callbackObj);

    [mini, lite, full] AddWififences(
      [in] ohos.hdi.location.lpfence.wififence.v1_0.WififenceRequest[] wififence);

    [mini, lite, full] RemoveWififences(
      [in] int[] wififenceId);

    [mini, lite, full] GetWififenceStatus(
      [in] int wififenceId);

    [mini, lite, full] GetWififenceSize();
}


AST[name: IWififenceCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_wififence_v1_0/foo/location/lpfence/wififence/v1_0/IWififenceCallback.idl]
package ohos.hdi.location.lpfence.wififence.v1_0;

import ohos.hdi.location.lpfence.wififence.v1_0.WififenceTypes;

[mini, lite, full, callback] interface IWififenceCallback {
    [mini, lite, full, callback] OnWififenceChanged(
      [in] int wififenceId,
      [in] int transition,
      [in] long timestamp);

    [mini, lite, full, callback] OnGetWififenceSizeCb(
      [in] ohos.hdi.location.lpfence.wififence.v1_0.WififenceSize size);

    [mini, lite, full, callback] OnWififenceReset();
}


AST[name: WififenceTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_wififence_v1_0/foo/location/lpfence/wififence/v1_0/WififenceTypes.idl]
package ohos.hdi.location.lpfence.wififence.v1_0;

[mini, lite, full] enum WififenceTransition : int {
  WIFIFENCE_TRANSITION_ENTERED = (1 << 0),
  WIFIFENCE_TRANSITION_EXITED = (1 << 1),
};

[mini, lite, full] enum WififenceAlgoType : int {
  TYPE_ONE_BSSID = 1,
  TYPE_FP_MATCH = 2,
};

[mini, lite, full] struct WififenceRequest {
  int wififenceId;
  int algoType;
  unsigned char[] bssid;
};

[mini, lite, full] struct WififenceSize {
  unsigned int maxNum;
  unsigned int usedNum;
};


