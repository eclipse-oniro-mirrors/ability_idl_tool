/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_LOCATION_LPFENCE_WIFIFENCE_V1_0_WIFIFENCETYPES_H
#define OHOS_HDI_LOCATION_LPFENCE_WIFIFENCE_V1_0_WIFIFENCETYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Wififence {
namespace V1_0 {

using namespace OHOS;

enum WififenceTransition : int32_t {
    WIFIFENCE_TRANSITION_ENTERED = (1 << 0),
    WIFIFENCE_TRANSITION_EXITED = (1 << 1),
};

enum WififenceAlgoType : int32_t {
    TYPE_ONE_BSSID = 1,
    TYPE_FP_MATCH = 2,
};

struct WififenceRequest {
    int32_t wififenceId;
    int32_t algoType;
    std::vector<uint8_t> bssid;
};

struct WififenceSize {
    uint32_t maxNum;
    uint32_t usedNum;
} __attribute__ ((aligned(8)));

bool WififenceRequestBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Wififence::V1_0::WififenceRequest& dataBlock);

bool WififenceRequestBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Wififence::V1_0::WififenceRequest& dataBlock);

bool WififenceSizeBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Lpfence::Wififence::V1_0::WififenceSize& dataBlock);

bool WififenceSizeBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Lpfence::Wififence::V1_0::WififenceSize& dataBlock);

} // V1_0
} // Wififence
} // Lpfence
} // Location
} // HDI
} // OHOS

#endif // OHOS_HDI_LOCATION_LPFENCE_WIFIFENCE_V1_0_WIFIFENCETYPES_H

