/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Battery {
namespace V2_0 {



bool BatteryInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Battery::V2_0::BatteryInfo& dataBlock)
{
    if (!data.WriteInt32(dataBlock.capacity)) {
        HDF_LOGE("%{public}s: write dataBlock.capacity failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.voltage)) {
        HDF_LOGE("%{public}s: write dataBlock.voltage failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.temperature)) {
        HDF_LOGE("%{public}s: write dataBlock.temperature failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.healthState)) {
        HDF_LOGE("%{public}s: write dataBlock.healthState failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.pluggedType)) {
        HDF_LOGE("%{public}s: write dataBlock.pluggedType failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.pluggedMaxCurrent)) {
        HDF_LOGE("%{public}s: write dataBlock.pluggedMaxCurrent failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.pluggedMaxVoltage)) {
        HDF_LOGE("%{public}s: write dataBlock.pluggedMaxVoltage failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.chargeState)) {
        HDF_LOGE("%{public}s: write dataBlock.chargeState failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.chargeCounter)) {
        HDF_LOGE("%{public}s: write dataBlock.chargeCounter failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.totalEnergy)) {
        HDF_LOGE("%{public}s: write dataBlock.totalEnergy failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.curAverage)) {
        HDF_LOGE("%{public}s: write dataBlock.curAverage failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.curNow)) {
        HDF_LOGE("%{public}s: write dataBlock.curNow failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.remainEnergy)) {
        HDF_LOGE("%{public}s: write dataBlock.remainEnergy failed!", __func__);
        return false;
    }

    if (!data.WriteInt8(dataBlock.present)) {
        HDF_LOGE("%{public}s: write dataBlock.present failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.technology.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.technology failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.uevent.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.uevent failed!", __func__);
        return false;
    }
    return true;
}

bool BatteryInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Battery::V2_0::BatteryInfo& dataBlock)
{
    if (!data.ReadInt32(dataBlock.capacity)) {
        HDF_LOGE("%{public}s: read dataBlock.capacity failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.voltage)) {
        HDF_LOGE("%{public}s: read dataBlock.voltage failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.temperature)) {
        HDF_LOGE("%{public}s: read dataBlock.temperature failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.healthState)) {
        HDF_LOGE("%{public}s: read dataBlock.healthState failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.pluggedType)) {
        HDF_LOGE("%{public}s: read dataBlock.pluggedType failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.pluggedMaxCurrent)) {
        HDF_LOGE("%{public}s: read dataBlock.pluggedMaxCurrent failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.pluggedMaxVoltage)) {
        HDF_LOGE("%{public}s: read dataBlock.pluggedMaxVoltage failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.chargeState)) {
        HDF_LOGE("%{public}s: read dataBlock.chargeState failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.chargeCounter)) {
        HDF_LOGE("%{public}s: read dataBlock.chargeCounter failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.totalEnergy)) {
        HDF_LOGE("%{public}s: read dataBlock.totalEnergy failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.curAverage)) {
        HDF_LOGE("%{public}s: read dataBlock.curAverage failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.curNow)) {
        HDF_LOGE("%{public}s: read dataBlock.curNow failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.remainEnergy)) {
        HDF_LOGE("%{public}s: read dataBlock.remainEnergy failed!", __func__);
        return false;
    }

    if (!data.ReadInt8(dataBlock.present)) {
        HDF_LOGE("%{public}s: read dataBlock.present failed!", __func__);
        return false;
    }

    const char* technologyCp = data.ReadCString();
    if (technologyCp == nullptr) {
        HDF_LOGE("%{public}s: read technologyCp failed", __func__);
        return false;
    }
    dataBlock.technology = technologyCp;

    const char* ueventCp = data.ReadCString();
    if (ueventCp == nullptr) {
        HDF_LOGE("%{public}s: read ueventCp failed", __func__);
        return false;
    }
    dataBlock.uevent = ueventCp;
    return true;
}

bool ChargingLimitBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Battery::V2_0::ChargingLimit& dataBlock)
{
    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type))) {
        HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.protocol.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.protocol failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.value)) {
        HDF_LOGE("%{public}s: write dataBlock.value failed!", __func__);
        return false;
    }
    return true;
}

bool ChargingLimitBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Battery::V2_0::ChargingLimit& dataBlock)
{
    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
            return false;
        }
        dataBlock.type = static_cast<enum ChargingLimitType>(enumTmp);
    }

    const char* protocolCp = data.ReadCString();
    if (protocolCp == nullptr) {
        HDF_LOGE("%{public}s: read protocolCp failed", __func__);
        return false;
    }
    dataBlock.protocol = protocolCp;

    if (!data.ReadInt32(dataBlock.value)) {
        HDF_LOGE("%{public}s: read dataBlock.value failed!", __func__);
        return false;
    }
    return true;
}


} // V2_0
} // Battery
} // HDI
} // OHOS
