/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/battery_interface_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    battery_interface_service

namespace OHOS {
namespace HDI {
namespace Battery {
namespace V2_0 {
extern "C" IBatteryInterface *BatteryInterfaceImplGetInstance(void)
{
    return new (std::nothrow) BatteryInterfaceService();
}

int32_t BatteryInterfaceService::Register(const sptr<OHOS::HDI::Battery::V2_0::IBatteryCallback>& event)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::UnRegister()
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::ChangePath(const std::string& path)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetCapacity(int32_t& capacity)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetVoltage(int32_t& voltage)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetTemperature(int32_t& temperature)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetHealthState(OHOS::HDI::Battery::V2_0::BatteryHealthState& healthState)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetPluggedType(OHOS::HDI::Battery::V2_0::BatteryPluggedType& pluggedType)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetChargeState(OHOS::HDI::Battery::V2_0::BatteryChargeState& chargeState)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetPresent(bool& present)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetTechnology(std::string& technology)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetTotalEnergy(int32_t& totalEnergy)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetCurrentAverage(int32_t& curAverage)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetCurrentNow(int32_t& curNow)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetRemainEnergy(int32_t& remainEnergy)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetBatteryInfo(OHOS::HDI::Battery::V2_0::BatteryInfo& info)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::SetChargingLimit(const std::vector<OHOS::HDI::Battery::V2_0::ChargingLimit>& chargingLimit)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetChargeType(OHOS::HDI::Battery::V2_0::ChargeType& type)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::SetBatteryConfig(const std::string& sceneName, const std::string& value)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::GetBatteryConfig(const std::string& sceneName, std::string& value)
{
    return HDF_SUCCESS;
}

int32_t BatteryInterfaceService::IsBatteryConfigSupported(const std::string& sceneName, bool& value)
{
    return HDF_SUCCESS;
}

} // V2_0
} // Battery
} // HDI
} // OHOS
