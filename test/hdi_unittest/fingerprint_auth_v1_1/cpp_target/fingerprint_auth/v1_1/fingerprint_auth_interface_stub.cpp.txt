/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/fingerprint_auth_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <object_collector.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    fingerprint_auth_interface_stub

namespace OHOS {
namespace HDI {
namespace FingerprintAuth {
namespace V1_1 {


sptr<OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface> OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::Get(bool isStub)
{
    return OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::Get("fingerprint_auth_interface_service", isStub);
}

sptr<OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface> OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "fingerprint_auth_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface *>(impl);
}


OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStub(const sptr<OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface> &impl)
    : IPCObjectStub(OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::~FingerprintAuthInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_FINGERPRINT_AUTH_INTERFACE_GET_VERSION:
            return FingerprintAuthInterfaceStubGetVersion(data, reply, option);
        case CMD_FINGERPRINT_AUTH_INTERFACE_GET_EXECUTOR_LIST_V1_1:
            return FingerprintAuthInterfaceStubGetExecutorListV1_1(data, reply, option);
        case CMD_FINGERPRINT_AUTH_INTERFACE_GET_EXECUTOR_LIST:
            return FingerprintAuthInterfaceStubGetExecutorList(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetExecutorListV1_1(MessageParcel& fingerprintAuthInterfaceData, MessageParcel& fingerprintAuthInterfaceReply, MessageOption& fingerprintAuthInterfaceOption)
{
    return OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetExecutorListV1_1_(fingerprintAuthInterfaceData, fingerprintAuthInterfaceReply, fingerprintAuthInterfaceOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetExecutorList(MessageParcel& fingerprintAuthInterfaceData, MessageParcel& fingerprintAuthInterfaceReply, MessageOption& fingerprintAuthInterfaceOption)
{
    return OHOS::HDI::FingerprintAuth::V1_0::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetExecutorList_(fingerprintAuthInterfaceData, fingerprintAuthInterfaceReply, fingerprintAuthInterfaceOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetVersion(MessageParcel& fingerprintAuthInterfaceData, MessageParcel& fingerprintAuthInterfaceReply, MessageOption& fingerprintAuthInterfaceOption)
{
    return OHOS::HDI::FingerprintAuth::V1_0::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetVersion_(fingerprintAuthInterfaceData, fingerprintAuthInterfaceReply, fingerprintAuthInterfaceOption, impl_);
}

int32_t OHOS::HDI::FingerprintAuth::V1_1::FingerprintAuthInterfaceStub::FingerprintAuthInterfaceStubGetExecutorListV1_1_(MessageParcel& fingerprintAuthInterfaceData, MessageParcel& fingerprintAuthInterfaceReply, MessageOption& fingerprintAuthInterfaceOption, sptr<OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface> impl)
{
    if (fingerprintAuthInterfaceData.ReadInterfaceToken() != OHOS::HDI::FingerprintAuth::V1_1::IFingerprintAuthInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool fingerprintAuthInterfaceMemSet = false;
    if (!fingerprintAuthInterfaceData.ReadBool(fingerprintAuthInterfaceMemSet)) {
        HDF_LOGE("%{public}s: failed to read fingerprintAuthInterfaceMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<sptr<OHOS::HDI::FingerprintAuth::V1_1::IExecutor>> executorList;
    if (fingerprintAuthInterfaceMemSet) {
        uint32_t capacity = 0;
        if (!fingerprintAuthInterfaceData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(sptr<OHOS::HDI::FingerprintAuth::V1_1::IExecutor>), HDF_ERR_INVALID_PARAM);
        executorList.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t fingerprintAuthInterfaceRet = impl->GetExecutorListV1_1(executorList);
    if (fingerprintAuthInterfaceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, fingerprintAuthInterfaceRet);
        return fingerprintAuthInterfaceRet;
    }

    if (!fingerprintAuthInterfaceReply.WriteUint32(executorList.size())) {
        HDF_LOGE("%{public}s: write executorList size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : executorList) {
        if (it0 == nullptr) {
            HDF_LOGE("%{public}s: parameter it0 is nullptr!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }

        if (!fingerprintAuthInterfaceReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(it0, OHOS::HDI::FingerprintAuth::V1_1::IExecutor::GetDescriptor()))) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return fingerprintAuthInterfaceRet;
}
} // V1_1
} // FingerprintAuth
} // HDI
} // OHOS
