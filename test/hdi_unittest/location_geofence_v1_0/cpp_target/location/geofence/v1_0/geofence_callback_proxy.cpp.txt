/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/geofence_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    geofence_callback_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Geofence {
namespace V1_0 {


int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceAvailability(bool isAvailable)
{
    return OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceAvailability_(isAvailable, Remote());
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceEvent(int32_t fenceIndex,
     const OHOS::HDI::Location::Geofence::V1_0::LocationInfo& location, OHOS::HDI::Location::Geofence::V1_0::GeofenceEvent event, int64_t timestamp)
{
    return OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceEvent_(fenceIndex, location, event, timestamp, Remote());
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceOperateResult(int32_t fenceIndex,
     OHOS::HDI::Location::Geofence::V1_0::GeofenceOperateType type, OHOS::HDI::Location::Geofence::V1_0::GeofenceOperateResult result)
{
    return OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceOperateResult_(fenceIndex, type, result, Remote());
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceAvailability_(bool isAvailable,
     const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteBool(isAvailable)) {
        HDF_LOGE("%{public}s: write isAvailable failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_REPORT_GEOFENCE_AVAILABILITY, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceEvent_(int32_t fenceIndex,
     const OHOS::HDI::Location::Geofence::V1_0::LocationInfo& location, OHOS::HDI::Location::Geofence::V1_0::GeofenceEvent event, int64_t timestamp, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt32(fenceIndex)) {
        HDF_LOGE("%{public}s: write fenceIndex failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Geofence::V1_0::LocationInfoBlockMarshalling(geofenceCallbackData, location)) {
        HDF_LOGE("%{public}s: write location failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteUint64(static_cast<uint64_t>(event))) {
        HDF_LOGE("%{public}s: write event failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt64(timestamp)) {
        HDF_LOGE("%{public}s: write timestamp failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_REPORT_GEOFENCE_EVENT, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::ReportGeofenceOperateResult_(int32_t fenceIndex,
     OHOS::HDI::Location::Geofence::V1_0::GeofenceOperateType type, OHOS::HDI::Location::Geofence::V1_0::GeofenceOperateResult result, const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteInt32(fenceIndex)) {
        HDF_LOGE("%{public}s: write fenceIndex failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteUint64(static_cast<uint64_t>(type))) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackData.WriteUint64(static_cast<uint64_t>(result))) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_REPORT_GEOFENCE_OPERATE_RESULT, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    return geofenceCallbackRet;
}

int32_t OHOS::HDI::Location::Geofence::V1_0::GeofenceCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel geofenceCallbackData;
    MessageParcel geofenceCallbackReply;
    MessageOption geofenceCallbackOption(MessageOption::TF_SYNC);

    if (!geofenceCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Geofence::V1_0::IGeofenceCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t geofenceCallbackRet = remote->SendRequest(CMD_GEOFENCE_CALLBACK_GET_VERSION, geofenceCallbackData, geofenceCallbackReply, geofenceCallbackOption);
    if (geofenceCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, geofenceCallbackRet);
        return geofenceCallbackRet;
    }

    if (!geofenceCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!geofenceCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return geofenceCallbackRet;
}

} // V1_0
} // Geofence
} // Location
} // HDI
} // OHOS
