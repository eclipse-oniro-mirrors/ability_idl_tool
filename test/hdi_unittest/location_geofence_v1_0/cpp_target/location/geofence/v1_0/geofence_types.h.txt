/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_LOCATION_GEOFENCE_V1_0_GEOFENCETYPES_H
#define OHOS_HDI_LOCATION_GEOFENCE_V1_0_GEOFENCETYPES_H

#include <cstdbool>
#include <cstdint>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Location {
namespace Geofence {
namespace V1_0 {

using namespace OHOS;

enum GeofenceEvent : int32_t {
    GEOFENCE_EVENT_UNCERTAIN = 1,
    GEOFENCE_EVENT_ENTERED = 2,
    GEOFENCE_EVENT_EXITED = 4,
};

enum GeofenceOperateResult : int32_t {
    OPERATION_SUCCESS = 0,
    OPERATION_ERROR_UNKNOWN = -100,
    OPERATION_ERROR_TOO_MANY_GEOFENCES = -101,
    OPERATION_ERROR_GEOFENCE_INDEX_EXISTS = -102,
    OPERATION_ERROR_PARAMS_INVALID = -103,
};

enum GeofenceOperateType : int32_t {
    TYPE_ADD = 1,
    TYPE_DELETE = 2,
};

struct GeofenceInfo {
    int32_t fenceIndex;
    double latitude;
    double longitude;
    double radius;
} __attribute__ ((aligned(8)));

struct LocationInfo {
    double latitude;
    double longitude;
    double altitude;
    float accuracy;
    float speed;
    double direction;
    int64_t timeStamp;
    int64_t timeSinceBoot;
} __attribute__ ((aligned(8)));

bool GeofenceInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Geofence::V1_0::GeofenceInfo& dataBlock);

bool GeofenceInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Geofence::V1_0::GeofenceInfo& dataBlock);

bool LocationInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Location::Geofence::V1_0::LocationInfo& dataBlock);

bool LocationInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Location::Geofence::V1_0::LocationInfo& dataBlock);

} // V1_0
} // Geofence
} // Location
} // HDI
} // OHOS

#endif // OHOS_HDI_LOCATION_GEOFENCE_V1_0_GEOFENCETYPES_H

