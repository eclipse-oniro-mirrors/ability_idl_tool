/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_adapter_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <iproxy_broker.h>
#include <object_collector.h>
#include "distributed_audio/audio/v1_0/audio_callback_proxy.h"

#define HDF_LOG_TAG    audio_adapter_stub

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {



OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStub(const sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> &impl)
    : IPCObjectStub(OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::~AudioAdapterStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_AUDIO_ADAPTER_GET_VERSION:
            return AudioAdapterStubGetVersion(data, reply, option);
        case CMD_AUDIO_ADAPTER_INIT_ALL_PORTS:
            return AudioAdapterStubInitAllPorts(data, reply, option);
        case CMD_AUDIO_ADAPTER_CREATE_RENDER:
            return AudioAdapterStubCreateRender(data, reply, option);
        case CMD_AUDIO_ADAPTER_DESTROY_RENDER:
            return AudioAdapterStubDestroyRender(data, reply, option);
        case CMD_AUDIO_ADAPTER_CREATE_CAPTURE:
            return AudioAdapterStubCreateCapture(data, reply, option);
        case CMD_AUDIO_ADAPTER_DESTROY_CAPTURE:
            return AudioAdapterStubDestroyCapture(data, reply, option);
        case CMD_AUDIO_ADAPTER_GET_PORT_CAPABILITY:
            return AudioAdapterStubGetPortCapability(data, reply, option);
        case CMD_AUDIO_ADAPTER_SET_PASSTHROUGH_MODE:
            return AudioAdapterStubSetPassthroughMode(data, reply, option);
        case CMD_AUDIO_ADAPTER_GET_PASSTHROUGH_MODE:
            return AudioAdapterStubGetPassthroughMode(data, reply, option);
        case CMD_AUDIO_ADAPTER_GET_DEVICE_STATUS:
            return AudioAdapterStubGetDeviceStatus(data, reply, option);
        case CMD_AUDIO_ADAPTER_UPDATE_AUDIO_ROUTE:
            return AudioAdapterStubUpdateAudioRoute(data, reply, option);
        case CMD_AUDIO_ADAPTER_RELEASE_AUDIO_ROUTE:
            return AudioAdapterStubReleaseAudioRoute(data, reply, option);
        case CMD_AUDIO_ADAPTER_SET_MIC_MUTE:
            return AudioAdapterStubSetMicMute(data, reply, option);
        case CMD_AUDIO_ADAPTER_GET_MIC_MUTE:
            return AudioAdapterStubGetMicMute(data, reply, option);
        case CMD_AUDIO_ADAPTER_SET_VOICE_VOLUME:
            return AudioAdapterStubSetVoiceVolume(data, reply, option);
        case CMD_AUDIO_ADAPTER_SET_EXTRA_PARAMS:
            return AudioAdapterStubSetExtraParams(data, reply, option);
        case CMD_AUDIO_ADAPTER_GET_EXTRA_PARAMS:
            return AudioAdapterStubGetExtraParams(data, reply, option);
        case CMD_AUDIO_ADAPTER_REG_EXTRA_PARAM_OBSERVER:
            return AudioAdapterStubRegExtraParamObserver(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubInitAllPorts(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubInitAllPorts_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateRender(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateRender_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyRender(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyRender_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateCapture(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateCapture_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyCapture(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyCapture_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPortCapability(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPortCapability_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetPassthroughMode(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetPassthroughMode_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPassthroughMode(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPassthroughMode_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetDeviceStatus(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetDeviceStatus_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubUpdateAudioRoute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubUpdateAudioRoute_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubReleaseAudioRoute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubReleaseAudioRoute_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetMicMute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetMicMute_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetMicMute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetMicMute_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetVoiceVolume(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetVoiceVolume_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetExtraParams(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetExtraParams_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetExtraParams(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetExtraParams_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubRegExtraParamObserver(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubRegExtraParamObserver_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetVersion(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetVersion_(audioAdapterData, audioAdapterReply, audioAdapterOption, impl_);
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubInitAllPorts_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->InitAllPorts();
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateRender_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor desc;
    if (!AudioDeviceDescriptorBlockUnmarshalling(audioAdapterData, desc)) {
        HDF_LOGE("%{public}s: read desc failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes attrs;
    if (!AudioSampleAttributesBlockUnmarshalling(audioAdapterData, attrs)) {
        HDF_LOGE("%{public}s: read attrs failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> render;

    uint32_t renderId = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->CreateRender(desc, attrs, render, renderId);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (render == nullptr) {
        HDF_LOGE("%{public}s: parameter render is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioAdapterReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(render, OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write render failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioAdapterReply.WriteUint32(renderId)) {
        HDF_LOGE("%{public}s: write renderId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyRender_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t renderId = 0;
    if (!audioAdapterData.ReadUint32(renderId)) {
        HDF_LOGE("%{public}s: read renderId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->DestroyRender(renderId);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubCreateCapture_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor desc;
    if (!AudioDeviceDescriptorBlockUnmarshalling(audioAdapterData, desc)) {
        HDF_LOGE("%{public}s: read desc failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes attrs;
    if (!AudioSampleAttributesBlockUnmarshalling(audioAdapterData, attrs)) {
        HDF_LOGE("%{public}s: read attrs failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture> capture;

    uint32_t captureId = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->CreateCapture(desc, attrs, capture, captureId);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (capture == nullptr) {
        HDF_LOGE("%{public}s: parameter capture is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioAdapterReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(capture, OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write capture failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioAdapterReply.WriteUint32(captureId)) {
        HDF_LOGE("%{public}s: write captureId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubDestroyCapture_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t captureId = 0;
    if (!audioAdapterData.ReadUint32(captureId)) {
        HDF_LOGE("%{public}s: read captureId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->DestroyCapture(captureId);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPortCapability_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort port;
    if (!AudioPortBlockUnmarshalling(audioAdapterData, port)) {
        HDF_LOGE("%{public}s: read port failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortCapability capability;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetPortCapability(port, capability);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortCapabilityBlockMarshalling(audioAdapterReply, capability)) {
        HDF_LOGE("%{public}s: write capability failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetPassthroughMode_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort port;
    if (!AudioPortBlockUnmarshalling(audioAdapterData, port)) {
        HDF_LOGE("%{public}s: read port failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode mode = static_cast<enum AudioPortPassthroughMode>(0);
    {
        uint64_t enumTmp = 0;
        if (!audioAdapterData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write mode failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        mode = static_cast<enum AudioPortPassthroughMode>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->SetPassthroughMode(port, mode);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetPassthroughMode_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort port;
    if (!AudioPortBlockUnmarshalling(audioAdapterData, port)) {
        HDF_LOGE("%{public}s: read port failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode mode;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetPassthroughMode(port, mode);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!audioAdapterReply.WriteUint64(static_cast<uint64_t>(mode))) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetDeviceStatus_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetDeviceStatus(status);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceStatusBlockMarshalling(audioAdapterReply, status)) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubUpdateAudioRoute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioRoute route;
    if (!AudioRouteBlockUnmarshalling(audioAdapterData, route)) {
        HDF_LOGE("%{public}s: read route failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t routeHandle = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->UpdateAudioRoute(route, routeHandle);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!audioAdapterReply.WriteInt32(routeHandle)) {
        HDF_LOGE("%{public}s: write routeHandle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubReleaseAudioRoute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t routeHandle = 0;
    if (!audioAdapterData.ReadInt32(routeHandle)) {
        HDF_LOGE("%{public}s: read routeHandle failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->ReleaseAudioRoute(routeHandle);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetMicMute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool mute = false;
    if (!audioAdapterData.ReadBool(mute)) {
        HDF_LOGE("%{public}s: read mute failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->SetMicMute(mute);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetMicMute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool mute = false;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetMicMute(mute);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!audioAdapterReply.WriteBool(mute)) {
        HDF_LOGE("%{public}s: write mute failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetVoiceVolume_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    float volume = 0;
    if (!audioAdapterData.ReadFloat(volume)) {
        HDF_LOGE("%{public}s: read volume failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->SetVoiceVolume(volume);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubSetExtraParams_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key = static_cast<enum AudioExtParamKey>(0);
    {
        uint64_t enumTmp = 0;
        if (!audioAdapterData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write key failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        key = static_cast<enum AudioExtParamKey>(enumTmp);
    }

    const char* conditionCp = audioAdapterData.ReadCString();
    if (conditionCp == nullptr) {
        HDF_LOGE("%{public}s: read condition failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string condition = conditionCp;

    const char* valueCp = audioAdapterData.ReadCString();
    if (valueCp == nullptr) {
        HDF_LOGE("%{public}s: read value failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string value = valueCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->SetExtraParams(key, condition, value);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetExtraParams_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool audioAdapterMemSet = false;
    if (!audioAdapterData.ReadBool(audioAdapterMemSet)) {
        HDF_LOGE("%{public}s: failed to read audioAdapterMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key = static_cast<enum AudioExtParamKey>(0);
    {
        uint64_t enumTmp = 0;
        if (!audioAdapterData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write key failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        key = static_cast<enum AudioExtParamKey>(enumTmp);
    }

    const char* conditionCp = audioAdapterData.ReadCString();
    if (conditionCp == nullptr) {
        HDF_LOGE("%{public}s: read condition failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string condition = conditionCp;

    std::string value;
    if (audioAdapterMemSet) {
        uint32_t capacity = 0;
        if (!audioAdapterData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(char), HDF_ERR_INVALID_PARAM);
        value.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetExtraParams(key, condition, value);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!audioAdapterReply.WriteCString(value.c_str())) {
        HDF_LOGE("%{public}s: write value failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubRegExtraParamObserver_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback> audioCallback;
    sptr<IRemoteObject> audioCallbackRemote = audioAdapterData.ReadRemoteObject();
    if (audioCallbackRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    audioCallback = new OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy(audioCallbackRemote);
    if (audioCallback == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int8_t cookie = 0;
    if (!audioAdapterData.ReadInt8(cookie)) {
        HDF_LOGE("%{public}s: read cookie failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->RegExtraParamObserver(audioCallback, cookie);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    return audioAdapterRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub::AudioAdapterStubGetVersion_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl)
{
    if (audioAdapterData.ReadInterfaceToken() != OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t audioAdapterRet = impl->GetVersion(majorVer, minorVer);
    if (audioAdapterRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioAdapterRet);
        return audioAdapterRet;
    }

    if (!audioAdapterReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioAdapterReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioAdapterRet;
}
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS
