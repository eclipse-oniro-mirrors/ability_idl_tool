/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSTUB_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/iaudio_adapter.h"

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {

using namespace OHOS;
class AudioAdapterStub : public IPCObjectStub {
public:
    explicit AudioAdapterStub(const sptr<IAudioAdapter> &impl);
    virtual ~AudioAdapterStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t AudioAdapterStubInitAllPorts_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubCreateRender_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubDestroyRender_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubCreateCapture_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubDestroyCapture_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetPortCapability_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubSetPassthroughMode_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetPassthroughMode_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetDeviceStatus_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubUpdateAudioRoute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubReleaseAudioRoute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubSetMicMute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetMicMute_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubSetVoiceVolume_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubSetExtraParams_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetExtraParams_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubRegExtraParamObserver_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

    static int32_t AudioAdapterStubGetVersion_(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl);

private:
    int32_t AudioAdapterStubInitAllPorts(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubCreateRender(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubDestroyRender(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubCreateCapture(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubDestroyCapture(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetPortCapability(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubSetPassthroughMode(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetPassthroughMode(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetDeviceStatus(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubUpdateAudioRoute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubReleaseAudioRoute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubSetMicMute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetMicMute(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubSetVoiceVolume(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubSetExtraParams(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetExtraParams(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubRegExtraParamObserver(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);

    int32_t AudioAdapterStubGetVersion(MessageParcel& audioAdapterData, MessageParcel& audioAdapterReply, MessageOption& audioAdapterOption);


    static inline ObjectDelegator<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterStub, OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> objDelegator_;
    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter> impl_;
};
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSTUB_H

