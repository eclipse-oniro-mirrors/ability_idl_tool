/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSERVICE_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSERVICE_H

#include "v1_0/iaudio_adapter.h"

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {
class AudioAdapterService : public OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter {
public:
    AudioAdapterService() = default;
    virtual ~AudioAdapterService() = default;

    int32_t InitAllPorts() override;

    int32_t CreateRender(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor& desc,
         const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender>& render, uint32_t& renderId) override;

    int32_t DestroyRender(uint32_t renderId) override;

    int32_t CreateCapture(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor& desc,
         const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture>& capture, uint32_t& captureId) override;

    int32_t DestroyCapture(uint32_t captureId) override;

    int32_t GetPortCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortCapability& capability) override;

    int32_t SetPassthroughMode(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode mode) override;

    int32_t GetPassthroughMode(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode& mode) override;

    int32_t GetDeviceStatus(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceStatus& status) override;

    int32_t UpdateAudioRoute(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioRoute& route,
         int32_t& routeHandle) override;

    int32_t ReleaseAudioRoute(int32_t routeHandle) override;

    int32_t SetMicMute(bool mute) override;

    int32_t GetMicMute(bool& mute) override;

    int32_t SetVoiceVolume(float volume) override;

    int32_t SetExtraParams(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key, const std::string& condition,
         const std::string& value) override;

    int32_t GetExtraParams(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key, const std::string& condition,
         std::string& value) override;

    int32_t RegExtraParamObserver(const sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback>& audioCallback,
         int8_t cookie) override;

};
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOADAPTERSERVICE_H

