/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_capture_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    audio_capture_service

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {
int32_t AudioCaptureService::CaptureFrame(std::vector<int8_t>& frame, uint64_t& replyBytes)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetCapturePosition(uint64_t& frames,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::CheckSceneCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene, bool& supported)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SelectScene(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SetMute(bool mute)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetMute(bool& mute)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SetVolume(float volume)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetVolume(float& volume)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetGainThreshold(float& min, float& max)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetGain(float& gain)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SetGain(float gain)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetFrameSize(uint64_t& size)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetFrameCount(uint64_t& count)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SetSampleAttributes(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetSampleAttributes(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetCurrentChannelId(uint32_t& channelId)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::SetExtraParams(const std::string& keyValueList)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetExtraParams(std::string& keyValueList)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::ReqMmapBuffer(int32_t reqSize,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioMmapBufferDescriptor& desc)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetMmapPosition(uint64_t& frames,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::AddAudioEffect(uint64_t effectid)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::RemoveAudioEffect(uint64_t effectid)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::GetFrameBufferSize(uint64_t& bufferSize)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::Start()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::Stop()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::Pause()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::Resume()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::Flush()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::TurnStandbyMode()
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::AudioDevDump(int32_t range, int32_t fd)
{
    return HDF_SUCCESS;
}

int32_t AudioCaptureService::IsSupportsPauseAndResume(bool& supportPause, bool& supportResume)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS
