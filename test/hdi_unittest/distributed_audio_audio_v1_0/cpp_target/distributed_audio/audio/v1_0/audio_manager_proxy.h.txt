/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOMANAGERPROXY_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOMANAGERPROXY_H

#include "v1_0/iaudio_manager.h"
#include <unistd.h>
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {

class AudioManagerProxy : public IProxyBroker<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioManager> {
public:
    class IServiceManagerDeathRecipient : public IRemoteObject::DeathRecipient {
    public:
        IServiceManagerDeathRecipient(wptr<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy> proxy) : proxy_(proxy) {} 
        ~IServiceManagerDeathRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject> &remote) override
        {
            int32_t result = HDF_FAILURE;
            const int sleepInterval = 500000;
            const int waitTimes = 10;
            int currentTime = waitTimes;
            do {
                usleep(sleepInterval);
                auto proxy = proxy_.promote();
                if (proxy != nullptr) {
                    result = OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy::Reconnect(proxy);
                }
                --currentTime;
            } while (result != HDF_SUCCESS && currentTime >0);
        }
    private:
        wptr<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy> proxy_;
    };

    explicit AudioManagerProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioManager>(remote) {
        reconnectRemote_ = nullptr;
        servMgr_ = nullptr;
        deathRecipient_ = nullptr;
        isReconnected_ = false;
    }
    virtual ~AudioManagerProxy() {
        if (servMgr_ != nullptr && deathRecipient_ != nullptr) {
            servMgr_->RemoveDeathRecipient(deathRecipient_);
        }
    }

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t GetAllAdapters(std::vector<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterDescriptor>& descs) override;

    int32_t LoadAdapter(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterDescriptor& desc,
         sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter>& adapter) override;

    int32_t UnloadAdapter(const std::string& adapterName) override;

    int32_t ReleaseAudioManagerObject() override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t GetAllAdapters_(std::vector<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterDescriptor>& descs,
         const sptr<IRemoteObject> remote);

    static int32_t LoadAdapter_(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioAdapterDescriptor& desc,
         sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioAdapter>& adapter, const sptr<IRemoteObject> remote);

    static int32_t UnloadAdapter_(const std::string& adapterName, const sptr<IRemoteObject> remote);

    static int32_t ReleaseAudioManagerObject_(const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

    static int32_t Reconnect(sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy> proxy);

    sptr<IRemoteObject> GetCurrentRemote() {
        return isReconnected_ ? reconnectRemote_ : Remote();
    }

    bool isReconnected_;
    std::string serviceName_;
    sptr<IRemoteObject> servMgr_;
    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy::IServiceManagerDeathRecipient> deathRecipient_;
    sptr<IRemoteObject> reconnectRemote_;
private:
    static inline BrokerDelegator<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioManagerProxy> delegator_;
};

} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOMANAGERPROXY_H

