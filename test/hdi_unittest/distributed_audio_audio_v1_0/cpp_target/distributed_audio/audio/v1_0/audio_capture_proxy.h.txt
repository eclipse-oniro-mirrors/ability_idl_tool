/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOCAPTUREPROXY_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOCAPTUREPROXY_H

#include "v1_0/iaudio_capture.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {

class AudioCaptureProxy : public IProxyBroker<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture> {
public:
    explicit AudioCaptureProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture>(remote) {
    }
    virtual ~AudioCaptureProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t CaptureFrame(std::vector<int8_t>& frame, uint64_t& replyBytes) override;

    int32_t GetCapturePosition(uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) override;

    int32_t CheckSceneCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene,
         bool& supported) override;

    int32_t SelectScene(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene) override;

    int32_t SetMute(bool mute) override;

    int32_t GetMute(bool& mute) override;

    int32_t SetVolume(float volume) override;

    int32_t GetVolume(float& volume) override;

    int32_t GetGainThreshold(float& min, float& max) override;

    int32_t GetGain(float& gain) override;

    int32_t SetGain(float gain) override;

    int32_t GetFrameSize(uint64_t& size) override;

    int32_t GetFrameCount(uint64_t& count) override;

    int32_t SetSampleAttributes(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) override;

    int32_t GetSampleAttributes(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) override;

    int32_t GetCurrentChannelId(uint32_t& channelId) override;

    int32_t SetExtraParams(const std::string& keyValueList) override;

    int32_t GetExtraParams(std::string& keyValueList) override;

    int32_t ReqMmapBuffer(int32_t reqSize,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioMmapBufferDescriptor& desc) override;

    int32_t GetMmapPosition(uint64_t& frames, OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) override;

    int32_t AddAudioEffect(uint64_t effectid) override;

    int32_t RemoveAudioEffect(uint64_t effectid) override;

    int32_t GetFrameBufferSize(uint64_t& bufferSize) override;

    int32_t Start() override;

    int32_t Stop() override;

    int32_t Pause() override;

    int32_t Resume() override;

    int32_t Flush() override;

    int32_t TurnStandbyMode() override;

    int32_t AudioDevDump(int32_t range, int32_t fd) override;

    int32_t IsSupportsPauseAndResume(bool& supportPause, bool& supportResume) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t CaptureFrame_(std::vector<int8_t>& frame, uint64_t& replyBytes, const sptr<IRemoteObject> remote);

    static int32_t GetCapturePosition_(uint64_t& frames, OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time,
         const sptr<IRemoteObject> remote);

    static int32_t CheckSceneCapability_(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene,
         bool& supported, const sptr<IRemoteObject> remote);

    static int32_t SelectScene_(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene,
         const sptr<IRemoteObject> remote);

    static int32_t SetMute_(bool mute, const sptr<IRemoteObject> remote);

    static int32_t GetMute_(bool& mute, const sptr<IRemoteObject> remote);

    static int32_t SetVolume_(float volume, const sptr<IRemoteObject> remote);

    static int32_t GetVolume_(float& volume, const sptr<IRemoteObject> remote);

    static int32_t GetGainThreshold_(float& min, float& max, const sptr<IRemoteObject> remote);

    static int32_t GetGain_(float& gain, const sptr<IRemoteObject> remote);

    static int32_t SetGain_(float gain, const sptr<IRemoteObject> remote);

    static int32_t GetFrameSize_(uint64_t& size, const sptr<IRemoteObject> remote);

    static int32_t GetFrameCount_(uint64_t& count, const sptr<IRemoteObject> remote);

    static int32_t SetSampleAttributes_(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs,
         const sptr<IRemoteObject> remote);

    static int32_t GetSampleAttributes_(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs,
         const sptr<IRemoteObject> remote);

    static int32_t GetCurrentChannelId_(uint32_t& channelId, const sptr<IRemoteObject> remote);

    static int32_t SetExtraParams_(const std::string& keyValueList, const sptr<IRemoteObject> remote);

    static int32_t GetExtraParams_(std::string& keyValueList, const sptr<IRemoteObject> remote);

    static int32_t ReqMmapBuffer_(int32_t reqSize,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioMmapBufferDescriptor& desc, const sptr<IRemoteObject> remote);

    static int32_t GetMmapPosition_(uint64_t& frames, OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time,
         const sptr<IRemoteObject> remote);

    static int32_t AddAudioEffect_(uint64_t effectid, const sptr<IRemoteObject> remote);

    static int32_t RemoveAudioEffect_(uint64_t effectid, const sptr<IRemoteObject> remote);

    static int32_t GetFrameBufferSize_(uint64_t& bufferSize, const sptr<IRemoteObject> remote);

    static int32_t Start_(const sptr<IRemoteObject> remote);

    static int32_t Stop_(const sptr<IRemoteObject> remote);

    static int32_t Pause_(const sptr<IRemoteObject> remote);

    static int32_t Resume_(const sptr<IRemoteObject> remote);

    static int32_t Flush_(const sptr<IRemoteObject> remote);

    static int32_t TurnStandbyMode_(const sptr<IRemoteObject> remote);

    static int32_t AudioDevDump_(int32_t range, int32_t fd, const sptr<IRemoteObject> remote);

    static int32_t IsSupportsPauseAndResume_(bool& supportPause, bool& supportResume, const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCaptureProxy> delegator_;
};

} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIOCAPTUREPROXY_H

