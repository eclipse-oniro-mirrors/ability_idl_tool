/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_adapter_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    audio_adapter_service

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {
int32_t AudioAdapterService::InitAllPorts()
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::CreateRender(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor& desc,
     const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender>& render, uint32_t& renderId)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::DestroyRender(uint32_t renderId)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::CreateCapture(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceDescriptor& desc,
     const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCapture>& capture, uint32_t& captureId)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::DestroyCapture(uint32_t captureId)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::GetPortCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortCapability& capability)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::SetPassthroughMode(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode mode)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::GetPassthroughMode(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPort& port,
     OHOS::HDI::DistributedAudio::Audio::V1_0::AudioPortPassthroughMode& mode)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::GetDeviceStatus(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDeviceStatus& status)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::UpdateAudioRoute(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioRoute& route,
     int32_t& routeHandle)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::ReleaseAudioRoute(int32_t routeHandle)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::SetMicMute(bool mute)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::GetMicMute(bool& mute)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::SetVoiceVolume(float volume)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::SetExtraParams(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key,
     const std::string& condition, const std::string& value)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::GetExtraParams(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key,
     const std::string& condition, std::string& value)
{
    return HDF_SUCCESS;
}

int32_t AudioAdapterService::RegExtraParamObserver(const sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback>& audioCallback, int8_t cookie)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS
