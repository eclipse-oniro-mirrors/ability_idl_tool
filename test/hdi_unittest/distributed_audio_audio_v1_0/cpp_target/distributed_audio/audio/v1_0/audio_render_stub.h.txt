/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSTUB_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/iaudio_render.h"

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {

using namespace OHOS;
class AudioRenderStub : public IPCObjectStub {
public:
    explicit AudioRenderStub(const sptr<IAudioRender> &impl);
    virtual ~AudioRenderStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t AudioRenderStubGetLatency_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubRenderFrame_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetRenderPosition_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetRenderSpeed_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetRenderSpeed_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetChannelMode_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetChannelMode_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubRegCallback_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubDrainBuffer_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubIsSupportsDrain_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubCheckSceneCapability_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSelectScene_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetMute_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetMute_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetVolume_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetVolume_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetGainThreshold_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetGain_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetGain_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetFrameSize_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetFrameCount_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetSampleAttributes_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetSampleAttributes_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetCurrentChannelId_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubSetExtraParams_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetExtraParams_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubReqMmapBuffer_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetMmapPosition_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubAddAudioEffect_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubRemoveAudioEffect_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetFrameBufferSize_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubStart_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubStop_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubPause_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubResume_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubFlush_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubTurnStandbyMode_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubAudioDevDump_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubIsSupportsPauseAndResume_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

    static int32_t AudioRenderStubGetVersion_(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption, sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl);

private:
    int32_t AudioRenderStubGetLatency(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubRenderFrame(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetRenderPosition(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetRenderSpeed(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetRenderSpeed(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetChannelMode(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetChannelMode(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubRegCallback(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubDrainBuffer(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubIsSupportsDrain(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubCheckSceneCapability(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSelectScene(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetMute(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetMute(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetVolume(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetVolume(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetGainThreshold(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetGain(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetGain(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetFrameSize(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetFrameCount(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetSampleAttributes(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetSampleAttributes(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetCurrentChannelId(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubSetExtraParams(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetExtraParams(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubReqMmapBuffer(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetMmapPosition(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubAddAudioEffect(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubRemoveAudioEffect(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetFrameBufferSize(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubStart(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubStop(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubPause(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubResume(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubFlush(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubTurnStandbyMode(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubAudioDevDump(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubIsSupportsPauseAndResume(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);

    int32_t AudioRenderStubGetVersion(MessageParcel& audioRenderData, MessageParcel& audioRenderReply, MessageOption& audioRenderOption);


    static inline ObjectDelegator<OHOS::HDI::DistributedAudio::Audio::V1_0::AudioRenderStub, OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> objDelegator_;
    sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender> impl_;
};
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSTUB_H

