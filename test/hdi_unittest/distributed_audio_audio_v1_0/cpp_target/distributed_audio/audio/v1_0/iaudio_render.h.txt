/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_IAUDIORENDER_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_IAUDIORENDER_H

#include <stdint.h>
#include <string>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "distributed_audio/audio/v1_0/audio_types.h"
#include "distributed_audio/audio/v1_0/iaudio_callback.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_AUDIO_RENDER_GET_VERSION = 0,
    CMD_AUDIO_RENDER_GET_LATENCY = 1,
    CMD_AUDIO_RENDER_RENDER_FRAME = 2,
    CMD_AUDIO_RENDER_GET_RENDER_POSITION = 3,
    CMD_AUDIO_RENDER_SET_RENDER_SPEED = 4,
    CMD_AUDIO_RENDER_GET_RENDER_SPEED = 5,
    CMD_AUDIO_RENDER_SET_CHANNEL_MODE = 6,
    CMD_AUDIO_RENDER_GET_CHANNEL_MODE = 7,
    CMD_AUDIO_RENDER_REG_CALLBACK = 8,
    CMD_AUDIO_RENDER_DRAIN_BUFFER = 9,
    CMD_AUDIO_RENDER_IS_SUPPORTS_DRAIN = 10,
    CMD_AUDIO_RENDER_CHECK_SCENE_CAPABILITY = 11,
    CMD_AUDIO_RENDER_SELECT_SCENE = 12,
    CMD_AUDIO_RENDER_SET_MUTE = 13,
    CMD_AUDIO_RENDER_GET_MUTE = 14,
    CMD_AUDIO_RENDER_SET_VOLUME = 15,
    CMD_AUDIO_RENDER_GET_VOLUME = 16,
    CMD_AUDIO_RENDER_GET_GAIN_THRESHOLD = 17,
    CMD_AUDIO_RENDER_GET_GAIN = 18,
    CMD_AUDIO_RENDER_SET_GAIN = 19,
    CMD_AUDIO_RENDER_GET_FRAME_SIZE = 20,
    CMD_AUDIO_RENDER_GET_FRAME_COUNT = 21,
    CMD_AUDIO_RENDER_SET_SAMPLE_ATTRIBUTES = 22,
    CMD_AUDIO_RENDER_GET_SAMPLE_ATTRIBUTES = 23,
    CMD_AUDIO_RENDER_GET_CURRENT_CHANNEL_ID = 24,
    CMD_AUDIO_RENDER_SET_EXTRA_PARAMS = 25,
    CMD_AUDIO_RENDER_GET_EXTRA_PARAMS = 26,
    CMD_AUDIO_RENDER_REQ_MMAP_BUFFER = 27,
    CMD_AUDIO_RENDER_GET_MMAP_POSITION = 28,
    CMD_AUDIO_RENDER_ADD_AUDIO_EFFECT = 29,
    CMD_AUDIO_RENDER_REMOVE_AUDIO_EFFECT = 30,
    CMD_AUDIO_RENDER_GET_FRAME_BUFFER_SIZE = 31,
    CMD_AUDIO_RENDER_START = 32,
    CMD_AUDIO_RENDER_STOP = 33,
    CMD_AUDIO_RENDER_PAUSE = 34,
    CMD_AUDIO_RENDER_RESUME = 35,
    CMD_AUDIO_RENDER_FLUSH = 36,
    CMD_AUDIO_RENDER_TURN_STANDBY_MODE = 37,
    CMD_AUDIO_RENDER_AUDIO_DEV_DUMP = 38,
    CMD_AUDIO_RENDER_IS_SUPPORTS_PAUSE_AND_RESUME = 39,
};

class IAudioRender : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.distributed_audio.audio.v1_0.IAudioRender");

    virtual ~IAudioRender() = default;

    virtual int32_t GetLatency(uint32_t& ms) = 0;

    virtual int32_t RenderFrame(const std::vector<int8_t>& frame, uint64_t& replyBytes) = 0;

    virtual int32_t GetRenderPosition(uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) = 0;

    virtual int32_t SetRenderSpeed(float speed) = 0;

    virtual int32_t GetRenderSpeed(float& speed) = 0;

    virtual int32_t SetChannelMode(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioChannelMode mode) = 0;

    virtual int32_t GetChannelMode(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioChannelMode& mode) = 0;

    virtual int32_t RegCallback(const sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback>& audioCallback,
         int8_t cookie) = 0;

    virtual int32_t DrainBuffer(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDrainNotifyType& type) = 0;

    virtual int32_t IsSupportsDrain(bool& support) = 0;

    virtual int32_t CheckSceneCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene,
         bool& supported) = 0;

    virtual int32_t SelectScene(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene) = 0;

    virtual int32_t SetMute(bool mute) = 0;

    virtual int32_t GetMute(bool& mute) = 0;

    virtual int32_t SetVolume(float volume) = 0;

    virtual int32_t GetVolume(float& volume) = 0;

    virtual int32_t GetGainThreshold(float& min, float& max) = 0;

    virtual int32_t GetGain(float& gain) = 0;

    virtual int32_t SetGain(float gain) = 0;

    virtual int32_t GetFrameSize(uint64_t& size) = 0;

    virtual int32_t GetFrameCount(uint64_t& count) = 0;

    virtual int32_t SetSampleAttributes(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) = 0;

    virtual int32_t GetSampleAttributes(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) = 0;

    virtual int32_t GetCurrentChannelId(uint32_t& channelId) = 0;

    virtual int32_t SetExtraParams(const std::string& keyValueList) = 0;

    virtual int32_t GetExtraParams(std::string& keyValueList) = 0;

    virtual int32_t ReqMmapBuffer(int32_t reqSize,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioMmapBufferDescriptor& desc) = 0;

    virtual int32_t GetMmapPosition(uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) = 0;

    virtual int32_t AddAudioEffect(uint64_t effectid) = 0;

    virtual int32_t RemoveAudioEffect(uint64_t effectid) = 0;

    virtual int32_t GetFrameBufferSize(uint64_t& bufferSize) = 0;

    virtual int32_t Start() = 0;

    virtual int32_t Stop() = 0;

    virtual int32_t Pause() = 0;

    virtual int32_t Resume() = 0;

    virtual int32_t Flush() = 0;

    virtual int32_t TurnStandbyMode() = 0;

    virtual int32_t AudioDevDump(int32_t range, int32_t fd) = 0;

    virtual int32_t IsSupportsPauseAndResume(bool& supportPause, bool& supportResume) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_IAUDIORENDER_H

