/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSERVICE_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSERVICE_H

#include "v1_0/iaudio_render.h"

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {
class AudioRenderService : public OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioRender {
public:
    AudioRenderService() = default;
    virtual ~AudioRenderService() = default;

    int32_t GetLatency(uint32_t& ms) override;

    int32_t RenderFrame(const std::vector<int8_t>& frame, uint64_t& replyBytes) override;

    int32_t GetRenderPosition(uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) override;

    int32_t SetRenderSpeed(float speed) override;

    int32_t GetRenderSpeed(float& speed) override;

    int32_t SetChannelMode(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioChannelMode mode) override;

    int32_t GetChannelMode(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioChannelMode& mode) override;

    int32_t RegCallback(const sptr<OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback>& audioCallback,
         int8_t cookie) override;

    int32_t DrainBuffer(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioDrainNotifyType& type) override;

    int32_t IsSupportsDrain(bool& support) override;

    int32_t CheckSceneCapability(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene,
         bool& supported) override;

    int32_t SelectScene(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSceneDescriptor& scene) override;

    int32_t SetMute(bool mute) override;

    int32_t GetMute(bool& mute) override;

    int32_t SetVolume(float volume) override;

    int32_t GetVolume(float& volume) override;

    int32_t GetGainThreshold(float& min, float& max) override;

    int32_t GetGain(float& gain) override;

    int32_t SetGain(float gain) override;

    int32_t GetFrameSize(uint64_t& size) override;

    int32_t GetFrameCount(uint64_t& count) override;

    int32_t SetSampleAttributes(const OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) override;

    int32_t GetSampleAttributes(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioSampleAttributes& attrs) override;

    int32_t GetCurrentChannelId(uint32_t& channelId) override;

    int32_t SetExtraParams(const std::string& keyValueList) override;

    int32_t GetExtraParams(std::string& keyValueList) override;

    int32_t ReqMmapBuffer(int32_t reqSize,
         OHOS::HDI::DistributedAudio::Audio::V1_0::AudioMmapBufferDescriptor& desc) override;

    int32_t GetMmapPosition(uint64_t& frames, OHOS::HDI::DistributedAudio::Audio::V1_0::AudioTimeStamp& time) override;

    int32_t AddAudioEffect(uint64_t effectid) override;

    int32_t RemoveAudioEffect(uint64_t effectid) override;

    int32_t GetFrameBufferSize(uint64_t& bufferSize) override;

    int32_t Start() override;

    int32_t Stop() override;

    int32_t Pause() override;

    int32_t Resume() override;

    int32_t Flush() override;

    int32_t TurnStandbyMode() override;

    int32_t AudioDevDump(int32_t range, int32_t fd) override;

    int32_t IsSupportsPauseAndResume(bool& supportPause, bool& supportResume) override;

};
} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIO_V1_0_AUDIORENDERSERVICE_H

