/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    audio_callback_proxy

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audio {
namespace V1_0 {


int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::RenderCallback(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackType type, int8_t& reserved, int8_t& cookie)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::RenderCallback_(type, reserved, cookie, Remote());
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::ParamCallback(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key, const std::string& condition, const std::string& value, int8_t& reserved, int8_t cookie)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::ParamCallback_(key, condition, value, reserved, cookie, Remote());
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::RenderCallback_(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackType type, int8_t& reserved, int8_t& cookie, const sptr<IRemoteObject> remote)
{
    MessageParcel audioCallbackData;
    MessageParcel audioCallbackReply;
    MessageOption audioCallbackOption(MessageOption::TF_SYNC);

    if (!audioCallbackData.WriteInterfaceToken(OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackData.WriteUint64(static_cast<uint64_t>(type))) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t audioCallbackRet = remote->SendRequest(CMD_AUDIO_CALLBACK_RENDER_CALLBACK, audioCallbackData, audioCallbackReply, audioCallbackOption);
    if (audioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioCallbackRet);
        return audioCallbackRet;
    }

    if (!audioCallbackReply.ReadInt8(reserved)) {
        HDF_LOGE("%{public}s: read reserved failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackReply.ReadInt8(cookie)) {
        HDF_LOGE("%{public}s: read cookie failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioCallbackRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::ParamCallback_(OHOS::HDI::DistributedAudio::Audio::V1_0::AudioExtParamKey key, const std::string& condition, const std::string& value, int8_t& reserved, int8_t cookie, const sptr<IRemoteObject> remote)
{
    MessageParcel audioCallbackData;
    MessageParcel audioCallbackReply;
    MessageOption audioCallbackOption(MessageOption::TF_SYNC);

    if (!audioCallbackData.WriteInterfaceToken(OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackData.WriteUint64(static_cast<uint64_t>(key))) {
        HDF_LOGE("%{public}s: write key failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackData.WriteCString(condition.c_str())) {
        HDF_LOGE("%{public}s: write condition failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackData.WriteCString(value.c_str())) {
        HDF_LOGE("%{public}s: write value failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackData.WriteInt8(cookie)) {
        HDF_LOGE("%{public}s: write cookie failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t audioCallbackRet = remote->SendRequest(CMD_AUDIO_CALLBACK_PARAM_CALLBACK, audioCallbackData, audioCallbackReply, audioCallbackOption);
    if (audioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioCallbackRet);
        return audioCallbackRet;
    }

    if (!audioCallbackReply.ReadInt8(reserved)) {
        HDF_LOGE("%{public}s: read reserved failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioCallbackRet;
}

int32_t OHOS::HDI::DistributedAudio::Audio::V1_0::AudioCallbackProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel audioCallbackData;
    MessageParcel audioCallbackReply;
    MessageOption audioCallbackOption(MessageOption::TF_SYNC);

    if (!audioCallbackData.WriteInterfaceToken(OHOS::HDI::DistributedAudio::Audio::V1_0::IAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t audioCallbackRet = remote->SendRequest(CMD_AUDIO_CALLBACK_GET_VERSION, audioCallbackData, audioCallbackReply, audioCallbackOption);
    if (audioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, audioCallbackRet);
        return audioCallbackRet;
    }

    if (!audioCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!audioCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return audioCallbackRet;
}

} // V1_0
} // Audio
} // DistributedAudio
} // HDI
} // OHOS
