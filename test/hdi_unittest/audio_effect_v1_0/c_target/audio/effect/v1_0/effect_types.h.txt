/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef EFFECTTYPES_H
#define EFFECTTYPES_H

#include <stdbool.h>
#include <stdint.h>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct HdfSBuf;

struct EffectInfo {
    char* libName;
    char* effectId;
    int32_t ioDirection;
};

struct ControllerId {
    char* libName;
    char* effectId;
};

struct EffectControllerDescriptor {
    char* effectId;
    char* effectName;
    char* libName;
    char* supplier;
};

enum AudioEffectBufferTag {
    EFFECT_BUFFER_VOID_TYPE = 0,
    EFFECT_BUFFER_FLOAT_SIGNED_32 = 1 << 0,
    EFFECT_BUFFER_SINGED_32 = 1 << 1,
    EFFECT_BUFFER_SIGNED_16 = 1 << 2,
    EFFECT_BUFFER_UNSIGNED_8 = 1 << 3,
};

struct AudioEffectBuffer {
    uint32_t frameCount;
    int32_t datatag;
    int8_t* rawData;
    uint32_t rawDataLen;
};

enum EffectCommandTableIndex {
    AUDIO_EFFECT_COMMAND_INIT_CONTOLLER,
    AUDIO_EFFECT_COMMAND_SET_CONFIG,
    AUDIO_EFFECT_COMMAND_GET_CONFIG,
    AUDIO_EFFECT_COMMAND_RESET,
    AUDIO_EFFECT_COMMAND_ENABLE,
    AUDIO_EFFECT_COMMAND_DISABLE,
    AUDIO_EFFECT_COMMAND_SET_PARAM,
    AUDIO_EFFECT_COMMAND_GET_PARAM,
};

bool EffectInfoBlockMarshalling(struct HdfSBuf *data, const struct EffectInfo *dataBlock);

bool EffectInfoBlockUnmarshalling(struct HdfSBuf *data, struct EffectInfo *dataBlock);

void EffectInfoFree(struct EffectInfo *dataBlock, bool freeSelf);

bool ControllerIdBlockMarshalling(struct HdfSBuf *data, const struct ControllerId *dataBlock);

bool ControllerIdBlockUnmarshalling(struct HdfSBuf *data, struct ControllerId *dataBlock);

void ControllerIdFree(struct ControllerId *dataBlock, bool freeSelf);

bool EffectControllerDescriptorBlockMarshalling(struct HdfSBuf *data, const struct EffectControllerDescriptor *dataBlock);

bool EffectControllerDescriptorBlockUnmarshalling(struct HdfSBuf *data, struct EffectControllerDescriptor *dataBlock);

void EffectControllerDescriptorFree(struct EffectControllerDescriptor *dataBlock, bool freeSelf);

bool AudioEffectBufferBlockMarshalling(struct HdfSBuf *data, const struct AudioEffectBuffer *dataBlock);

bool AudioEffectBufferBlockUnmarshalling(struct HdfSBuf *data, struct AudioEffectBuffer *dataBlock);

void AudioEffectBufferFree(struct AudioEffectBuffer *dataBlock, bool freeSelf);


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // EFFECTTYPES_H