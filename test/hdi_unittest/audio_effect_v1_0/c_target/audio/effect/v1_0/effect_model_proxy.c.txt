/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdf_dlist.h>
#include <hdf_sbuf.h>
#include <hdi_support.h>
#include <osal_mem.h>
#include <securec.h>
#include <servmgr_hdi.h>
#include <stub_collector.h>
#include "v1_0/ieffect_model.h"

#define HDF_LOG_TAG    effect_model_proxy

struct EffectModelProxy {
    struct IEffectModel impl;
    struct HdfRemoteService *remote;
};

static struct IEffectControl *ReadIEffectControl(struct HdfSBuf *parcel);


static struct IEffectControl *ReadIEffectControl(struct HdfSBuf *parcel)
{
    struct HdfRemoteService *remote = HdfSbufReadRemoteService(parcel);
    if (remote == NULL) {
        HDF_LOGE("%{public}s:  failed to read remote service of 'IEffectControl'", __func__);
        return NULL;
    }

    return IEffectControlGet(remote);
}

static int32_t EffectModelProxyCall(struct IEffectModel *self, int32_t id, struct HdfSBuf *data,
    struct HdfSBuf *reply, bool isOneWay)
{
    struct HdfRemoteService *remote = self->AsObject(self);
    if (remote == NULL ||
        remote->dispatcher == NULL ||
        remote->dispatcher->Dispatch == NULL ||
        remote->dispatcher->DispatchAsync == NULL) {
        HDF_LOGE("%{public}s: Invalid HdfRemoteService obj", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }
    if (isOneWay) {
        return remote->dispatcher->DispatchAsync(remote, id, data, reply);
    } else {
        return remote->dispatcher->Dispatch(remote, id, data, reply);
    }
}

static int32_t EffectModelProxyIsSupplyEffectLibs(struct IEffectModel *self, bool* supply)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_IS_SUPPLY_EFFECT_LIBS, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

    if (!HdfSbufReadInt8(effectModelReply, (int8_t *)supply)) {
        HDF_LOGE("%{public}s: read supply failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static int32_t EffectModelProxyGetAllEffectDescriptors(struct IEffectModel *self,
     struct EffectControllerDescriptor* descs, uint32_t* descsLen)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteUint8(effectModelData, 1)) {
        HDF_LOGE("%{public}s: write flag of memory setting failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (descs == NULL || descsLen == NULL || *descsLen == 0) {
        HDF_LOGE("%{public}s: descs is invalid", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteUint32(effectModelData, *descsLen)) {
        HDF_LOGE("%{public}s: write descsLen failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_GET_ALL_EFFECT_DESCRIPTORS, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

    if (!HdfSbufReadUint32(effectModelReply, descsLen)) {
        HDF_LOGE("%{public}s: read descs size failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    HDI_CHECK_VALUE_RET_GOTO(*descsLen, >, HDI_BUFF_MAX_SIZE / sizeof(struct EffectControllerDescriptor), effectModelRet, HDF_ERR_INVALID_PARAM, FINISHED);
    for (uint32_t i = 0; i < *descsLen; i++) {
        if (!EffectControllerDescriptorBlockUnmarshalling(effectModelReply, &descs[i])) {
            HDF_LOGE("%{public}s: read &descs[i] failed!", __func__);
            effectModelRet = HDF_ERR_INVALID_PARAM;
            goto FINISHED;
        }
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static int32_t EffectModelProxyCreateEffectController(struct IEffectModel *self, const struct EffectInfo* info,
     struct IEffectControl** contoller, struct ControllerId* id)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!EffectInfoBlockMarshalling(effectModelData, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_CREATE_EFFECT_CONTROLLER, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

    *contoller = ReadIEffectControl(effectModelReply);
    if (*contoller == NULL) {
        HDF_LOGE("%{public}s: read contoller failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!ControllerIdBlockUnmarshalling(effectModelReply, id)) {
        HDF_LOGE("%{public}s: read id failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static int32_t EffectModelProxyDestroyEffectController(struct IEffectModel *self, const struct ControllerId* id)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!ControllerIdBlockMarshalling(effectModelData, id)) {
        HDF_LOGE("%{public}s: write id failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_DESTROY_EFFECT_CONTROLLER, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static int32_t EffectModelProxyGetEffectDescriptor(struct IEffectModel *self, const char* effectId,
     struct EffectControllerDescriptor* desc)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteString(effectModelData, effectId)) {
        HDF_LOGE("%{public}s: write effectId failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_GET_EFFECT_DESCRIPTOR, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

    if (!EffectControllerDescriptorBlockUnmarshalling(effectModelReply, desc)) {
        HDF_LOGE("%{public}s: read desc failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static int32_t EffectModelProxyGetVersion(struct IEffectModel *self, uint32_t* majorVer, uint32_t* minorVer)
{
    int32_t effectModelRet = HDF_FAILURE;

    struct HdfSBuf *effectModelData = HdfSbufTypedObtain(SBUF_IPC);
    struct HdfSBuf *effectModelReply = HdfSbufTypedObtain(SBUF_IPC);

    if (effectModelData == NULL || effectModelReply == NULL) {
        HDF_LOGE("%{public}s: HdfSubf malloc failed!", __func__);
        effectModelRet = HDF_ERR_MALLOC_FAIL;
        goto FINISHED;
    }

    if (self == NULL) {
        HDF_LOGE("%{public}s: invalid interface object", __func__);
        effectModelRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (!HdfRemoteServiceWriteInterfaceToken(self->AsObject(self), effectModelData)) {
        HDF_LOGE("%{public}s: write interface token failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    effectModelRet = EffectModelProxyCall(self, CMD_EFFECT_MODEL_GET_VERSION, effectModelData, effectModelReply, false);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: call failed! error code is %{public}d", __func__, effectModelRet);
        goto FINISHED;
    }

    if (!HdfSbufReadUint32(effectModelReply, majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufReadUint32(effectModelReply, minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        effectModelRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (effectModelData != NULL) {
        HdfSbufRecycle(effectModelData);
    }
    if (effectModelReply != NULL) {
        HdfSbufRecycle(effectModelReply);
    }
    return effectModelRet;
}

static struct HdfRemoteService *EffectModelProxyAsObject(struct IEffectModel *self)
{
    if (self == NULL) {
        return NULL;
    }
    struct EffectModelProxy *proxy = CONTAINER_OF(self, struct EffectModelProxy, impl);
    return proxy->remote;
}

static void EffectModelProxyConstruct(struct IEffectModel *impl)
{
    impl->IsSupplyEffectLibs = EffectModelProxyIsSupplyEffectLibs;
    impl->GetAllEffectDescriptors = EffectModelProxyGetAllEffectDescriptors;
    impl->CreateEffectController = EffectModelProxyCreateEffectController;
    impl->DestroyEffectController = EffectModelProxyDestroyEffectController;
    impl->GetEffectDescriptor = EffectModelProxyGetEffectDescriptor;
    impl->GetVersion = EffectModelProxyGetVersion;
    impl->AsObject = EffectModelProxyAsObject;
}

struct IEffectModel *IEffectModelGet(bool isStub)
{
    return IEffectModelGetInstance("effect_model_service", isStub);
}

struct IEffectModel *IEffectModelGetInstance(const char *serviceName, bool isStub)
{
    if (isStub) {
        const char *instName = serviceName;
        if (strcmp(instName, "effect_model_service") == 0) {
            instName = "service";
        }
        return LoadHdiImpl(IEFFECTMODEL_INTERFACE_DESC, instName);
    }

    struct HDIServiceManager *serviceMgr = HDIServiceManagerGet();
    if (serviceMgr == NULL) {
        HDF_LOGE("%{public}s: HDIServiceManager not found!", __func__);
        return NULL;
    }

    struct HdfRemoteService *remote = serviceMgr->GetService(serviceMgr, serviceName);
    HDIServiceManagerRelease(serviceMgr);
    if (remote == NULL) {
        HDF_LOGE("%{public}s: failed to get remote!", __func__);
        return NULL;
    }

    if (!HdfRemoteServiceSetInterfaceDesc(remote, IEFFECTMODEL_INTERFACE_DESC)) {
        HDF_LOGE("%{public}s: set interface token failed!", __func__);
        HdfRemoteServiceRecycle(remote);
        return NULL;
    }

    struct EffectModelProxy *proxy = (struct EffectModelProxy *)OsalMemCalloc(sizeof(struct EffectModelProxy));
    if (proxy == NULL) {
        HDF_LOGE("%{public}s: malloc IEffectModel proxy failed!", __func__);
        HdfRemoteServiceRecycle(remote);
        return NULL;
    }

    proxy->remote = remote;
    EffectModelProxyConstruct(&proxy->impl);
    struct IEffectModel *client = &proxy->impl;

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t effectModelRet = client->GetVersion(client, &serMajorVer, &serMinorVer);
    if (effectModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s: get version failed!", __func__);
        IEffectModelRelease(false, client);
        return NULL;
    }

    if (serMajorVer != IEFFECT_MODEL_MAJOR_VERSION) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:%u.%u", __func__,
            serMajorVer, serMinorVer, IEFFECT_MODEL_MAJOR_VERSION, IEFFECT_MODEL_MINOR_VERSION);
        IEffectModelRelease(false, client);
        return NULL;
    }

    return client;
}

void IEffectModelRelease(struct IEffectModel *instance, bool isStub)
{
    IEffectModelReleaseInstance("effect_model_service", instance, isStub);
}

void IEffectModelReleaseInstance(const char *serviceName, struct IEffectModel *instance, bool isStub)
{
    if (instance == NULL) {
        return;
    }

    if (isStub) {
        const char *instName = serviceName;
        if (strcmp(instName, "effect_model_service") == 0) {
            instName = "service";
        }
        UnloadHdiImpl(IEFFECTMODEL_INTERFACE_DESC, instName, instance);
        return;
    }

    struct EffectModelProxy *proxy = CONTAINER_OF(instance, struct EffectModelProxy, impl);
    HdfRemoteServiceRecycle(proxy->remote);
    OsalMemFree(proxy);
}
