/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/hci_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "bluetooth/hci/v1_0/hci_callback_proxy.h"

#define HDF_LOG_TAG    hci_interface_stub

namespace OHOS {
namespace HDI {
namespace Bluetooth {
namespace Hci {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::Get(bool isStub)
{
    return OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::Get("hci_interface_service", isStub);
}

sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "hci_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface *>(impl);
}


OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStub(const sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::~HciInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_HCI_INTERFACE_GET_VERSION:
            return HciInterfaceStubGetVersion(data, reply, option);
        case CMD_HCI_INTERFACE_INIT:
            return HciInterfaceStubInit(data, reply, option);
        case CMD_HCI_INTERFACE_SEND_HCI_PACKET:
            return HciInterfaceStubSendHciPacket(data, reply, option);
        case CMD_HCI_INTERFACE_CLOSE:
            return HciInterfaceStubClose(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubInit(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption)
{
    return OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubInit_(hciInterfaceData, hciInterfaceReply, hciInterfaceOption, impl_);
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubSendHciPacket(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption)
{
    return OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubSendHciPacket_(hciInterfaceData, hciInterfaceReply, hciInterfaceOption, impl_);
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubClose(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption)
{
    return OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubClose_(hciInterfaceData, hciInterfaceReply, hciInterfaceOption, impl_);
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubGetVersion(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption)
{
    return OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubGetVersion_(hciInterfaceData, hciInterfaceReply, hciInterfaceOption, impl_);
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubInit_(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption, sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> impl)
{
    if (hciInterfaceData.ReadInterfaceToken() != OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = hciInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Bluetooth::Hci::V1_0::HciCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t hciInterfaceRet = impl->Init(callbackObj);
    if (hciInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hciInterfaceRet);
        return hciInterfaceRet;
    }

    return hciInterfaceRet;
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubSendHciPacket_(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption, sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> impl)
{
    if (hciInterfaceData.ReadInterfaceToken() != OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Bluetooth::Hci::V1_0::BtType type = static_cast<enum BtType>(0);
    {
        uint64_t enumTmp = 0;
        if (!hciInterfaceData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write type failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        type = static_cast<enum BtType>(enumTmp);
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(hciInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t hciInterfaceRet = impl->SendHciPacket(type, data);
    if (hciInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hciInterfaceRet);
        return hciInterfaceRet;
    }

    return hciInterfaceRet;
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubClose_(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption, sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> impl)
{
    if (hciInterfaceData.ReadInterfaceToken() != OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t hciInterfaceRet = impl->Close();
    if (hciInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hciInterfaceRet);
        return hciInterfaceRet;
    }

    return hciInterfaceRet;
}

int32_t OHOS::HDI::Bluetooth::Hci::V1_0::HciInterfaceStub::HciInterfaceStubGetVersion_(MessageParcel& hciInterfaceData, MessageParcel& hciInterfaceReply, MessageOption& hciInterfaceOption, sptr<OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface> impl)
{
    if (hciInterfaceData.ReadInterfaceToken() != OHOS::HDI::Bluetooth::Hci::V1_0::IHciInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t hciInterfaceRet = impl->GetVersion(majorVer, minorVer);
    if (hciInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hciInterfaceRet);
        return hciInterfaceRet;
    }

    if (!hciInterfaceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!hciInterfaceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return hciInterfaceRet;
}
} // V1_0
} // Hci
} // Bluetooth
} // HDI
} // OHOS
