/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USB_V1_0_IUSBINTERFACE_H
#define OHOS_HDI_USB_V1_0_IUSBINTERFACE_H

#include <stdint.h>
#include <vector>
#include <ashmem.h>
#include <hdf_base.h>
#include <hdi_base.h>
#include "usb/v1_0/iusbd_bulk_callback.h"
#include "usb/v1_0/iusbd_subscriber.h"
#include "usb/v1_0/usb_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Usb {
namespace V1_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_USB_INTERFACE_GET_VERSION = 0,
    CMD_USB_INTERFACE_OPEN_DEVICE = 1,
    CMD_USB_INTERFACE_CLOSE_DEVICE = 2,
    CMD_USB_INTERFACE_GET_DEVICE_DESCRIPTOR = 3,
    CMD_USB_INTERFACE_GET_STRING_DESCRIPTOR = 4,
    CMD_USB_INTERFACE_GET_CONFIG_DESCRIPTOR = 5,
    CMD_USB_INTERFACE_GET_RAW_DESCRIPTOR = 6,
    CMD_USB_INTERFACE_GET_FILE_DESCRIPTOR = 7,
    CMD_USB_INTERFACE_SET_CONFIG = 8,
    CMD_USB_INTERFACE_GET_CONFIG = 9,
    CMD_USB_INTERFACE_CLAIM_INTERFACE = 10,
    CMD_USB_INTERFACE_MANAGE_INTERFACE = 11,
    CMD_USB_INTERFACE_RELEASE_INTERFACE = 12,
    CMD_USB_INTERFACE_SET_INTERFACE = 13,
    CMD_USB_INTERFACE_BULK_TRANSFER_READ = 14,
    CMD_USB_INTERFACE_BULK_TRANSFER_WRITE = 15,
    CMD_USB_INTERFACE_CONTROL_TRANSFER_READ = 16,
    CMD_USB_INTERFACE_CONTROL_TRANSFER_WRITE = 17,
    CMD_USB_INTERFACE_INTERRUPT_TRANSFER_READ = 18,
    CMD_USB_INTERFACE_INTERRUPT_TRANSFER_WRITE = 19,
    CMD_USB_INTERFACE_ISO_TRANSFER_READ = 20,
    CMD_USB_INTERFACE_ISO_TRANSFER_WRITE = 21,
    CMD_USB_INTERFACE_REQUEST_QUEUE = 22,
    CMD_USB_INTERFACE_REQUEST_WAIT = 23,
    CMD_USB_INTERFACE_REQUEST_CANCEL = 24,
    CMD_USB_INTERFACE_GET_CURRENT_FUNCTIONS = 25,
    CMD_USB_INTERFACE_SET_CURRENT_FUNCTIONS = 26,
    CMD_USB_INTERFACE_SET_PORT_ROLE = 27,
    CMD_USB_INTERFACE_QUERY_PORT = 28,
    CMD_USB_INTERFACE_BIND_USBD_SUBSCRIBER = 29,
    CMD_USB_INTERFACE_UNBIND_USBD_SUBSCRIBER = 30,
    CMD_USB_INTERFACE_REG_BULK_CALLBACK = 31,
    CMD_USB_INTERFACE_UN_REG_BULK_CALLBACK = 32,
    CMD_USB_INTERFACE_BULK_READ = 33,
    CMD_USB_INTERFACE_BULK_WRITE = 34,
    CMD_USB_INTERFACE_BULK_CANCEL = 35,
};

class IUsbInterface : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.usb.v1_0.IUsbInterface");

    virtual ~IUsbInterface() = default;

    static sptr<OHOS::HDI::Usb::V1_0::IUsbInterface> Get(bool isStub = false);
    static sptr<OHOS::HDI::Usb::V1_0::IUsbInterface> Get(const std::string &serviceName, bool isStub = false);

    virtual int32_t OpenDevice(const OHOS::HDI::Usb::V1_0::UsbDev& dev) = 0;

    virtual int32_t CloseDevice(const OHOS::HDI::Usb::V1_0::UsbDev& dev) = 0;

    virtual int32_t GetDeviceDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, std::vector<uint8_t>& descriptor) = 0;

    virtual int32_t GetStringDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t descId,
         std::vector<uint8_t>& descriptor) = 0;

    virtual int32_t GetConfigDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t descId,
         std::vector<uint8_t>& descriptor) = 0;

    virtual int32_t GetRawDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, std::vector<uint8_t>& descriptor) = 0;

    virtual int32_t GetFileDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, int32_t& fd) = 0;

    virtual int32_t SetConfig(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t configIndex) = 0;

    virtual int32_t GetConfig(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t& configIndex) = 0;

    virtual int32_t ClaimInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid, uint8_t force) = 0;

    virtual int32_t ManageInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid, bool disable) = 0;

    virtual int32_t ReleaseInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid) = 0;

    virtual int32_t SetInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid, uint8_t altIndex) = 0;

    virtual int32_t BulkTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         int32_t timeout, std::vector<uint8_t>& data) = 0;

    virtual int32_t BulkTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, const std::vector<uint8_t>& data) = 0;

    virtual int32_t ControlTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& ctrl, std::vector<uint8_t>& data) = 0;

    virtual int32_t ControlTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& ctrl, const std::vector<uint8_t>& data) = 0;

    virtual int32_t InterruptTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, std::vector<uint8_t>& data) = 0;

    virtual int32_t InterruptTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, const std::vector<uint8_t>& data) = 0;

    virtual int32_t IsoTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         int32_t timeout, std::vector<uint8_t>& data) = 0;

    virtual int32_t IsoTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         int32_t timeout, const std::vector<uint8_t>& data) = 0;

    virtual int32_t RequestQueue(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         const std::vector<uint8_t>& clientData, const std::vector<uint8_t>& buffer) = 0;

    virtual int32_t RequestWait(const OHOS::HDI::Usb::V1_0::UsbDev& dev, std::vector<uint8_t>& clientData,
         std::vector<uint8_t>& buffer, int32_t timeout) = 0;

    virtual int32_t RequestCancel(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbPipe& pipe) = 0;

    virtual int32_t GetCurrentFunctions(int32_t& funcs) = 0;

    virtual int32_t SetCurrentFunctions(int32_t funcs) = 0;

    virtual int32_t SetPortRole(int32_t portId, int32_t powerRole, int32_t dataRole) = 0;

    virtual int32_t QueryPort(int32_t& portId, int32_t& powerRole, int32_t& dataRole, int32_t& mode) = 0;

    virtual int32_t BindUsbdSubscriber(const sptr<OHOS::HDI::Usb::V1_0::IUsbdSubscriber>& subscriber) = 0;

    virtual int32_t UnbindUsbdSubscriber(const sptr<OHOS::HDI::Usb::V1_0::IUsbdSubscriber>& subscriber) = 0;

    virtual int32_t RegBulkCallback(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         const sptr<OHOS::HDI::Usb::V1_0::IUsbdBulkCallback>& cb) = 0;

    virtual int32_t UnRegBulkCallback(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
         const OHOS::HDI::Usb::V1_0::UsbPipe& pipe) = 0;

    virtual int32_t BulkRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         const sptr<Ashmem>& ashmem) = 0;

    virtual int32_t BulkWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe,
         const sptr<Ashmem>& ashmem) = 0;

    virtual int32_t BulkCancel(const OHOS::HDI::Usb::V1_0::UsbDev& dev, const OHOS::HDI::Usb::V1_0::UsbPipe& pipe) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_0
} // Usb
} // HDI
} // OHOS

#endif // OHOS_HDI_USB_V1_0_IUSBINTERFACE_H

