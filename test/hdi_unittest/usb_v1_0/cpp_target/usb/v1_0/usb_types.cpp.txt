/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/usb_types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Usb {
namespace V1_0 {



bool PortInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::V1_0::PortInfo& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::PortInfo))) {
        return false;
    }
    return true;
}

bool PortInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::V1_0::PortInfo& dataBlock)
{
    const OHOS::HDI::Usb::V1_0::PortInfo *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Usb::V1_0::PortInfo*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Usb::V1_0::PortInfo)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::PortInfo), dataBlockPtr, sizeof(OHOS::HDI::Usb::V1_0::PortInfo)) != EOK) {
        return false;
    }
    return true;
}

bool UsbDevBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::V1_0::UsbDev& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbDev))) {
        return false;
    }
    return true;
}

bool UsbDevBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::V1_0::UsbDev& dataBlock)
{
    const OHOS::HDI::Usb::V1_0::UsbDev *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Usb::V1_0::UsbDev*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Usb::V1_0::UsbDev)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbDev), dataBlockPtr, sizeof(OHOS::HDI::Usb::V1_0::UsbDev)) != EOK) {
        return false;
    }
    return true;
}

bool UsbPipeBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::V1_0::UsbPipe& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbPipe))) {
        return false;
    }
    return true;
}

bool UsbPipeBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::V1_0::UsbPipe& dataBlock)
{
    const OHOS::HDI::Usb::V1_0::UsbPipe *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Usb::V1_0::UsbPipe*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Usb::V1_0::UsbPipe)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbPipe), dataBlockPtr, sizeof(OHOS::HDI::Usb::V1_0::UsbPipe)) != EOK) {
        return false;
    }
    return true;
}

bool UsbCtrlTransferBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbCtrlTransfer))) {
        return false;
    }
    return true;
}

bool UsbCtrlTransferBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& dataBlock)
{
    const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Usb::V1_0::UsbCtrlTransfer)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::UsbCtrlTransfer), dataBlockPtr, sizeof(OHOS::HDI::Usb::V1_0::UsbCtrlTransfer)) != EOK) {
        return false;
    }
    return true;
}

bool USBDeviceInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Usb::V1_0::USBDeviceInfo& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::USBDeviceInfo))) {
        return false;
    }
    return true;
}

bool USBDeviceInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Usb::V1_0::USBDeviceInfo& dataBlock)
{
    const OHOS::HDI::Usb::V1_0::USBDeviceInfo *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Usb::V1_0::USBDeviceInfo*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Usb::V1_0::USBDeviceInfo)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Usb::V1_0::USBDeviceInfo), dataBlockPtr, sizeof(OHOS::HDI::Usb::V1_0::USBDeviceInfo)) != EOK) {
        return false;
    }
    return true;
}

} // V1_0
} // Usb
} // HDI
} // OHOS
