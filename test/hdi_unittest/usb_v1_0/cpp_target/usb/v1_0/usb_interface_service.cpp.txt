/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/usb_interface_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    usb_interface_service

namespace OHOS {
namespace HDI {
namespace Usb {
namespace V1_0 {
extern "C" IUsbInterface *UsbInterfaceImplGetInstance(void)
{
    return new (std::nothrow) UsbInterfaceService();
}

int32_t UsbInterfaceService::OpenDevice(const OHOS::HDI::Usb::V1_0::UsbDev& dev)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::CloseDevice(const OHOS::HDI::Usb::V1_0::UsbDev& dev)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetDeviceDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     std::vector<uint8_t>& descriptor)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetStringDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t descId,
     std::vector<uint8_t>& descriptor)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetConfigDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t descId,
     std::vector<uint8_t>& descriptor)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetRawDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, std::vector<uint8_t>& descriptor)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetFileDescriptor(const OHOS::HDI::Usb::V1_0::UsbDev& dev, int32_t& fd)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::SetConfig(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t configIndex)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetConfig(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t& configIndex)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::ClaimInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid, uint8_t force)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::ManageInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid, bool disable)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::ReleaseInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::SetInterface(const OHOS::HDI::Usb::V1_0::UsbDev& dev, uint8_t interfaceid,
     uint8_t altIndex)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BulkTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BulkTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, const std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::ControlTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& ctrl, std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::ControlTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbCtrlTransfer& ctrl, const std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::InterruptTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::InterruptTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, const std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::IsoTransferRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::IsoTransferWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, int32_t timeout, const std::vector<uint8_t>& data)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::RequestQueue(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, const std::vector<uint8_t>& clientData, const std::vector<uint8_t>& buffer)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::RequestWait(const OHOS::HDI::Usb::V1_0::UsbDev& dev, std::vector<uint8_t>& clientData,
     std::vector<uint8_t>& buffer, int32_t timeout)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::RequestCancel(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::GetCurrentFunctions(int32_t& funcs)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::SetCurrentFunctions(int32_t funcs)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::SetPortRole(int32_t portId, int32_t powerRole, int32_t dataRole)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::QueryPort(int32_t& portId, int32_t& powerRole, int32_t& dataRole, int32_t& mode)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BindUsbdSubscriber(const sptr<OHOS::HDI::Usb::V1_0::IUsbdSubscriber>& subscriber)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::UnbindUsbdSubscriber(const sptr<OHOS::HDI::Usb::V1_0::IUsbdSubscriber>& subscriber)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::RegBulkCallback(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, const sptr<OHOS::HDI::Usb::V1_0::IUsbdBulkCallback>& cb)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::UnRegBulkCallback(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BulkRead(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, const sptr<Ashmem>& ashmem)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BulkWrite(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe, const sptr<Ashmem>& ashmem)
{
    return HDF_SUCCESS;
}

int32_t UsbInterfaceService::BulkCancel(const OHOS::HDI::Usb::V1_0::UsbDev& dev,
     const OHOS::HDI::Usb::V1_0::UsbPipe& pipe)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Usb
} // HDI
} // OHOS
