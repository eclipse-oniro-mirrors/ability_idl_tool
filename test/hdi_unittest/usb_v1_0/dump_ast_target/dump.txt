AST[name: IUsbInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/usb_v1_0/foo/usb/v1_0/IUsbInterface.idl]
package ohos.hdi.usb.v1_0;

import ohos.hdi.usb.v1_0.IUsbdBulkCallback;
import ohos.hdi.usb.v1_0.IUsbdSubscriber;
import ohos.hdi.usb.v1_0.UsbTypes;

[mini, lite, full] interface IUsbInterface {
    [mini, lite, full] OpenDevice(
      [in] ohos.hdi.usb.v1_0.UsbDev dev);

    [mini, lite, full] CloseDevice(
      [in] ohos.hdi.usb.v1_0.UsbDev dev);

    [mini, lite, full] GetDeviceDescriptor(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [out] unsigned char[] descriptor);

    [mini, lite, full] GetStringDescriptor(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char descId,
      [out] unsigned char[] descriptor);

    [mini, lite, full] GetConfigDescriptor(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char descId,
      [out] unsigned char[] descriptor);

    [mini, lite, full] GetRawDescriptor(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [out] unsigned char[] descriptor);

    [mini, lite, full] GetFileDescriptor(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [out] int fd);

    [mini, lite, full] SetConfig(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char configIndex);

    [mini, lite, full] GetConfig(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [out] unsigned char configIndex);

    [mini, lite, full] ClaimInterface(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char interfaceid,
      [in] unsigned char force);

    [mini, lite, full] ManageInterface(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char interfaceid,
      [in] boolean disable);

    [mini, lite, full] ReleaseInterface(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char interfaceid);

    [mini, lite, full] SetInterface(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] unsigned char interfaceid,
      [in] unsigned char altIndex);

    [mini, lite, full] BulkTransferRead(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [out] unsigned char[] data);

    [mini, lite, full] BulkTransferWrite(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [in] unsigned char[] data);

    [mini, lite, full] ControlTransferRead(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbCtrlTransfer ctrl,
      [out] unsigned char[] data);

    [mini, lite, full] ControlTransferWrite(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbCtrlTransfer ctrl,
      [in] unsigned char[] data);

    [mini, lite, full] InterruptTransferRead(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [out] unsigned char[] data);

    [mini, lite, full] InterruptTransferWrite(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [in] unsigned char[] data);

    [mini, lite, full] IsoTransferRead(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [out] unsigned char[] data);

    [mini, lite, full] IsoTransferWrite(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] int timeout,
      [in] unsigned char[] data);

    [mini, lite, full] RequestQueue(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] unsigned char[] clientData,
      [in] unsigned char[] buffer);

    [mini, lite, full] RequestWait(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [out] unsigned char[] clientData,
      [out] unsigned char[] buffer,
      [in] int timeout);

    [mini, lite, full] RequestCancel(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe);

    [mini, lite, full] GetCurrentFunctions(
      [out] int funcs);

    [mini, lite, full] SetCurrentFunctions(
      [in] int funcs);

    [mini, lite, full] SetPortRole(
      [in] int portId,
      [in] int powerRole,
      [in] int dataRole);

    [mini, lite, full] QueryPort(
      [out] int portId,
      [out] int powerRole,
      [out] int dataRole,
      [out] int mode);

    [mini, lite, full] BindUsbdSubscriber(
      [in] ohos.hdi.usb.v1_0.IUsbdSubscriber subscriber);

    [mini, lite, full] UnbindUsbdSubscriber(
      [in] ohos.hdi.usb.v1_0.IUsbdSubscriber subscriber);

    [mini, lite, full] RegBulkCallback(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] ohos.hdi.usb.v1_0.IUsbdBulkCallback cb);

    [mini, lite, full] UnRegBulkCallback(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe);

    [mini, lite, full] BulkRead(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] Ashmem ashmem);

    [mini, lite, full] BulkWrite(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe,
      [in] Ashmem ashmem);

    [mini, lite, full] BulkCancel(
      [in] ohos.hdi.usb.v1_0.UsbDev dev,
      [in] ohos.hdi.usb.v1_0.UsbPipe pipe);
}


AST[name: IUsbdSubscriber file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/usb_v1_0/foo/usb/v1_0/IUsbdSubscriber.idl]
package ohos.hdi.usb.v1_0;

import ohos.hdi.usb.v1_0.UsbTypes;

[mini, lite, full, callback] interface IUsbdSubscriber {
    [mini, lite, full, callback] DeviceEvent(
      [in] ohos.hdi.usb.v1_0.USBDeviceInfo info);

    [mini, lite, full, callback] PortChangedEvent(
      [in] ohos.hdi.usb.v1_0.PortInfo info);
}


AST[name: UsbTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/usb_v1_0/foo/usb/v1_0/UsbTypes.idl]
package ohos.hdi.usb.v1_0;

[mini, lite, full] struct PortInfo {
  int portId;
  int powerRole;
  int dataRole;
  int mode;
};

[mini, lite, full] struct UsbDev {
  unsigned char busNum;
  unsigned char devAddr;
};

[mini, lite, full] struct UsbPipe {
  unsigned char intfId;
  unsigned char endpointId;
};

[mini, lite, full] struct UsbCtrlTransfer {
  int requestType;
  int requestCmd;
  int value;
  int index;
  int timeout;
};

[mini, lite, full] struct USBDeviceInfo {
  int status;
  int busNum;
  int devNum;
};


AST[name: IUsbdBulkCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/usb_v1_0/foo/usb/v1_0/IUsbdBulkCallback.idl]
package ohos.hdi.usb.v1_0;

[mini, lite, full, callback] interface IUsbdBulkCallback {
    [mini, lite, full, callback] OnBulkWriteCallback(
      [in] int status,
      [in] int actLength);

    [mini, lite, full, callback] OnBulkReadCallback(
      [in] int status,
      [in] int actLength);
}


