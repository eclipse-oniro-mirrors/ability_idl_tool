/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/dcamera_types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace DistributedCamera {
namespace V1_0 {

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

bool DHBaseBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DHBase& dataBlock)
{
    if (!data.WriteCString(dataBlock.deviceId_.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.deviceId_ failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.dhId_.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.dhId_ failed!", __func__);
        return false;
    }
    return true;
}

bool DHBaseBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DHBase& dataBlock)
{
    const char* deviceId_Cp = data.ReadCString();
    if (deviceId_Cp == nullptr) {
        HDF_LOGE("%{public}s: read deviceId_Cp failed", __func__);
        return false;
    }
    dataBlock.deviceId_ = deviceId_Cp;

    const char* dhId_Cp = data.ReadCString();
    if (dhId_Cp == nullptr) {
        HDF_LOGE("%{public}s: read dhId_Cp failed", __func__);
        return false;
    }
    dataBlock.dhId_ = dhId_Cp;
    return true;
}

bool DCameraSettingsBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DCameraSettings& dataBlock)
{
    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type_))) {
        HDF_LOGE("%{public}s: write dataBlock.type_ failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.value_.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.value_ failed!", __func__);
        return false;
    }
    return true;
}

bool DCameraSettingsBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DCameraSettings& dataBlock)
{
    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.type_ failed!", __func__);
            return false;
        }
        dataBlock.type_ = static_cast<enum DCSettingsType>(enumTmp);
    }

    const char* value_Cp = data.ReadCString();
    if (value_Cp == nullptr) {
        HDF_LOGE("%{public}s: read value_Cp failed", __func__);
        return false;
    }
    dataBlock.value_ = value_Cp;
    return true;
}

bool DCStreamInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo))) {
        return false;
    }
    return true;
}

bool DCStreamInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo& dataBlock)
{
    const OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo *dataBlockPtr = reinterpret_cast<const OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo), dataBlockPtr, sizeof(OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo)) != EOK) {
        return false;
    }
    return true;
}

bool DCCaptureInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DCCaptureInfo& dataBlock)
{
    if (!WritePodArray(data, dataBlock.streamIds_)) {
        HDF_LOGE("%{public}s: failed to write dataBlock.streamIds_", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.width_)) {
        HDF_LOGE("%{public}s: write dataBlock.width_ failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.height_)) {
        HDF_LOGE("%{public}s: write dataBlock.height_ failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.stride_)) {
        HDF_LOGE("%{public}s: write dataBlock.stride_ failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.format_)) {
        HDF_LOGE("%{public}s: write dataBlock.format_ failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.dataspace_)) {
        HDF_LOGE("%{public}s: write dataBlock.dataspace_ failed!", __func__);
        return false;
    }

    if (!data.WriteBool(dataBlock.isCapture_)) {
        HDF_LOGE("%{public}s: write dataBlock.isCapture_ failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.encodeType_))) {
        HDF_LOGE("%{public}s: write dataBlock.encodeType_ failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type_))) {
        HDF_LOGE("%{public}s: write dataBlock.type_ failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.captureSettings_.size())) {
        HDF_LOGE("%{public}s: failed write dataBlock.captureSettings_.size", __func__);
        return false;
    }
    for (const auto& it0 : dataBlock.captureSettings_) {
        if (!DCameraSettingsBlockMarshalling(data, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return false;
        }
    }
    return true;
}

bool DCCaptureInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DCCaptureInfo& dataBlock)
{
    if (!ReadPodArray(data, dataBlock.streamIds_)) {
        HDF_LOGE("%{public}s: failed to read dataBlock.streamIds_", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.width_)) {
        HDF_LOGE("%{public}s: read dataBlock.width_ failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.height_)) {
        HDF_LOGE("%{public}s: read dataBlock.height_ failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.stride_)) {
        HDF_LOGE("%{public}s: read dataBlock.stride_ failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.format_)) {
        HDF_LOGE("%{public}s: read dataBlock.format_ failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.dataspace_)) {
        HDF_LOGE("%{public}s: read dataBlock.dataspace_ failed!", __func__);
        return false;
    }

    if (!data.ReadBool(dataBlock.isCapture_)) {
        HDF_LOGE("%{public}s: read dataBlock.isCapture_ failed!", __func__);
        return false;
    }

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.encodeType_ failed!", __func__);
            return false;
        }
        dataBlock.encodeType_ = static_cast<enum DCEncodeType>(enumTmp);
    }

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.type_ failed!", __func__);
            return false;
        }
        dataBlock.type_ = static_cast<enum DCStreamType>(enumTmp);
    }

    uint32_t captureSettings_Size = 0;
    if (!data.ReadUint32(captureSettings_Size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    HDI_CHECK_VALUE_RETURN(captureSettings_Size, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::DistributedCamera::V1_0::DCameraSettings), false);
    dataBlock.captureSettings_.clear();
    dataBlock.captureSettings_.reserve(captureSettings_Size);
    for (uint32_t i0 = 0; i0 < captureSettings_Size; ++i0) {
        OHOS::HDI::DistributedCamera::V1_0::DCameraSettings value0;
        if (!OHOS::HDI::DistributedCamera::V1_0::DCameraSettingsBlockUnmarshalling(data, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return false;
        }
        dataBlock.captureSettings_.push_back(value0);
    }
    return true;
}

bool DCameraBufferBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& dataBlock)
{
    if (!data.WriteInt32(dataBlock.index_)) {
        HDF_LOGE("%{public}s: write dataBlock.index_ failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.size_)) {
        HDF_LOGE("%{public}s: write dataBlock.size_ failed!", __func__);
        return false;
    }

    if (!data.WriteStrongParcelable(dataBlock.bufferHandle_)) {
        HDF_LOGE("%{public}s: failed to write dataBlock.bufferHandle_", __func__);
        return false;
    }
    return true;
}

bool DCameraBufferBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& dataBlock)
{
    if (!data.ReadInt32(dataBlock.index_)) {
        HDF_LOGE("%{public}s: read dataBlock.index_ failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.size_)) {
        HDF_LOGE("%{public}s: read dataBlock.size_ failed!", __func__);
        return false;
    }

    dataBlock.bufferHandle_ = data.ReadStrongParcelable<NativeBuffer>();
    return true;
}

bool DCameraHDFEventBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedCamera::V1_0::DCameraHDFEvent& dataBlock)
{
    if (!data.WriteInt32(dataBlock.type_)) {
        HDF_LOGE("%{public}s: write dataBlock.type_ failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.result_)) {
        HDF_LOGE("%{public}s: write dataBlock.result_ failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.content_.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.content_ failed!", __func__);
        return false;
    }
    return true;
}

bool DCameraHDFEventBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedCamera::V1_0::DCameraHDFEvent& dataBlock)
{
    if (!data.ReadInt32(dataBlock.type_)) {
        HDF_LOGE("%{public}s: read dataBlock.type_ failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.result_)) {
        HDF_LOGE("%{public}s: read dataBlock.result_ failed!", __func__);
        return false;
    }

    const char* content_Cp = data.ReadCString();
    if (content_Cp == nullptr) {
        HDF_LOGE("%{public}s: read content_Cp failed", __func__);
        return false;
    }
    dataBlock.content_ = content_Cp;
    return true;
}

} // V1_0
} // DistributedCamera
} // HDI
} // OHOS
