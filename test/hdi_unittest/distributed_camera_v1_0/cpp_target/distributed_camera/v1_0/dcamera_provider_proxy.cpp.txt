/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/dcamera_provider_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    dcamera_provider_proxy

namespace OHOS {
namespace HDI {
namespace DistributedCamera {
namespace V1_0 {


sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider> OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::Get(bool isStub)
{
    return IDCameraProvider::Get("dcamera_provider_service", isStub);
}

sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider> OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "dcamera_provider_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy> proxy = new OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t dCameraProviderRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::Reconnect(
    sptr<OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::EnableDCameraDevice(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const std::string& abilityInfo, const sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback>& callbackObj)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::EnableDCameraDevice_(dhBase, abilityInfo, callbackObj, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::DisableDCameraDevice(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::DisableDCameraDevice_(dhBase, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::AcquireBuffer(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, int32_t streamId, OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& buffer)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::AcquireBuffer_(dhBase, streamId, buffer, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::ShutterBuffer(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, int32_t streamId, const OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& buffer)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::ShutterBuffer_(dhBase, streamId, buffer, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::OnSettingsResult(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const OHOS::HDI::DistributedCamera::V1_0::DCameraSettings& result)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::OnSettingsResult_(dhBase, result, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::Notify(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const OHOS::HDI::DistributedCamera::V1_0::DCameraHDFEvent& event)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::Notify_(dhBase, event, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::EnableDCameraDevice_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const std::string& abilityInfo, const sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback>& callbackObj, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!dCameraProviderData.WriteCString(abilityInfo.c_str())) {
        HDF_LOGE("%{public}s: write abilityInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: parameter callbackObj is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!dCameraProviderData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(callbackObj, OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write callbackObj failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_ENABLE_D_CAMERA_DEVICE, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::DisableDCameraDevice_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_DISABLE_D_CAMERA_DEVICE, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::AcquireBuffer_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, int32_t streamId, OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& buffer, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!dCameraProviderData.WriteInt32(streamId)) {
        HDF_LOGE("%{public}s: write streamId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_ACQUIRE_BUFFER, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    if (!DCameraBufferBlockUnmarshalling(dCameraProviderReply, buffer)) {
        HDF_LOGE("%{public}s: read buffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::ShutterBuffer_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, int32_t streamId, const OHOS::HDI::DistributedCamera::V1_0::DCameraBuffer& buffer, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!dCameraProviderData.WriteInt32(streamId)) {
        HDF_LOGE("%{public}s: write streamId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DCameraBufferBlockMarshalling(dCameraProviderData, buffer)) {
        HDF_LOGE("%{public}s: write buffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_SHUTTER_BUFFER, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::OnSettingsResult_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const OHOS::HDI::DistributedCamera::V1_0::DCameraSettings& result, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DCameraSettingsBlockMarshalling(dCameraProviderData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_ON_SETTINGS_RESULT, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::Notify_(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase, const OHOS::HDI::DistributedCamera::V1_0::DCameraHDFEvent& event, const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DHBaseBlockMarshalling(dCameraProviderData, dhBase)) {
        HDF_LOGE("%{public}s: write dhBase failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::DistributedCamera::V1_0::DCameraHDFEventBlockMarshalling(dCameraProviderData, event)) {
        HDF_LOGE("%{public}s: write event failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_NOTIFY, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    return dCameraProviderRet;
}

int32_t OHOS::HDI::DistributedCamera::V1_0::DCameraProviderProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel dCameraProviderData;
    MessageParcel dCameraProviderReply;
    MessageOption dCameraProviderOption(MessageOption::TF_SYNC);

    if (!dCameraProviderData.WriteInterfaceToken(OHOS::HDI::DistributedCamera::V1_0::IDCameraProvider::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t dCameraProviderRet = remote->SendRequest(CMD_DCAMERA_PROVIDER_GET_VERSION, dCameraProviderData, dCameraProviderReply, dCameraProviderOption);
    if (dCameraProviderRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, dCameraProviderRet);
        return dCameraProviderRet;
    }

    if (!dCameraProviderReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!dCameraProviderReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return dCameraProviderRet;
}

} // V1_0
} // DistributedCamera
} // HDI
} // OHOS
