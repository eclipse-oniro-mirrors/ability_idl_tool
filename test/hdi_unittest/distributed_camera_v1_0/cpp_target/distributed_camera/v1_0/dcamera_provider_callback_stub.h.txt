/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSTUB_H
#define OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/id_camera_provider_callback.h"

namespace OHOS {
namespace HDI {
namespace DistributedCamera {
namespace V1_0 {

using namespace OHOS;
class DCameraProviderCallbackStub : public IPCObjectStub {
public:
    explicit DCameraProviderCallbackStub(const sptr<IDCameraProviderCallback> &impl);
    virtual ~DCameraProviderCallbackStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t DCameraProviderCallbackStubOpenSession_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubCloseSession_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubConfigureStreams_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubReleaseStreams_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubStartCapture_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubStopCapture_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubUpdateSettings_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

    static int32_t DCameraProviderCallbackStubGetVersion_(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption, sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl);

private:
    int32_t DCameraProviderCallbackStubOpenSession(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubCloseSession(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubConfigureStreams(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubReleaseStreams(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubStartCapture(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubStopCapture(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubUpdateSettings(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);

    int32_t DCameraProviderCallbackStubGetVersion(MessageParcel& dCameraProviderCallbackData, MessageParcel& dCameraProviderCallbackReply, MessageOption& dCameraProviderCallbackOption);


    static inline ObjectDelegator<OHOS::HDI::DistributedCamera::V1_0::DCameraProviderCallbackStub, OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> objDelegator_;
    sptr<OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback> impl_;
};
} // V1_0
} // DistributedCamera
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSTUB_H

