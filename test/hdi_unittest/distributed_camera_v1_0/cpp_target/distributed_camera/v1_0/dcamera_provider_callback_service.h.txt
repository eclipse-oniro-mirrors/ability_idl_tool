/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSERVICE_H
#define OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSERVICE_H

#include "v1_0/id_camera_provider_callback.h"

namespace OHOS {
namespace HDI {
namespace DistributedCamera {
namespace V1_0 {
class DCameraProviderCallbackService : public OHOS::HDI::DistributedCamera::V1_0::IDCameraProviderCallback {
public:
    DCameraProviderCallbackService() = default;
    virtual ~DCameraProviderCallbackService() = default;

    int32_t OpenSession(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase) override;

    int32_t CloseSession(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase) override;

    int32_t ConfigureStreams(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase,
         const std::vector<OHOS::HDI::DistributedCamera::V1_0::DCStreamInfo>& streamInfos) override;

    int32_t ReleaseStreams(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase,
         const std::vector<int32_t>& streamIds) override;

    int32_t StartCapture(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase,
         const std::vector<OHOS::HDI::DistributedCamera::V1_0::DCCaptureInfo>& captureInfos) override;

    int32_t StopCapture(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase,
         const std::vector<int32_t>& streamIds) override;

    int32_t UpdateSettings(const OHOS::HDI::DistributedCamera::V1_0::DHBase& dhBase,
         const std::vector<OHOS::HDI::DistributedCamera::V1_0::DCameraSettings>& settings) override;

};
} // V1_0
} // DistributedCamera
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_CAMERA_V1_0_DCAMERAPROVIDERCALLBACKSERVICE_H

