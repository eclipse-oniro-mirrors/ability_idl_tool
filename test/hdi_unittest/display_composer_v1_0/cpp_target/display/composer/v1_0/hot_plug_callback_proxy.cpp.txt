/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/hot_plug_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    hot_plug_callback_proxy

namespace OHOS {
namespace HDI {
namespace Display {
namespace Composer {
namespace V1_0 {


int32_t OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::OnHotPlug(uint32_t outputId, bool connected)
{
    return OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::OnHotPlug_(outputId, connected, Remote());
}

int32_t OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::OnHotPlug_(uint32_t outputId, bool connected,
     const sptr<IRemoteObject> remote)
{
    MessageParcel hotPlugCallbackData;
    MessageParcel hotPlugCallbackReply;
    MessageOption hotPlugCallbackOption(MessageOption::TF_SYNC);

    if (!hotPlugCallbackData.WriteInterfaceToken(OHOS::HDI::Display::Composer::V1_0::IHotPlugCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!hotPlugCallbackData.WriteUint32(outputId)) {
        HDF_LOGE("%{public}s: write outputId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!hotPlugCallbackData.WriteBool(connected)) {
        HDF_LOGE("%{public}s: write connected failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t hotPlugCallbackRet = remote->SendRequest(CMD_HOT_PLUG_CALLBACK_ON_HOT_PLUG, hotPlugCallbackData, hotPlugCallbackReply, hotPlugCallbackOption);
    if (hotPlugCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hotPlugCallbackRet);
        return hotPlugCallbackRet;
    }

    return hotPlugCallbackRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel hotPlugCallbackData;
    MessageParcel hotPlugCallbackReply;
    MessageOption hotPlugCallbackOption(MessageOption::TF_SYNC);

    if (!hotPlugCallbackData.WriteInterfaceToken(OHOS::HDI::Display::Composer::V1_0::IHotPlugCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t hotPlugCallbackRet = remote->SendRequest(CMD_HOT_PLUG_CALLBACK_GET_VERSION, hotPlugCallbackData, hotPlugCallbackReply, hotPlugCallbackOption);
    if (hotPlugCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, hotPlugCallbackRet);
        return hotPlugCallbackRet;
    }

    if (!hotPlugCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!hotPlugCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return hotPlugCallbackRet;
}

} // V1_0
} // Composer
} // Display
} // HDI
} // OHOS
