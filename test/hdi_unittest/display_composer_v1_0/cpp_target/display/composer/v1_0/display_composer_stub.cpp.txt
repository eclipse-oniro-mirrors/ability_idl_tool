/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/display_composer_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "display/composer/v1_0/hot_plug_callback_proxy.h"
#include "display/composer/v1_0/vblank_callback_proxy.h"

#define HDF_LOG_TAG    display_composer_stub

namespace OHOS {
namespace HDI {
namespace Display {
namespace Composer {
namespace V1_0 {
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::Get(bool isStub)
{
    return OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::Get("display_composer_service", isStub);
}

sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "display_composer_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer *>(impl);
}


OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStub(const sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> &impl)
    : IPCObjectStub(OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::~DisplayComposerStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_DISPLAY_COMPOSER_GET_VERSION:
            return DisplayComposerStubGetVersion(data, reply, option);
        case CMD_DISPLAY_COMPOSER_REG_HOT_PLUG_CALLBACK:
            return DisplayComposerStubRegHotPlugCallback(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_CLIENT_BUFFER_CACHE_COUNT:
            return DisplayComposerStubSetClientBufferCacheCount(data, reply, option);
        case CMD_DISPLAY_COMPOSER_REG_DISPLAY_V_BLANK_CALLBACK:
            return DisplayComposerStubRegDisplayVBlankCallback(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_CAPABILITY:
            return DisplayComposerStubGetDisplayCapability(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_SUPPORTED_MODES:
            return DisplayComposerStubGetDisplaySupportedModes(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_MODE:
            return DisplayComposerStubGetDisplayMode(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_MODE:
            return DisplayComposerStubSetDisplayMode(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_POWER_STATUS:
            return DisplayComposerStubGetDisplayPowerStatus(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_POWER_STATUS:
            return DisplayComposerStubSetDisplayPowerStatus(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_BACKLIGHT:
            return DisplayComposerStubGetDisplayBacklight(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_BACKLIGHT:
            return DisplayComposerStubSetDisplayBacklight(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_VSYNC_ENABLED:
            return DisplayComposerStubSetDisplayVsyncEnabled(data, reply, option);
        case CMD_DISPLAY_COMPOSER_CREATE_LAYER:
            return DisplayComposerStubCreateLayer(data, reply, option);
        case CMD_DISPLAY_COMPOSER_DESTROY_LAYER:
            return DisplayComposerStubDestroyLayer(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_CLIENT_CROP:
            return DisplayComposerStubSetDisplayClientCrop(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_RELEASE_FENCE:
            return DisplayComposerStubGetDisplayReleaseFence(data, reply, option);
        case CMD_DISPLAY_COMPOSER_CREATE_VIRTUAL_DISPLAY:
            return DisplayComposerStubCreateVirtualDisplay(data, reply, option);
        case CMD_DISPLAY_COMPOSER_DESTROY_VIRTUAL_DISPLAY:
            return DisplayComposerStubDestroyVirtualDisplay(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_VIRTUAL_DISPLAY_BUFFER:
            return DisplayComposerStubSetVirtualDisplayBuffer(data, reply, option);
        case CMD_DISPLAY_COMPOSER_SET_DISPLAY_PROPERTY:
            return DisplayComposerStubSetDisplayProperty(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_DISPLAY_PROPERTY:
            return DisplayComposerStubGetDisplayProperty(data, reply, option);
        case CMD_DISPLAY_COMPOSER_INIT_CMD_REQUEST:
            return DisplayComposerStubInitCmdRequest(data, reply, option);
        case CMD_DISPLAY_COMPOSER_CMD_REQUEST:
            return DisplayComposerStubCmdRequest(data, reply, option);
        case CMD_DISPLAY_COMPOSER_GET_CMD_REPLY:
            return DisplayComposerStubGetCmdReply(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegHotPlugCallback(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegHotPlugCallback_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetClientBufferCacheCount(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetClientBufferCacheCount_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegDisplayVBlankCallback(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegDisplayVBlankCallback_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayCapability(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayCapability_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplaySupportedModes(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplaySupportedModes_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayMode(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayMode_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayMode(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayMode_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayPowerStatus(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayPowerStatus_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayPowerStatus(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayPowerStatus_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayBacklight(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayBacklight_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayBacklight(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayBacklight_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayVsyncEnabled(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayVsyncEnabled_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateLayer(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateLayer_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyLayer(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyLayer_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayClientCrop(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayClientCrop_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayReleaseFence(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayReleaseFence_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateVirtualDisplay(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateVirtualDisplay_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyVirtualDisplay(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyVirtualDisplay_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetVirtualDisplayBuffer(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetVirtualDisplayBuffer_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayProperty(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayProperty_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayProperty(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayProperty_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubInitCmdRequest(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubInitCmdRequest_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCmdRequest(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCmdRequest_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetCmdReply(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetCmdReply_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetVersion(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption)
{
    return OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetVersion_(displayComposerData, displayComposerReply, displayComposerOption, impl_);
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegHotPlugCallback_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Display::Composer::V1_0::IHotPlugCallback> cb;
    sptr<IRemoteObject> cbRemote = displayComposerData.ReadRemoteObject();
    if (cbRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    cb = new OHOS::HDI::Display::Composer::V1_0::HotPlugCallbackProxy(cbRemote);
    if (cb == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->RegHotPlugCallback(cb);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetClientBufferCacheCount_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t count = 0;
    if (!displayComposerData.ReadUint32(count)) {
        HDF_LOGE("%{public}s: read count failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetClientBufferCacheCount(devId, count);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubRegDisplayVBlankCallback_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Display::Composer::V1_0::IVBlankCallback> cb;
    sptr<IRemoteObject> cbRemote = displayComposerData.ReadRemoteObject();
    if (cbRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    cb = new OHOS::HDI::Display::Composer::V1_0::VBlankCallbackProxy(cbRemote);
    if (cb == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->RegDisplayVBlankCallback(devId, cb);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayCapability_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Display::Composer::V1_0::DisplayCapability info;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayCapability(devId, info);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!OHOS::HDI::Display::Composer::V1_0::DisplayCapabilityBlockMarshalling(displayComposerReply, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplaySupportedModes_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool displayComposerMemSet = false;
    if (!displayComposerData.ReadBool(displayComposerMemSet)) {
        HDF_LOGE("%{public}s: failed to read displayComposerMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Display::Composer::V1_0::DisplayModeInfo> modes;
    if (displayComposerMemSet) {
        uint32_t capacity = 0;
        if (!displayComposerData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Display::Composer::V1_0::DisplayModeInfo), HDF_ERR_INVALID_PARAM);
        modes.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplaySupportedModes(devId, modes);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!WritePodArray(displayComposerReply, modes)) {
        HDF_LOGE("%{public}s: failed to write modes", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayMode_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t modeId = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayMode(devId, modeId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint32(modeId)) {
        HDF_LOGE("%{public}s: write modeId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayMode_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t modeId = 0;
    if (!displayComposerData.ReadUint32(modeId)) {
        HDF_LOGE("%{public}s: read modeId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayMode(devId, modeId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayPowerStatus_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Display::Composer::V1_0::DispPowerStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayPowerStatus(devId, status);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayPowerStatus_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Display::Composer::V1_0::DispPowerStatus status = static_cast<enum DispPowerStatus>(0);
    {
        uint64_t enumTmp = 0;
        if (!displayComposerData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum DispPowerStatus>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayPowerStatus(devId, status);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayBacklight_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t level = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayBacklight(devId, level);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint32(level)) {
        HDF_LOGE("%{public}s: write level failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayBacklight_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t level = 0;
    if (!displayComposerData.ReadUint32(level)) {
        HDF_LOGE("%{public}s: read level failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayBacklight(devId, level);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayVsyncEnabled_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool enabled = false;
    if (!displayComposerData.ReadBool(enabled)) {
        HDF_LOGE("%{public}s: read enabled failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayVsyncEnabled(devId, enabled);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateLayer_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Display::Composer::V1_0::LayerInfo layerInfo;
    if (!LayerInfoBlockUnmarshalling(displayComposerData, layerInfo)) {
        HDF_LOGE("%{public}s: read layerInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t cacheCount = 0;
    if (!displayComposerData.ReadUint32(cacheCount)) {
        HDF_LOGE("%{public}s: read cacheCount failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t layerId = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->CreateLayer(devId, layerInfo, cacheCount, layerId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint32(layerId)) {
        HDF_LOGE("%{public}s: write layerId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyLayer_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t layerId = 0;
    if (!displayComposerData.ReadUint32(layerId)) {
        HDF_LOGE("%{public}s: read layerId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->DestroyLayer(devId, layerId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayClientCrop_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Display::Composer::V1_0::IRect rect;
    if (!IRectBlockUnmarshalling(displayComposerData, rect)) {
        HDF_LOGE("%{public}s: read rect failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayClientCrop(devId, rect);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayReleaseFence_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool displayComposerMemSet = false;
    if (!displayComposerData.ReadBool(displayComposerMemSet)) {
        HDF_LOGE("%{public}s: failed to read displayComposerMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint32_t> layers;
    if (displayComposerMemSet) {
        uint32_t capacity = 0;
        if (!displayComposerData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(uint32_t), HDF_ERR_INVALID_PARAM);
        layers.reserve(capacity);
    }

    std::vector<sptr<OHOS::HDI::Display::HdifdParcelable>> fences;
    if (displayComposerMemSet) {
        uint32_t capacity = 0;
        if (!displayComposerData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(sptr<OHOS::HDI::Display::HdifdParcelable>), HDF_ERR_INVALID_PARAM);
        fences.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayReleaseFence(devId, layers, fences);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!WritePodArray(displayComposerReply, layers)) {
        HDF_LOGE("%{public}s: failed to write layers", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!displayComposerReply.WriteUint32(fences.size())) {
        HDF_LOGE("%{public}s: write fences size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : fences) {
        if (!displayComposerReply.WriteStrongParcelable(it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCreateVirtualDisplay_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t width = 0;
    if (!displayComposerData.ReadUint32(width)) {
        HDF_LOGE("%{public}s: read width failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t height = 0;
    if (!displayComposerData.ReadUint32(height)) {
        HDF_LOGE("%{public}s: read height failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t format = 0;

    uint32_t devId = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->CreateVirtualDisplay(width, height, format, devId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteInt32(format)) {
        HDF_LOGE("%{public}s: write format failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!displayComposerReply.WriteUint32(devId)) {
        HDF_LOGE("%{public}s: write devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubDestroyVirtualDisplay_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->DestroyVirtualDisplay(devId);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetVirtualDisplayBuffer_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> buffer = displayComposerData.ReadStrongParcelable<NativeBuffer>();

    sptr<HdifdParcelable> fence = displayComposerData.ReadStrongParcelable<HdifdParcelable>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetVirtualDisplayBuffer(devId, buffer, fence);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubSetDisplayProperty_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t id = 0;
    if (!displayComposerData.ReadUint32(id)) {
        HDF_LOGE("%{public}s: read id failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint64_t value = 0;
    if (!displayComposerData.ReadUint64(value)) {
        HDF_LOGE("%{public}s: read value failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->SetDisplayProperty(devId, id, value);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetDisplayProperty_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t devId = 0;
    if (!displayComposerData.ReadUint32(devId)) {
        HDF_LOGE("%{public}s: read devId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t id = 0;
    if (!displayComposerData.ReadUint32(id)) {
        HDF_LOGE("%{public}s: read id failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint64_t value = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetDisplayProperty(devId, id, value);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint64(value)) {
        HDF_LOGE("%{public}s: write value failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubInitCmdRequest_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::shared_ptr<SharedMemQueueMeta<int32_t>> requestMeta_ = SharedMemQueueMeta<int32_t>::UnMarshalling(displayComposerData);
    if (requestMeta_ == nullptr) {
        HDF_LOGE("%{public}s: SharedMemQueueMeta is nullptr", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::shared_ptr<SharedMemQueue<int32_t>> request = std::make_shared<SharedMemQueue<int32_t>>(*requestMeta_);

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->InitCmdRequest(request);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubCmdRequest_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool displayComposerMemSet = false;
    if (!displayComposerData.ReadBool(displayComposerMemSet)) {
        HDF_LOGE("%{public}s: failed to read displayComposerMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    uint32_t inEleCnt = 0;
    if (!displayComposerData.ReadUint32(inEleCnt)) {
        HDF_LOGE("%{public}s: read inEleCnt failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Display::Composer::V1_0::HdifdInfo> inFds;
    uint32_t inFdsSize = 0;
    if (!displayComposerData.ReadUint32(inFdsSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(inFdsSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Display::Composer::V1_0::HdifdInfo), HDF_ERR_INVALID_PARAM);
    inFds.clear();
    inFds.reserve(inFdsSize);
    for (uint32_t i0 = 0; i0 < inFdsSize; ++i0) {
        OHOS::HDI::Display::Composer::V1_0::HdifdInfo value0;
        if (!HdifdInfoBlockUnmarshalling(displayComposerData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        inFds.push_back(value0);
    }

    uint32_t outEleCnt = 0;

    std::vector<OHOS::HDI::Display::Composer::V1_0::HdifdInfo> outFds;
    if (displayComposerMemSet) {
        uint32_t capacity = 0;
        if (!displayComposerData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Display::Composer::V1_0::HdifdInfo), HDF_ERR_INVALID_PARAM);
        outFds.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->CmdRequest(inEleCnt, inFds, outEleCnt, outFds);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint32(outEleCnt)) {
        HDF_LOGE("%{public}s: write outEleCnt failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!displayComposerReply.WriteUint32(outFds.size())) {
        HDF_LOGE("%{public}s: write outFds size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : outFds) {
        if (!OHOS::HDI::Display::Composer::V1_0::HdifdInfoBlockMarshalling(displayComposerReply, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetCmdReply_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::shared_ptr<SharedMemQueue<int32_t>> reply;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetCmdReply(reply);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (reply == nullptr || !reply->IsGood() || reply->GetMeta() == nullptr || !reply->GetMeta()->Marshalling(displayComposerReply)) {
        HDF_LOGE("%{public}s: write reply failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}

int32_t OHOS::HDI::Display::Composer::V1_0::DisplayComposerStub::DisplayComposerStubGetVersion_(MessageParcel& displayComposerData, MessageParcel& displayComposerReply, MessageOption& displayComposerOption, sptr<OHOS::HDI::Display::Composer::V1_0::IDisplayComposer> impl)
{
    if (displayComposerData.ReadInterfaceToken() != OHOS::HDI::Display::Composer::V1_0::IDisplayComposer::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t displayComposerRet = impl->GetVersion(majorVer, minorVer);
    if (displayComposerRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, displayComposerRet);
        return displayComposerRet;
    }

    if (!displayComposerReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!displayComposerReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return displayComposerRet;
}
} // V1_0
} // Composer
} // Display
} // HDI
} // OHOS
