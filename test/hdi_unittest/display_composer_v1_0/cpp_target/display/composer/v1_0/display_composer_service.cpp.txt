/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/display_composer_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    display_composer_service

namespace OHOS {
namespace HDI {
namespace Display {
namespace Composer {
namespace V1_0 {
extern "C" IDisplayComposer *DisplayComposerImplGetInstance(void)
{
    return new (std::nothrow) DisplayComposerService();
}

int32_t DisplayComposerService::RegHotPlugCallback(const sptr<OHOS::HDI::Display::Composer::V1_0::IHotPlugCallback>& cb)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetClientBufferCacheCount(uint32_t devId, uint32_t count)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::RegDisplayVBlankCallback(uint32_t devId,
     const sptr<OHOS::HDI::Display::Composer::V1_0::IVBlankCallback>& cb)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayCapability(uint32_t devId,
     OHOS::HDI::Display::Composer::V1_0::DisplayCapability& info)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplaySupportedModes(uint32_t devId,
     std::vector<OHOS::HDI::Display::Composer::V1_0::DisplayModeInfo>& modes)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayMode(uint32_t devId, uint32_t& modeId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayMode(uint32_t devId, uint32_t modeId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayPowerStatus(uint32_t devId,
     OHOS::HDI::Display::Composer::V1_0::DispPowerStatus& status)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayPowerStatus(uint32_t devId,
     OHOS::HDI::Display::Composer::V1_0::DispPowerStatus status)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayBacklight(uint32_t devId, uint32_t& level)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayBacklight(uint32_t devId, uint32_t level)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayVsyncEnabled(uint32_t devId, bool enabled)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::CreateLayer(uint32_t devId,
     const OHOS::HDI::Display::Composer::V1_0::LayerInfo& layerInfo, uint32_t cacheCount, uint32_t& layerId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::DestroyLayer(uint32_t devId, uint32_t layerId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayClientCrop(uint32_t devId,
     const OHOS::HDI::Display::Composer::V1_0::IRect& rect)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayReleaseFence(uint32_t devId, std::vector<uint32_t>& layers,
     std::vector<sptr<OHOS::HDI::Display::HdifdParcelable>>& fences)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::CreateVirtualDisplay(uint32_t width, uint32_t height, int32_t& format, uint32_t& devId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::DestroyVirtualDisplay(uint32_t devId)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetVirtualDisplayBuffer(uint32_t devId, const sptr<NativeBuffer>& buffer,
     const sptr<OHOS::HDI::Display::HdifdParcelable>& fence)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::SetDisplayProperty(uint32_t devId, uint32_t id, uint64_t value)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetDisplayProperty(uint32_t devId, uint32_t id, uint64_t& value)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::InitCmdRequest(const std::shared_ptr<SharedMemQueue<int32_t>>& request)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::CmdRequest(uint32_t inEleCnt,
     const std::vector<OHOS::HDI::Display::Composer::V1_0::HdifdInfo>& inFds, uint32_t& outEleCnt, std::vector<OHOS::HDI::Display::Composer::V1_0::HdifdInfo>& outFds)
{
    return HDF_SUCCESS;
}

int32_t DisplayComposerService::GetCmdReply(std::shared_ptr<SharedMemQueue<int32_t>>& reply)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Composer
} // Display
} // HDI
} // OHOS
