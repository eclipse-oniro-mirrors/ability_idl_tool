/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USER_AUTH_V1_2_IUSERAUTHINTERFACE_H
#define OHOS_HDI_USER_AUTH_V1_2_IUSERAUTHINTERFACE_H

#include <stdint.h>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "user_auth/v1_2/user_auth_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace UserAuth {
namespace V1_2 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_USER_AUTH_INTERFACE_GET_VERSION = 0,
    CMD_USER_AUTH_INTERFACE_INIT = 1,
    CMD_USER_AUTH_INTERFACE_ADD_EXECUTOR = 2,
    CMD_USER_AUTH_INTERFACE_DELETE_EXECUTOR = 3,
    CMD_USER_AUTH_INTERFACE_OPEN_SESSION = 4,
    CMD_USER_AUTH_INTERFACE_CLOSE_SESSION = 5,
    CMD_USER_AUTH_INTERFACE_BEGIN_ENROLLMENT = 6,
    CMD_USER_AUTH_INTERFACE_UPDATE_ENROLLMENT_RESULT = 7,
    CMD_USER_AUTH_INTERFACE_CANCEL_ENROLLMENT = 8,
    CMD_USER_AUTH_INTERFACE_DELETE_CREDENTIAL = 9,
    CMD_USER_AUTH_INTERFACE_GET_CREDENTIAL = 10,
    CMD_USER_AUTH_INTERFACE_GET_USER_INFO = 11,
    CMD_USER_AUTH_INTERFACE_DELETE_USER = 12,
    CMD_USER_AUTH_INTERFACE_ENFORCE_DELETE_USER = 13,
    CMD_USER_AUTH_INTERFACE_BEGIN_AUTHENTICATION = 14,
    CMD_USER_AUTH_INTERFACE_UPDATE_AUTHENTICATION_RESULT = 15,
    CMD_USER_AUTH_INTERFACE_CANCEL_AUTHENTICATION = 16,
    CMD_USER_AUTH_INTERFACE_BEGIN_IDENTIFICATION = 17,
    CMD_USER_AUTH_INTERFACE_UPDATE_IDENTIFICATION_RESULT = 18,
    CMD_USER_AUTH_INTERFACE_CANCEL_IDENTIFICATION = 19,
    CMD_USER_AUTH_INTERFACE_GET_AUTH_TRUST_LEVEL = 20,
    CMD_USER_AUTH_INTERFACE_GET_VALID_SOLUTION = 21,
    CMD_USER_AUTH_INTERFACE_BEGIN_ENROLLMENT_V1_1 = 22,
    CMD_USER_AUTH_INTERFACE_BEGIN_AUTHENTICATION_V1_1 = 23,
    CMD_USER_AUTH_INTERFACE_BEGIN_IDENTIFICATION_V1_1 = 24,
    CMD_USER_AUTH_INTERFACE_GET_ALL_USER_INFO = 25,
    CMD_USER_AUTH_INTERFACE_GET_ALL_EXT_USER_INFO = 26,
    CMD_USER_AUTH_INTERFACE_BEGIN_AUTHENTICATION_V1_2 = 27,
    CMD_USER_AUTH_INTERFACE_BEGIN_ENROLLMENT_V1_2 = 28,
};

class IUserAuthInterface : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.user_auth.v1_2.IUserAuthInterface");

    virtual ~IUserAuthInterface() = default;

    static sptr<OHOS::HDI::UserAuth::V1_2::IUserAuthInterface> Get(bool isStub = false);
    static sptr<OHOS::HDI::UserAuth::V1_2::IUserAuthInterface> Get(const std::string &serviceName, bool isStub = false);

    virtual int32_t Init() = 0;

    virtual int32_t AddExecutor(const OHOS::HDI::UserAuth::V1_2::ExecutorRegisterInfo& info, uint64_t& index,
         std::vector<uint8_t>& publicKey, std::vector<uint64_t>& templateIds) = 0;

    virtual int32_t DeleteExecutor(uint64_t index) = 0;

    virtual int32_t OpenSession(int32_t userId, std::vector<uint8_t>& challenge) = 0;

    virtual int32_t CloseSession(int32_t userId) = 0;

    virtual int32_t BeginEnrollment(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& info) = 0;

    virtual int32_t UpdateEnrollmentResult(int32_t userId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::EnrollResultInfo& info) = 0;

    virtual int32_t CancelEnrollment(int32_t userId) = 0;

    virtual int32_t DeleteCredential(int32_t userId, uint64_t credentialId, const std::vector<uint8_t>& authToken,
         OHOS::HDI::UserAuth::V1_2::CredentialInfo& info) = 0;

    virtual int32_t GetCredential(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& infos) = 0;

    virtual int32_t GetUserInfo(int32_t userId, uint64_t& secureUid, OHOS::HDI::UserAuth::V1_2::PinSubType& pinSubType,
         std::vector<OHOS::HDI::UserAuth::V1_2::EnrolledInfo>& infos) = 0;

    virtual int32_t DeleteUser(int32_t userId, const std::vector<uint8_t>& authToken,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos) = 0;

    virtual int32_t EnforceDeleteUser(int32_t userId,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos) = 0;

    virtual int32_t BeginAuthentication(uint64_t contextId, const OHOS::HDI::UserAuth::V1_2::AuthSolution& param,
         std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfo>& scheduleInfos) = 0;

    virtual int32_t UpdateAuthenticationResult(uint64_t contextId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::AuthResultInfo& info) = 0;

    virtual int32_t CancelAuthentication(uint64_t contextId) = 0;

    virtual int32_t BeginIdentification(uint64_t contextId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& scheduleInfo) = 0;

    virtual int32_t UpdateIdentificationResult(uint64_t contextId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::IdentifyResultInfo& info) = 0;

    virtual int32_t CancelIdentification(uint64_t contextId) = 0;

    virtual int32_t GetAuthTrustLevel(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         uint32_t& authTrustLevel) = 0;

    virtual int32_t GetValidSolution(int32_t userId, const std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& authTypes,
         uint32_t authTrustLevel, std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& validTypes) = 0;

    virtual int32_t BeginEnrollmentV1_1(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info) = 0;

    virtual int32_t BeginAuthenticationV1_1(uint64_t contextId, const OHOS::HDI::UserAuth::V1_2::AuthSolution& param,
         std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos) = 0;

    virtual int32_t BeginIdentificationV1_1(uint64_t contextId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& scheduleInfo) = 0;

    virtual int32_t GetAllUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::UserInfo>& userInfos) = 0;

    virtual int32_t GetAllExtUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::ExtUserInfo>& userInfos) = 0;

    virtual int32_t BeginAuthenticationV1_2(uint64_t contextId,
         const OHOS::HDI::UserAuth::V1_2::AuthSolutionV1_2& param, std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos) = 0;

    virtual int32_t BeginEnrollmentV1_2(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParamV1_2& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 2;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_2
} // UserAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_USER_AUTH_V1_2_IUSERAUTHINTERFACE_H

