/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_2/user_auth_interface_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    user_auth_interface_service

namespace OHOS {
namespace HDI {
namespace UserAuth {
namespace V1_2 {
extern "C" IUserAuthInterface *UserAuthInterfaceImplGetInstance(void)
{
    return new (std::nothrow) UserAuthInterfaceService();
}

int32_t UserAuthInterfaceService::Init()
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::AddExecutor(const OHOS::HDI::UserAuth::V1_2::ExecutorRegisterInfo& info,
     uint64_t& index, std::vector<uint8_t>& publicKey, std::vector<uint64_t>& templateIds)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::DeleteExecutor(uint64_t index)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::OpenSession(int32_t userId, std::vector<uint8_t>& challenge)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::CloseSession(int32_t userId)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginEnrollment(int32_t userId, const std::vector<uint8_t>& authToken,
     const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::UpdateEnrollmentResult(int32_t userId, const std::vector<uint8_t>& scheduleResult,
     OHOS::HDI::UserAuth::V1_2::EnrollResultInfo& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::CancelEnrollment(int32_t userId)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::DeleteCredential(int32_t userId, uint64_t credentialId,
     const std::vector<uint8_t>& authToken, OHOS::HDI::UserAuth::V1_2::CredentialInfo& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetCredential(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
     std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& infos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetUserInfo(int32_t userId, uint64_t& secureUid,
     OHOS::HDI::UserAuth::V1_2::PinSubType& pinSubType, std::vector<OHOS::HDI::UserAuth::V1_2::EnrolledInfo>& infos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::DeleteUser(int32_t userId, const std::vector<uint8_t>& authToken,
     std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::EnforceDeleteUser(int32_t userId,
     std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginAuthentication(uint64_t contextId,
     const OHOS::HDI::UserAuth::V1_2::AuthSolution& param, std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfo>& scheduleInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::UpdateAuthenticationResult(uint64_t contextId,
     const std::vector<uint8_t>& scheduleResult, OHOS::HDI::UserAuth::V1_2::AuthResultInfo& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::CancelAuthentication(uint64_t contextId)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginIdentification(uint64_t contextId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
     const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& scheduleInfo)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::UpdateIdentificationResult(uint64_t contextId,
     const std::vector<uint8_t>& scheduleResult, OHOS::HDI::UserAuth::V1_2::IdentifyResultInfo& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::CancelIdentification(uint64_t contextId)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetAuthTrustLevel(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
     uint32_t& authTrustLevel)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetValidSolution(int32_t userId,
     const std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& authTypes, uint32_t authTrustLevel, std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& validTypes)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginEnrollmentV1_1(int32_t userId, const std::vector<uint8_t>& authToken,
     const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginAuthenticationV1_1(uint64_t contextId,
     const OHOS::HDI::UserAuth::V1_2::AuthSolution& param, std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginIdentificationV1_1(uint64_t contextId,
     OHOS::HDI::UserAuth::V1_2::AuthType authType, const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& scheduleInfo)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetAllUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::UserInfo>& userInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::GetAllExtUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::ExtUserInfo>& userInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginAuthenticationV1_2(uint64_t contextId,
     const OHOS::HDI::UserAuth::V1_2::AuthSolutionV1_2& param, std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos)
{
    return HDF_SUCCESS;
}

int32_t UserAuthInterfaceService::BeginEnrollmentV1_2(int32_t userId, const std::vector<uint8_t>& authToken,
     const OHOS::HDI::UserAuth::V1_2::EnrollParamV1_2& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info)
{
    return HDF_SUCCESS;
}

} // V1_2
} // UserAuth
} // HDI
} // OHOS
