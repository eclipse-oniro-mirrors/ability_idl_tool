/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_USER_AUTH_V1_2_USERAUTHINTERFACESERVICE_H
#define OHOS_HDI_USER_AUTH_V1_2_USERAUTHINTERFACESERVICE_H

#include "v1_2/iuser_auth_interface.h"

namespace OHOS {
namespace HDI {
namespace UserAuth {
namespace V1_2 {
class UserAuthInterfaceService : public OHOS::HDI::UserAuth::V1_2::IUserAuthInterface {
public:
    UserAuthInterfaceService() = default;
    virtual ~UserAuthInterfaceService() = default;

    int32_t Init() override;

    int32_t AddExecutor(const OHOS::HDI::UserAuth::V1_2::ExecutorRegisterInfo& info, uint64_t& index,
         std::vector<uint8_t>& publicKey, std::vector<uint64_t>& templateIds) override;

    int32_t DeleteExecutor(uint64_t index) override;

    int32_t OpenSession(int32_t userId, std::vector<uint8_t>& challenge) override;

    int32_t CloseSession(int32_t userId) override;

    int32_t BeginEnrollment(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& info) override;

    int32_t UpdateEnrollmentResult(int32_t userId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::EnrollResultInfo& info) override;

    int32_t CancelEnrollment(int32_t userId) override;

    int32_t DeleteCredential(int32_t userId, uint64_t credentialId, const std::vector<uint8_t>& authToken,
         OHOS::HDI::UserAuth::V1_2::CredentialInfo& info) override;

    int32_t GetCredential(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& infos) override;

    int32_t GetUserInfo(int32_t userId, uint64_t& secureUid, OHOS::HDI::UserAuth::V1_2::PinSubType& pinSubType,
         std::vector<OHOS::HDI::UserAuth::V1_2::EnrolledInfo>& infos) override;

    int32_t DeleteUser(int32_t userId, const std::vector<uint8_t>& authToken,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos) override;

    int32_t EnforceDeleteUser(int32_t userId,
         std::vector<OHOS::HDI::UserAuth::V1_2::CredentialInfo>& deletedInfos) override;

    int32_t BeginAuthentication(uint64_t contextId, const OHOS::HDI::UserAuth::V1_2::AuthSolution& param,
         std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfo>& scheduleInfos) override;

    int32_t UpdateAuthenticationResult(uint64_t contextId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::AuthResultInfo& info) override;

    int32_t CancelAuthentication(uint64_t contextId) override;

    int32_t BeginIdentification(uint64_t contextId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfo& scheduleInfo) override;

    int32_t UpdateIdentificationResult(uint64_t contextId, const std::vector<uint8_t>& scheduleResult,
         OHOS::HDI::UserAuth::V1_2::IdentifyResultInfo& info) override;

    int32_t CancelIdentification(uint64_t contextId) override;

    int32_t GetAuthTrustLevel(int32_t userId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         uint32_t& authTrustLevel) override;

    int32_t GetValidSolution(int32_t userId, const std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& authTypes,
         uint32_t authTrustLevel, std::vector<OHOS::HDI::UserAuth::V1_2::AuthType>& validTypes) override;

    int32_t BeginEnrollmentV1_1(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParam& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info) override;

    int32_t BeginAuthenticationV1_1(uint64_t contextId, const OHOS::HDI::UserAuth::V1_2::AuthSolution& param,
         std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos) override;

    int32_t BeginIdentificationV1_1(uint64_t contextId, OHOS::HDI::UserAuth::V1_2::AuthType authType,
         const std::vector<uint8_t>& challenge, uint32_t executorSensorHint, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& scheduleInfo) override;

    int32_t GetAllUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::UserInfo>& userInfos) override;

    int32_t GetAllExtUserInfo(std::vector<OHOS::HDI::UserAuth::V1_2::ExtUserInfo>& userInfos) override;

    int32_t BeginAuthenticationV1_2(uint64_t contextId, const OHOS::HDI::UserAuth::V1_2::AuthSolutionV1_2& param,
         std::vector<OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1>& scheduleInfos) override;

    int32_t BeginEnrollmentV1_2(int32_t userId, const std::vector<uint8_t>& authToken,
         const OHOS::HDI::UserAuth::V1_2::EnrollParamV1_2& param, OHOS::HDI::UserAuth::V1_2::ScheduleInfoV1_1& info) override;

};
} // V1_2
} // UserAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_USER_AUTH_V1_2_USERAUTHINTERFACESERVICE_H

