/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/thermal_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "thermal/v1_1/fan_callback_proxy.h"
#include "thermal/v1_1/thermal_callback_proxy.h"

#define HDF_LOG_TAG    thermal_interface_stub

namespace OHOS {
namespace HDI {
namespace Thermal {
namespace V1_1 {


sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> OHOS::HDI::Thermal::V1_1::IThermalInterface::Get(bool isStub)
{
    return OHOS::HDI::Thermal::V1_1::IThermalInterface::Get("thermal_interface_service", isStub);
}

sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> OHOS::HDI::Thermal::V1_1::IThermalInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "thermal_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Thermal::V1_1::IThermalInterface *>(impl);
}


OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStub(const sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::~ThermalInterfaceStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_THERMAL_INTERFACE_GET_VERSION:
            return ThermalInterfaceStubGetVersion(data, reply, option);
        case CMD_THERMAL_INTERFACE_SET_CPU_FREQ:
            return ThermalInterfaceStubSetCpuFreq(data, reply, option);
        case CMD_THERMAL_INTERFACE_SET_GPU_FREQ:
            return ThermalInterfaceStubSetGpuFreq(data, reply, option);
        case CMD_THERMAL_INTERFACE_SET_BATTERY_CURRENT:
            return ThermalInterfaceStubSetBatteryCurrent(data, reply, option);
        case CMD_THERMAL_INTERFACE_GET_THERMAL_ZONE_INFO:
            return ThermalInterfaceStubGetThermalZoneInfo(data, reply, option);
        case CMD_THERMAL_INTERFACE_ISOLATE_CPU:
            return ThermalInterfaceStubIsolateCpu(data, reply, option);
        case CMD_THERMAL_INTERFACE_REGISTER:
            return ThermalInterfaceStubRegister(data, reply, option);
        case CMD_THERMAL_INTERFACE_UNREGISTER:
            return ThermalInterfaceStubUnregister(data, reply, option);
        case CMD_THERMAL_INTERFACE_REGISTER_FAN_CALLBACK:
            return ThermalInterfaceStubRegisterFanCallback(data, reply, option);
        case CMD_THERMAL_INTERFACE_UNREGISTER_FAN_CALLBACK:
            return ThermalInterfaceStubUnregisterFanCallback(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetCpuFreq(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetCpuFreq_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetGpuFreq(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetGpuFreq_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetBatteryCurrent(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetBatteryCurrent_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetThermalZoneInfo(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetThermalZoneInfo_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubIsolateCpu(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubIsolateCpu_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegister(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegister_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregister(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregister_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegisterFanCallback(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegisterFanCallback_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregisterFanCallback(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregisterFanCallback_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetVersion(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption)
{
    return OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetVersion_(thermalInterfaceData, thermalInterfaceReply, thermalInterfaceOption, impl_);
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetCpuFreq_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t freq = 0;
    if (!thermalInterfaceData.ReadInt32(freq)) {
        HDF_LOGE("%{public}s: read freq failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->SetCpuFreq(freq);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetGpuFreq_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t freq = 0;
    if (!thermalInterfaceData.ReadInt32(freq)) {
        HDF_LOGE("%{public}s: read freq failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->SetGpuFreq(freq);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubSetBatteryCurrent_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t current = 0;
    if (!thermalInterfaceData.ReadInt32(current)) {
        HDF_LOGE("%{public}s: read current failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->SetBatteryCurrent(current);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetThermalZoneInfo_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Thermal::V1_1::HdfThermalCallbackInfo event;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->GetThermalZoneInfo(event);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    if (!OHOS::HDI::Thermal::V1_1::HdfThermalCallbackInfoBlockMarshalling(thermalInterfaceReply, event)) {
        HDF_LOGE("%{public}s: write event failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubIsolateCpu_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t num = 0;
    if (!thermalInterfaceData.ReadInt32(num)) {
        HDF_LOGE("%{public}s: read num failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->IsolateCpu(num);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegister_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Thermal::V1_1::IThermalCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = thermalInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Thermal::V1_1::ThermalCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->Register(callbackObj);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregister_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->Unregister();
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubRegisterFanCallback_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Thermal::V1_1::IFanCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = thermalInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Thermal::V1_1::FanCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->RegisterFanCallback(callbackObj);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubUnregisterFanCallback_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->UnregisterFanCallback();
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    return thermalInterfaceRet;
}

int32_t OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub::ThermalInterfaceStubGetVersion_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl)
{
    if (thermalInterfaceData.ReadInterfaceToken() != OHOS::HDI::Thermal::V1_1::IThermalInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t thermalInterfaceRet = impl->GetVersion(majorVer, minorVer);
    if (thermalInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, thermalInterfaceRet);
        return thermalInterfaceRet;
    }

    if (!thermalInterfaceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!thermalInterfaceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return thermalInterfaceRet;
}
} // V1_1
} // Thermal
} // HDI
} // OHOS
