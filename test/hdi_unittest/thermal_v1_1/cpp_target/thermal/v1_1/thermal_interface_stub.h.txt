/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_THERMAL_V1_1_THERMALINTERFACESTUB_H
#define OHOS_HDI_THERMAL_V1_1_THERMALINTERFACESTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_1/ithermal_interface.h"

namespace OHOS {
namespace HDI {
namespace Thermal {
namespace V1_1 {

using namespace OHOS;
class ThermalInterfaceStub : public IPCObjectStub {
public:
    explicit ThermalInterfaceStub(const sptr<IThermalInterface> &impl);
    virtual ~ThermalInterfaceStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t ThermalInterfaceStubSetCpuFreq_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubSetGpuFreq_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubSetBatteryCurrent_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubGetThermalZoneInfo_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubIsolateCpu_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubRegister_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubUnregister_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubRegisterFanCallback_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubUnregisterFanCallback_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

    static int32_t ThermalInterfaceStubGetVersion_(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption, sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl);

private:
    int32_t ThermalInterfaceStubSetCpuFreq(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubSetGpuFreq(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubSetBatteryCurrent(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubGetThermalZoneInfo(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubIsolateCpu(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubRegister(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubUnregister(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubRegisterFanCallback(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubUnregisterFanCallback(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);

    int32_t ThermalInterfaceStubGetVersion(MessageParcel& thermalInterfaceData, MessageParcel& thermalInterfaceReply, MessageOption& thermalInterfaceOption);


    static inline ObjectDelegator<OHOS::HDI::Thermal::V1_1::ThermalInterfaceStub, OHOS::HDI::Thermal::V1_1::IThermalInterface> objDelegator_;
    sptr<OHOS::HDI::Thermal::V1_1::IThermalInterface> impl_;
};
} // V1_1
} // Thermal
} // HDI
} // OHOS

#endif // OHOS_HDI_THERMAL_V1_1_THERMALINTERFACESTUB_H

