/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/thermal_types.h"
#include <hdf_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Thermal {
namespace V1_1 {



bool ThermalZoneInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Thermal::V1_1::ThermalZoneInfo& dataBlock)
{
    if (!data.WriteCString(dataBlock.type.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.temp)) {
        HDF_LOGE("%{public}s: write dataBlock.temp failed!", __func__);
        return false;
    }
    return true;
}

bool ThermalZoneInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Thermal::V1_1::ThermalZoneInfo& dataBlock)
{
    const char* typeCp = data.ReadCString();
    if (typeCp == nullptr) {
        HDF_LOGE("%{public}s: read typeCp failed", __func__);
        return false;
    }
    dataBlock.type = typeCp;

    if (!data.ReadInt32(dataBlock.temp)) {
        HDF_LOGE("%{public}s: read dataBlock.temp failed!", __func__);
        return false;
    }
    return true;
}

bool HdfThermalCallbackInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Thermal::V1_1::HdfThermalCallbackInfo& dataBlock)
{
    if (!data.WriteUint32(dataBlock.info.size())) {
        HDF_LOGE("%{public}s: failed write dataBlock.info.size", __func__);
        return false;
    }
    for (const auto& it0 : dataBlock.info) {
        if (!ThermalZoneInfoBlockMarshalling(data, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return false;
        }
    }
    return true;
}

bool HdfThermalCallbackInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Thermal::V1_1::HdfThermalCallbackInfo& dataBlock)
{
    uint32_t infoSize = 0;
    if (!data.ReadUint32(infoSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    HDI_CHECK_VALUE_RETURN(infoSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Thermal::V1_1::ThermalZoneInfo), false);
    dataBlock.info.clear();
    dataBlock.info.reserve(infoSize);
    for (uint32_t i0 = 0; i0 < infoSize; ++i0) {
        OHOS::HDI::Thermal::V1_1::ThermalZoneInfo value0;
        if (!OHOS::HDI::Thermal::V1_1::ThermalZoneInfoBlockUnmarshalling(data, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return false;
        }
        dataBlock.info.push_back(value0);
    }
    return true;
}

} // V1_1
} // Thermal
} // HDI
} // OHOS
