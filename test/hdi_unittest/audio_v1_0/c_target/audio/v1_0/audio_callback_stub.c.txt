/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_callback_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdf_dlist.h>
#include <osal_mem.h>
#include <securec.h>
#include <stub_collector.h>

#define HDF_LOG_TAG    audio_callback_stub


static int32_t SerStubRenderCallback(struct IAudioCallback *serviceImpl, struct HdfSBuf *audioCallbackData, struct HdfSBuf *audioCallbackReply)
{
    int32_t audioCallbackRet = HDF_FAILURE;
    enum AudioCallbackType type;
    int8_t reserved = 0;
    int8_t cookie = 0;

    {
        uint64_t enumTmp = 0;
        if (!HdfSbufReadUint64(audioCallbackData, &enumTmp)) {
            HDF_LOGE("%{public}s: read type failed!", __func__);
            audioCallbackRet = HDF_ERR_INVALID_PARAM;
            goto FINISHED;
        }
        type = (enum AudioCallbackType)enumTmp;
    }

    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioCallbackRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->RenderCallback == NULL) {
        HDF_LOGE("%{public}s: invalid interface function RenderCallback ", __func__);
        audioCallbackRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioCallbackRet = serviceImpl->RenderCallback(serviceImpl, type, &reserved, &cookie);
    if (audioCallbackRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, audioCallbackRet);
        goto FINISHED;
    }

    if (!HdfSbufWriteInt8(audioCallbackReply, reserved)) {
        HDF_LOGE("%{public}s: write reserved failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteInt8(audioCallbackReply, cookie)) {
        HDF_LOGE("%{public}s: write cookie failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    return audioCallbackRet;
}

static int32_t SerStubParamCallback(struct IAudioCallback *serviceImpl, struct HdfSBuf *audioCallbackData, struct HdfSBuf *audioCallbackReply)
{
    int32_t audioCallbackRet = HDF_FAILURE;
    enum AudioExtParamKey key;
    char* condition = NULL;
    char* value = NULL;
    int8_t reserved = 0;
    int8_t cookie = 0;

    {
        uint64_t enumTmp = 0;
        if (!HdfSbufReadUint64(audioCallbackData, &enumTmp)) {
            HDF_LOGE("%{public}s: read key failed!", __func__);
            audioCallbackRet = HDF_ERR_INVALID_PARAM;
            goto FINISHED;
        }
        key = (enum AudioExtParamKey)enumTmp;
    }

    const char *conditionCp = HdfSbufReadString(audioCallbackData);
    if (conditionCp == NULL) {
        HDF_LOGE("%{public}s: read conditionCp failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }
    condition = strdup(conditionCp);

    const char *valueCp = HdfSbufReadString(audioCallbackData);
    if (valueCp == NULL) {
        HDF_LOGE("%{public}s: read valueCp failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }
    value = strdup(valueCp);

    if (!HdfSbufReadInt8(audioCallbackData, &cookie)) {
        HDF_LOGE("%{public}s: read &cookie failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (serviceImpl == NULL) {
        HDF_LOGE("%{public}s: invalid serviceImpl object", __func__);
        audioCallbackRet = HDF_ERR_INVALID_OBJECT;
        goto FINISHED;
    }

    if (serviceImpl->ParamCallback == NULL) {
        HDF_LOGE("%{public}s: invalid interface function ParamCallback ", __func__);
        audioCallbackRet = HDF_ERR_NOT_SUPPORT;
        goto FINISHED;
    }

    audioCallbackRet = serviceImpl->ParamCallback(serviceImpl, key, condition, value, &reserved, cookie);
    if (audioCallbackRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, audioCallbackRet);
        goto FINISHED;
    }

    if (!HdfSbufWriteInt8(audioCallbackReply, reserved)) {
        HDF_LOGE("%{public}s: write reserved failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    if (condition != NULL) {
        OsalMemFree(condition);
        condition = NULL;
    }
    if (value != NULL) {
        OsalMemFree(value);
        value = NULL;
    }
    return audioCallbackRet;
}

static int32_t SerStubGetVersion(struct IAudioCallback *serviceImpl, struct HdfSBuf *audioCallbackData, struct HdfSBuf *audioCallbackReply)
{
    int32_t audioCallbackRet = HDF_SUCCESS;
    if (!HdfSbufWriteUint32(audioCallbackReply, IAUDIO_CALLBACK_MAJOR_VERSION)) {
        HDF_LOGE("%{public}s: write IAUDIO_CALLBACK_MAJOR_VERSION failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

    if (!HdfSbufWriteUint32(audioCallbackReply, IAUDIO_CALLBACK_MINOR_VERSION)) {
        HDF_LOGE("%{public}s: write IAUDIO_CALLBACK_MINOR_VERSION failed!", __func__);
        audioCallbackRet = HDF_ERR_INVALID_PARAM;
        goto FINISHED;
    }

FINISHED:
    return audioCallbackRet;
}

static struct HdfRemoteService *AudioCallbackStubAsObject(struct IAudioCallback *self)
{
    if (self == NULL) {
        return NULL;
    }
    struct AudioCallbackStub *stub = CONTAINER_OF(self, struct AudioCallbackStub, interface);
    return stub->remote;
}

static int32_t AudioCallbackOnRemoteRequest(struct HdfRemoteService *remote, int code, struct HdfSBuf *data, struct HdfSBuf *reply)
{
    struct AudioCallbackStub *stub = (struct AudioCallbackStub*)remote;
    if (stub == NULL || stub->remote == NULL || stub->interface == NULL) {
        HDF_LOGE("%{public}s: invalid stub object", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }
    if (!HdfRemoteServiceCheckInterfaceToken(stub->remote, data)) {
        HDF_LOGE("%{public}s: interface token check failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    switch (code) {
        case CMD_AUDIO_CALLBACK_RENDER_CALLBACK:
            return SerStubRenderCallback(stub->interface, data, reply);
        case CMD_AUDIO_CALLBACK_PARAM_CALLBACK:
            return SerStubParamCallback(stub->interface, data, reply);
        case CMD_AUDIO_CALLBACK_GET_VERSION:
            return SerStubGetVersion(stub->interface, data, reply);
        default: {
            HDF_LOGE("%{public}s: not support cmd %{public}d", __func__, code);
            return HDF_ERR_INVALID_PARAM;
        }
    }
}

static struct HdfRemoteService **AudioCallbackStubNewInstance(void *impl)
{
    if (impl == NULL) {
        HDF_LOGE("%{public}s: impl is null", __func__);
        return NULL;
    }

    struct IAudioCallback *serviceImpl = (struct IAudioCallback *)impl;
    struct AudioCallbackStub *stub = OsalMemCalloc(sizeof(struct AudioCallbackStub));
    if (stub == NULL) {
        HDF_LOGE("%{public}s: failed to malloc stub object", __func__);
        return NULL;
    }
    stub->remote = HdfRemoteServiceObtain((struct HdfObject *)stub, &stub->dispatcher);
    if (stub->remote == NULL) {
        OsalMemFree(stub);
        return NULL;
    }
    (void)HdfRemoteServiceSetInterfaceDesc(stub->remote, IAUDIOCALLBACK_INTERFACE_DESC);
    stub->dispatcher.Dispatch = AudioCallbackOnRemoteRequest;
    stub->interface = serviceImpl;
    stub->interface->AsObject = AudioCallbackStubAsObject;
    return &stub->remote;
}

static void AudioCallbackStubRelease(struct HdfRemoteService **remote)
{
    if (remote == NULL) {
        return;
    }
    struct AudioCallbackStub *stub = CONTAINER_OF(remote, struct AudioCallbackStub, remote);
    HdfRemoteServiceRecycle(stub->remote);
    OsalMemFree(stub);
}

__attribute__((unused)) static struct StubConstructor g_audiocallbackConstructor = {
    .constructor = AudioCallbackStubNewInstance,
    .destructor = AudioCallbackStubRelease,
};

__attribute__((constructor)) static void AudioCallbackStubRegister(void)
{
    HDF_LOGI("%{public}s: register stub constructor of '%{public}s'", __func__, IAUDIOCALLBACK_INTERFACE_DESC);
    StubConstructorRegister(IAUDIOCALLBACK_INTERFACE_DESC, &g_audiocallbackConstructor);
}
