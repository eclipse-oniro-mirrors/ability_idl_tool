/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_AUDIO_V1_0_IAUDIOADAPTER_H
#define OHOS_HDI_AUDIO_V1_0_IAUDIOADAPTER_H

#include <stdbool.h>
#include <stdint.h>
#include <hdf_base.h>
#include "audio/v1_0/audio_types.h"
#include "audio/v1_0/iaudio_callback.h"
#include "audio/v1_0/iaudio_capture.h"
#include "audio/v1_0/iaudio_render.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct HdfRemoteService;

#define IAUDIOADAPTER_INTERFACE_DESC "ohos.hdi.audio.v1_0.IAudioAdapter"

#define IAUDIO_ADAPTER_MAJOR_VERSION 1
#define IAUDIO_ADAPTER_MINOR_VERSION 0

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

enum {
    CMD_AUDIO_ADAPTER_GET_VERSION = 0,
    CMD_AUDIO_ADAPTER_INIT_ALL_PORTS = 1,
    CMD_AUDIO_ADAPTER_CREATE_RENDER = 2,
    CMD_AUDIO_ADAPTER_DESTROY_RENDER = 3,
    CMD_AUDIO_ADAPTER_CREATE_CAPTURE = 4,
    CMD_AUDIO_ADAPTER_DESTROY_CAPTURE = 5,
    CMD_AUDIO_ADAPTER_GET_PORT_CAPABILITY = 6,
    CMD_AUDIO_ADAPTER_SET_PASSTHROUGH_MODE = 7,
    CMD_AUDIO_ADAPTER_GET_PASSTHROUGH_MODE = 8,
    CMD_AUDIO_ADAPTER_GET_DEVICE_STATUS = 9,
    CMD_AUDIO_ADAPTER_UPDATE_AUDIO_ROUTE = 10,
    CMD_AUDIO_ADAPTER_RELEASE_AUDIO_ROUTE = 11,
    CMD_AUDIO_ADAPTER_SET_MIC_MUTE = 12,
    CMD_AUDIO_ADAPTER_GET_MIC_MUTE = 13,
    CMD_AUDIO_ADAPTER_SET_VOICE_VOLUME = 14,
    CMD_AUDIO_ADAPTER_SET_EXTRA_PARAMS = 15,
    CMD_AUDIO_ADAPTER_GET_EXTRA_PARAMS = 16,
    CMD_AUDIO_ADAPTER_REG_EXTRA_PARAM_OBSERVER = 17,
};

struct IAudioAdapter {
    int32_t (*InitAllPorts)(struct IAudioAdapter *self);

    int32_t (*CreateRender)(struct IAudioAdapter *self, const struct AudioDeviceDescriptor* desc,
         const struct AudioSampleAttributes* attrs, struct IAudioRender** render, uint32_t* renderId);

    int32_t (*DestroyRender)(struct IAudioAdapter *self, uint32_t renderId);

    int32_t (*CreateCapture)(struct IAudioAdapter *self, const struct AudioDeviceDescriptor* desc,
         const struct AudioSampleAttributes* attrs, struct IAudioCapture** capture, uint32_t* captureId);

    int32_t (*DestroyCapture)(struct IAudioAdapter *self, uint32_t captureId);

    int32_t (*GetPortCapability)(struct IAudioAdapter *self, const struct AudioPort* port,
         struct AudioPortCapability* capability);

    int32_t (*SetPassthroughMode)(struct IAudioAdapter *self, const struct AudioPort* port,
         enum AudioPortPassthroughMode mode);

    int32_t (*GetPassthroughMode)(struct IAudioAdapter *self, const struct AudioPort* port,
         enum AudioPortPassthroughMode* mode);

    int32_t (*GetDeviceStatus)(struct IAudioAdapter *self, struct AudioDeviceStatus* status);

    int32_t (*UpdateAudioRoute)(struct IAudioAdapter *self, const struct AudioRoute* route, int32_t* routeHandle);

    int32_t (*ReleaseAudioRoute)(struct IAudioAdapter *self, int32_t routeHandle);

    int32_t (*SetMicMute)(struct IAudioAdapter *self, bool mute);

    int32_t (*GetMicMute)(struct IAudioAdapter *self, bool* mute);

    int32_t (*SetVoiceVolume)(struct IAudioAdapter *self, float volume);

    int32_t (*SetExtraParams)(struct IAudioAdapter *self, enum AudioExtParamKey key, const char* condition,
         const char* value);

    int32_t (*GetExtraParams)(struct IAudioAdapter *self, enum AudioExtParamKey key, const char* condition, char* value,
         uint32_t valueLen);

    int32_t (*RegExtraParamObserver)(struct IAudioAdapter *self, struct IAudioCallback* audioCallback, int8_t cookie);

    int32_t (*GetVersion)(struct IAudioAdapter *self, uint32_t* majorVer, uint32_t* minorVer);

    struct HdfRemoteService* (*AsObject)(struct IAudioAdapter *self);
};

// no external method used to create client object, it only support ipc mode
struct IAudioAdapter *IAudioAdapterGet(struct HdfRemoteService *remote);

// external method used to release client object, it support ipc and passthrought mode
void IAudioAdapterRelease(struct IAudioAdapter *instance, bool isStub);
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // OHOS_HDI_AUDIO_V1_0_IAUDIOADAPTER_H