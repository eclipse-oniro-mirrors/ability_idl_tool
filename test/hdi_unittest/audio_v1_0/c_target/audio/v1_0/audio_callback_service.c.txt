/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/audio_callback_service.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <osal_mem.h>
#include <securec.h>

#define HDF_LOG_TAG    audio_callback_service

static int32_t AudioCallbackRenderCallback(struct IAudioCallback *self, enum AudioCallbackType type, int8_t* reserved,
     int8_t* cookie)
{
    return HDF_SUCCESS;
}

static int32_t AudioCallbackParamCallback(struct IAudioCallback *self, enum AudioExtParamKey key, const char* condition,
     const char* value, int8_t* reserved, int8_t cookie)
{
    return HDF_SUCCESS;
}

static int32_t AudioCallbackGetVersion(struct IAudioCallback *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IAUDIO_CALLBACK_MAJOR_VERSION;
    *minorVer = IAUDIO_CALLBACK_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IAudioCallback *AudioCallbackServiceGet(void)
{
    struct AudioCallbackService *service = (struct AudioCallbackService *)OsalMemCalloc(sizeof(struct AudioCallbackService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc AudioCallbackService obj failed!", __func__);
        return NULL;
    }

    service->interface.RenderCallback = AudioCallbackRenderCallback;
    service->interface.ParamCallback = AudioCallbackParamCallback;
    service->interface.GetVersion = AudioCallbackGetVersion;
    return &service->interface;
}

void AudioCallbackServiceRelease(struct IAudioCallback *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
