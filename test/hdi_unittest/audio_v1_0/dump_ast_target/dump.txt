AST[name: IAudioManager file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/IAudioManager.idl]
package ohos.hdi.audio.v1_0;

import ohos.hdi.audio.v1_0.IAudioAdapter;
import ohos.hdi.audio.v1_0.AudioTypes;

[mini, lite, full] interface IAudioManager {
    [mini, lite, full] GetAllAdapters(
      [out] ohos.hdi.audio.v1_0.AudioAdapterDescriptor[] descs);

    [mini, lite, full] LoadAdapter(
      [in] ohos.hdi.audio.v1_0.AudioAdapterDescriptor desc,
      [out] ohos.hdi.audio.v1_0.IAudioAdapter adapter);

    [mini, lite, full] UnloadAdapter(
      [in] std::string adapterName);

    [mini, lite, full] ReleaseAudioManagerObject();
}


AST[name: IAudioRender file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/IAudioRender.idl]
package ohos.hdi.audio.v1_0;

import ohos.hdi.audio.v1_0.IAudioCallback;
import ohos.hdi.audio.v1_0.AudioTypes;

[mini, lite, full] interface IAudioRender {
    [mini, lite, full] GetLatency(
      [out] unsigned int ms);

    [mini, lite, full] RenderFrame(
      [in] byte[] frame,
      [out] unsigned long replyBytes);

    [mini, lite, full] GetRenderPosition(
      [out] unsigned long frames,
      [out] ohos.hdi.audio.v1_0.AudioTimeStamp time);

    [mini, lite, full] SetRenderSpeed(
      [in] float speed);

    [mini, lite, full] GetRenderSpeed(
      [out] float speed);

    [mini, lite, full] SetChannelMode(
      [in] ohos.hdi.audio.v1_0.AudioChannelMode mode);

    [mini, lite, full] GetChannelMode(
      [out] ohos.hdi.audio.v1_0.AudioChannelMode mode);

    [mini, lite, full] RegCallback(
      [in] ohos.hdi.audio.v1_0.IAudioCallback audioCallback,
      [in] byte cookie);

    [mini, lite, full] DrainBuffer(
      [out] ohos.hdi.audio.v1_0.AudioDrainNotifyType type);

    [mini, lite, full] IsSupportsDrain(
      [out] boolean support);

    [mini, lite, full] CheckSceneCapability(
      [in] ohos.hdi.audio.v1_0.AudioSceneDescriptor scene,
      [out] boolean supported);

    [mini, lite, full] SelectScene(
      [in] ohos.hdi.audio.v1_0.AudioSceneDescriptor scene);

    [mini, lite, full] SetMute(
      [in] boolean mute);

    [mini, lite, full] GetMute(
      [out] boolean mute);

    [mini, lite, full] SetVolume(
      [in] float volume);

    [mini, lite, full] GetVolume(
      [out] float volume);

    [mini, lite, full] GetGainThreshold(
      [out] float min,
      [out] float max);

    [mini, lite, full] GetGain(
      [out] float gain);

    [mini, lite, full] SetGain(
      [in] float gain);

    [mini, lite, full] GetFrameSize(
      [out] unsigned long size);

    [mini, lite, full] GetFrameCount(
      [out] unsigned long count);

    [mini, lite, full] SetSampleAttributes(
      [in] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs);

    [mini, lite, full] GetSampleAttributes(
      [out] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs);

    [mini, lite, full] GetCurrentChannelId(
      [out] unsigned int channelId);

    [mini, lite, full] SetExtraParams(
      [in] std::string keyValueList);

    [mini, lite, full] GetExtraParams(
      [out] std::string keyValueList);

    [mini, lite, full] ReqMmapBuffer(
      [in] int reqSize,
      [out] ohos.hdi.audio.v1_0.AudioMmapBufferDescriptor desc);

    [mini, lite, full] GetMmapPosition(
      [out] unsigned long frames,
      [out] ohos.hdi.audio.v1_0.AudioTimeStamp time);

    [mini, lite, full] AddAudioEffect(
      [in] unsigned long effectid);

    [mini, lite, full] RemoveAudioEffect(
      [in] unsigned long effectid);

    [mini, lite, full] GetFrameBufferSize(
      [out] unsigned long bufferSize);

    [mini, lite, full] Start();

    [mini, lite, full] Stop();

    [mini, lite, full] Pause();

    [mini, lite, full] Resume();

    [mini, lite, full] Flush();

    [mini, lite, full] TurnStandbyMode();

    [mini, lite, full] AudioDevDump(
      [in] int range,
      [in] int fd);

    [mini, lite, full] IsSupportsPauseAndResume(
      [out] boolean supportPause,
      [out] boolean supportResume);

    [mini, lite, full] SetBufferSize(
      [in] unsigned int size);
}


AST[name: IAudioCapture file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/IAudioCapture.idl]
package ohos.hdi.audio.v1_0;

import ohos.hdi.audio.v1_0.AudioTypes;

[mini, lite, full] interface IAudioCapture {
    [mini, lite, full] CaptureFrame(
      [out] byte[] frame,
      [out] unsigned long replyBytes);

    [mini, lite, full] GetCapturePosition(
      [out] unsigned long frames,
      [out] ohos.hdi.audio.v1_0.AudioTimeStamp time);

    [mini, lite, full] CheckSceneCapability(
      [in] ohos.hdi.audio.v1_0.AudioSceneDescriptor scene,
      [out] boolean supported);

    [mini, lite, full] SelectScene(
      [in] ohos.hdi.audio.v1_0.AudioSceneDescriptor scene);

    [mini, lite, full] SetMute(
      [in] boolean mute);

    [mini, lite, full] GetMute(
      [out] boolean mute);

    [mini, lite, full] SetVolume(
      [in] float volume);

    [mini, lite, full] GetVolume(
      [out] float volume);

    [mini, lite, full] GetGainThreshold(
      [out] float min,
      [out] float max);

    [mini, lite, full] GetGain(
      [out] float gain);

    [mini, lite, full] SetGain(
      [in] float gain);

    [mini, lite, full] GetFrameSize(
      [out] unsigned long size);

    [mini, lite, full] GetFrameCount(
      [out] unsigned long count);

    [mini, lite, full] SetSampleAttributes(
      [in] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs);

    [mini, lite, full] GetSampleAttributes(
      [out] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs);

    [mini, lite, full] GetCurrentChannelId(
      [out] unsigned int channelId);

    [mini, lite, full] SetExtraParams(
      [in] std::string keyValueList);

    [mini, lite, full] GetExtraParams(
      [out] std::string keyValueList);

    [mini, lite, full] ReqMmapBuffer(
      [in] int reqSize,
      [out] ohos.hdi.audio.v1_0.AudioMmapBufferDescriptor desc);

    [mini, lite, full] GetMmapPosition(
      [out] unsigned long frames,
      [out] ohos.hdi.audio.v1_0.AudioTimeStamp time);

    [mini, lite, full] AddAudioEffect(
      [in] unsigned long effectid);

    [mini, lite, full] RemoveAudioEffect(
      [in] unsigned long effectid);

    [mini, lite, full] GetFrameBufferSize(
      [out] unsigned long bufferSize);

    [mini, lite, full] Start();

    [mini, lite, full] Stop();

    [mini, lite, full] Pause();

    [mini, lite, full] Resume();

    [mini, lite, full] Flush();

    [mini, lite, full] TurnStandbyMode();

    [mini, lite, full] AudioDevDump(
      [in] int range,
      [in] int fd);

    [mini, lite, full] IsSupportsPauseAndResume(
      [out] boolean supportPause,
      [out] boolean supportResume);
}


AST[name: IAudioAdapter file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/IAudioAdapter.idl]
package ohos.hdi.audio.v1_0;

import ohos.hdi.audio.v1_0.IAudioCallback;
import ohos.hdi.audio.v1_0.IAudioCapture;
import ohos.hdi.audio.v1_0.IAudioRender;
import ohos.hdi.audio.v1_0.AudioTypes;

[mini, lite, full] interface IAudioAdapter {
    [mini, lite, full] InitAllPorts();

    [mini, lite, full] CreateRender(
      [in] ohos.hdi.audio.v1_0.AudioDeviceDescriptor desc,
      [in] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs,
      [out] ohos.hdi.audio.v1_0.IAudioRender render,
      [out] unsigned int renderId);

    [mini, lite, full] DestroyRender(
      [in] unsigned int renderId);

    [mini, lite, full] CreateCapture(
      [in] ohos.hdi.audio.v1_0.AudioDeviceDescriptor desc,
      [in] ohos.hdi.audio.v1_0.AudioSampleAttributes attrs,
      [out] ohos.hdi.audio.v1_0.IAudioCapture capture,
      [out] unsigned int captureId);

    [mini, lite, full] DestroyCapture(
      [in] unsigned int captureId);

    [mini, lite, full] GetPortCapability(
      [in] ohos.hdi.audio.v1_0.AudioPort port,
      [out] ohos.hdi.audio.v1_0.AudioPortCapability capability);

    [mini, lite, full] SetPassthroughMode(
      [in] ohos.hdi.audio.v1_0.AudioPort port,
      [in] ohos.hdi.audio.v1_0.AudioPortPassthroughMode mode);

    [mini, lite, full] GetPassthroughMode(
      [in] ohos.hdi.audio.v1_0.AudioPort port,
      [out] ohos.hdi.audio.v1_0.AudioPortPassthroughMode mode);

    [mini, lite, full] GetDeviceStatus(
      [out] ohos.hdi.audio.v1_0.AudioDeviceStatus status);

    [mini, lite, full] UpdateAudioRoute(
      [in] ohos.hdi.audio.v1_0.AudioRoute route,
      [out] int routeHandle);

    [mini, lite, full] ReleaseAudioRoute(
      [in] int routeHandle);

    [mini, lite, full] SetMicMute(
      [in] boolean mute);

    [mini, lite, full] GetMicMute(
      [out] boolean mute);

    [mini, lite, full] SetVoiceVolume(
      [in] float volume);

    [mini, lite, full] SetExtraParams(
      [in] ohos.hdi.audio.v1_0.AudioExtParamKey key,
      [in] std::string condition,
      [in] std::string value);

    [mini, lite, full] GetExtraParams(
      [in] ohos.hdi.audio.v1_0.AudioExtParamKey key,
      [in] std::string condition,
      [out] std::string value);

    [mini, lite, full] RegExtraParamObserver(
      [in] ohos.hdi.audio.v1_0.IAudioCallback audioCallback,
      [in] byte cookie);
}


AST[name: IAudioCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/IAudioCallback.idl]
package ohos.hdi.audio.v1_0;

import ohos.hdi.audio.v1_0.AudioTypes;

[mini, lite, full, callback] interface IAudioCallback {
    [mini, lite, full, callback] RenderCallback(
      [in] ohos.hdi.audio.v1_0.AudioCallbackType type,
      [out] byte reserved,
      [out] byte cookie);

    [mini, lite, full, callback] ParamCallback(
      [in] ohos.hdi.audio.v1_0.AudioExtParamKey key,
      [in] std::string condition,
      [in] std::string value,
      [out] byte reserved,
      [in] byte cookie);
}


AST[name: AudioTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/audio_v1_0/foo/audio/v1_0/AudioTypes.idl]
package ohos.hdi.audio.v1_0;

[mini, lite, full] enum AudioPortDirection : int {
  PORT_OUT = 1,
  PORT_IN = 2,
  PORT_OUT_IN = 3,
};

[mini, lite, full] enum AudioPortPin : int {
  PIN_NONE = 0,
  PIN_OUT_SPEAKER = 1 << 0,
  PIN_OUT_HEADSET = 1 << 1,
  PIN_OUT_LINEOUT = 1 << 2,
  PIN_OUT_HDMI = 1 << 3,
  PIN_OUT_USB = 1 << 4,
  PIN_OUT_USB_EXT = 1 << 5,
  PIN_OUT_EARPIECE = 1 << 5 | 1 << 4,
  PIN_OUT_BLUETOOTH_SCO = 1 << 6,
  PIN_OUT_DAUDIO_DEFAULT = 1 << 7,
  PIN_OUT_HEADPHONE = 1 << 8,
  PIN_OUT_USB_HEADSET = 1 << 9,
  PIN_IN_MIC = 1 << 27 | 1 << 0,
  PIN_IN_HS_MIC = 1 << 27 | 1 << 1,
  PIN_IN_LINEIN = 1 << 27 | 1 << 2,
  PIN_IN_USB_EXT = 1 << 27 | 1 << 3,
  PIN_IN_BLUETOOTH_SCO_HEADSET = 1 << 27 | 1 << 4,
  PIN_IN_DAUDIO_DEFAULT = 1 << 27 | 1 << 5,
  PIN_IN_USB_HEADSET = 1 << 27 | 1 << 6,
};

[mini, lite, full] enum AudioCategory : int {
  AUDIO_IN_MEDIA = 0,
  AUDIO_IN_COMMUNICATION = 1,
  AUDIO_IN_RINGTONE = 2,
  AUDIO_IN_CALL = 3,
  AUDIO_MMAP_NOIRQ = 4,
  AUDIO_OFFLOAD = 5,
};

[mini, lite, full] enum AudioFormat : int {
  AUDIO_FORMAT_TYPE_PCM_8_BIT = 1 << 0,
  AUDIO_FORMAT_TYPE_PCM_16_BIT = 1 << 1,
  AUDIO_FORMAT_TYPE_PCM_24_BIT = 1 << 1 | 1 << 0,
  AUDIO_FORMAT_TYPE_PCM_32_BIT = 1 << 2,
  AUDIO_FORMAT_TYPE_PCM_FLOAT = 1 << 2 | 1 << 0,
  AUDIO_FORMAT_TYPE_MP3 = 1 << 24,
  AUDIO_FORMAT_TYPE_AAC_MAIN = 1 << 24 | 1 << 0,
  AUDIO_FORMAT_TYPE_AAC_LC = 1 << 24 | 1 << 1,
  AUDIO_FORMAT_TYPE_AAC_LD = 1 << 24 | 1 << 1 | 1 << 0,
  AUDIO_FORMAT_TYPE_AAC_ELD = 1 << 24 | 1 << 2,
  AUDIO_FORMAT_TYPE_AAC_HE_V1 = 1 << 24 | 1 << 2 | 1 << 0,
  AUDIO_FORMAT_TYPE_AAC_HE_V2 = 1 << 24 | 1 << 2 | 1 << 1,
  AUDIO_FORMAT_TYPE_G711A = 1 << 25 | 1 << 0,
  AUDIO_FORMAT_TYPE_G711U = 1 << 25 | 1 << 1,
  AUDIO_FORMAT_TYPE_G726 = 1 << 25 | 1 << 1 | 1 << 0,
};

[mini, lite, full] enum AudioChannelMask : int {
  AUDIO_CHANNEL_FRONT_LEFT = 1,
  AUDIO_CHANNEL_FRONT_RIGHT = 2,
  AUDIO_CHANNEL_MONO = 1,
  AUDIO_CHANNEL_STEREO = 3,
};

[mini, lite, full] enum AudioSampleRatesMask : int {
  AUDIO_SAMPLE_RATE_MASK_8000 = 1 << 0,
  AUDIO_SAMPLE_RATE_MASK_12000 = 1 << 1,
  AUDIO_SAMPLE_RATE_MASK_11025 = 1 << 2,
  AUDIO_SAMPLE_RATE_MASK_16000 = 1 << 3,
  AUDIO_SAMPLE_RATE_MASK_22050 = 1 << 4,
  AUDIO_SAMPLE_RATE_MASK_24000 = 1 << 5,
  AUDIO_SAMPLE_RATE_MASK_32000 = 1 << 6,
  AUDIO_SAMPLE_RATE_MASK_44100 = 1 << 7,
  AUDIO_SAMPLE_RATE_MASK_48000 = 1 << 8,
  AUDIO_SAMPLE_RATE_MASK_64000 = 1 << 9,
  AUDIO_SAMPLE_RATE_MASK_96000 = 1 << 10,
  AUDIO_SAMPLE_RATE_MASK_INVALID = 4294967295,
};

[mini, lite, full] enum AudioPortPassthroughMode : int {
  PORT_PASSTHROUGH_LPCM = 1 << 0,
  PORT_PASSTHROUGH_RAW = 1 << 1,
  PORT_PASSTHROUGH_HBR2LBR = 1 << 2,
  PORT_PASSTHROUGH_AUTO = 1 << 3,
};

[mini, lite, full] enum AudioSampleFormat : int {
  AUDIO_SAMPLE_FORMAT_S8 = 0,
  AUDIO_SAMPLE_FORMAT_S8P = 1,
  AUDIO_SAMPLE_FORMAT_U8 = 2,
  AUDIO_SAMPLE_FORMAT_U8P = 3,
  AUDIO_SAMPLE_FORMAT_S16 = 4,
  AUDIO_SAMPLE_FORMAT_S16P = 5,
  AUDIO_SAMPLE_FORMAT_U16 = 6,
  AUDIO_SAMPLE_FORMAT_U16P = 7,
  AUDIO_SAMPLE_FORMAT_S24 = 8,
  AUDIO_SAMPLE_FORMAT_S24P = 9,
  AUDIO_SAMPLE_FORMAT_U24 = 10,
  AUDIO_SAMPLE_FORMAT_U24P = 11,
  AUDIO_SAMPLE_FORMAT_S32 = 12,
  AUDIO_SAMPLE_FORMAT_S32P = 13,
  AUDIO_SAMPLE_FORMAT_U32 = 14,
  AUDIO_SAMPLE_FORMAT_U32P = 15,
  AUDIO_SAMPLE_FORMAT_S64 = 16,
  AUDIO_SAMPLE_FORMAT_S64P = 17,
  AUDIO_SAMPLE_FORMAT_U64 = 18,
  AUDIO_SAMPLE_FORMAT_U64P = 19,
  AUDIO_SAMPLE_FORMAT_F32 = 20,
  AUDIO_SAMPLE_FORMAT_F32P = 21,
  AUDIO_SAMPLE_FORMAT_F64 = 22,
  AUDIO_SAMPLE_FORMAT_F64P = 23,
};

[mini, lite, full] enum AudioChannelMode : int {
  AUDIO_CHANNEL_NORMAL = 0,
  AUDIO_CHANNEL_BOTH_LEFT = 1,
  AUDIO_CHANNEL_BOTH_RIGHT = 2,
  AUDIO_CHANNEL_EXCHANGE = 3,
  AUDIO_CHANNEL_MIX = 4,
  AUDIO_CHANNEL_LEFT_MUTE = 5,
  AUDIO_CHANNEL_RIGHT_MUTE = 6,
  AUDIO_CHANNEL_BOTH_MUTE = 7,
};

[mini, lite, full] enum AudioDrainNotifyType : int {
  AUDIO_DRAIN_NORMAL_MODE = 0,
  AUDIO_DRAIN_EARLY_MODE = 1,
};

[mini, lite, full] enum AudioCallbackType : int {
  AUDIO_NONBLOCK_WRITE_COMPLETED = 0,
  AUDIO_DRAIN_COMPLETED = 1,
  AUDIO_FLUSH_COMPLETED = 2,
  AUDIO_RENDER_FULL = 3,
  AUDIO_ERROR_OCCUR = 4,
};

[mini, lite, full] enum AudioPortRole : int {
  AUDIO_PORT_UNASSIGNED_ROLE = 0,
  AUDIO_PORT_SOURCE_ROLE = 1,
  AUDIO_PORT_SINK_ROLE = 2,
};

[mini, lite, full] enum AudioPortType : int {
  AUDIO_PORT_UNASSIGNED_TYPE = 0,
  AUDIO_PORT_DEVICE_TYPE = 1,
  AUDIO_PORT_MIX_TYPE = 2,
  AUDIO_PORT_SESSION_TYPE = 3,
};

[mini, lite, full] enum AudioSessionType : int {
  AUDIO_OUTPUT_STAGE_SESSION = 0,
  AUDIO_OUTPUT_MIX_SESSION = 1,
  AUDIO_ALLOCATE_SESSION = 2,
  AUDIO_INVALID_SESSION = 3,
};

[mini, lite, full] enum AudioDeviceType : int {
  AUDIO_LINEOUT = 1 << 0,
  AUDIO_HEADPHONE = 1 << 1,
  AUDIO_HEADSET = 1 << 2,
  AUDIO_USB_HEADSET = 1 << 3,
  AUDIO_USB_HEADPHONE = 1 << 4,
  AUDIO_USBA_HEADSET = 1 << 5,
  AUDIO_USBA_HEADPHONE = 1 << 6,
  AUDIO_PRIMARY_DEVICE = 1 << 7,
  AUDIO_USB_DEVICE = 1 << 8,
  AUDIO_A2DP_DEVICE = 1 << 9,
  AUDIO_HDMI_DEVICE = 1 << 10,
  AUDIO_ADAPTER_DEVICE = 1 << 11,
  AUDIO_DEVICE_UNKNOWN,
};

[mini, lite, full] enum AudioEventType : int {
  AUDIO_DEVICE_ADD = 1,
  AUDIO_DEVICE_REMOVE = 2,
  AUDIO_LOAD_SUCCESS = 3,
  AUDIO_LOAD_FAILURE = 4,
  AUDIO_UNLOAD = 5,
  AUDIO_SERVICE_VALID = 7,
  AUDIO_SERVICE_INVALID = 8,
  AUDIO_CAPTURE_THRESHOLD = 9,
  AUDIO_EVENT_UNKNOWN = 10,
};

[mini, lite, full] enum AudioExtParamKey : int {
  AUDIO_EXT_PARAM_KEY_NONE = 0,
  AUDIO_EXT_PARAM_KEY_VOLUME = 1,
  AUDIO_EXT_PARAM_KEY_FOCUS = 2,
  AUDIO_EXT_PARAM_KEY_BUTTON = 3,
  AUDIO_EXT_PARAM_KEY_EFFECT = 4,
  AUDIO_EXT_PARAM_KEY_STATUS = 5,
  AUDIO_EXT_PARAM_KEY_USB_DEVICE = 101,
  AUDIO_EXT_PARAM_KEY_PERF_INFO = 201,
  AUDIO_EXT_PARAM_KEY_LOWPOWER = 1000,
};

[mini, lite, full] struct AudioDeviceStatus {
  unsigned int pnpStatus;
};

[mini, lite, full] union SceneDesc {
  unsigned int id;
};

[mini, lite, full] struct AudioPort {
  ohos.hdi.audio.v1_0.AudioPortDirection dir;
  unsigned int portId;
  std::string portName;
};

[mini, lite, full] struct AudioAdapterDescriptor {
  std::string adapterName;
  ohos.hdi.audio.v1_0.AudioPort[] ports;
};

[mini, lite, full] struct AudioDeviceDescriptor {
  unsigned int portId;
  ohos.hdi.audio.v1_0.AudioPortPin pins;
  std::string desc;
};

[mini, lite, full] struct AudioSceneDescriptor {
  ohos.hdi.audio.v1_0.SceneDesc scene;
  ohos.hdi.audio.v1_0.AudioDeviceDescriptor desc;
};

[mini, lite, full] enum AudioInputType : int {
  AUDIO_INPUT_DEFAULT_TYPE = 0,
  AUDIO_INPUT_MIC_TYPE = 1 << 0,
  AUDIO_INPUT_SPEECH_WAKEUP_TYPE = 1 << 1,
  AUDIO_INPUT_VOICE_COMMUNICATION_TYPE = 1 << 2,
  AUDIO_INPUT_VOICE_RECOGNITION_TYPE = 1 << 3,
};

[mini, lite, full] struct AudioOffloadInfo {
  unsigned int sampleRate;
  unsigned int channelCount;
  unsigned int bitRate;
  unsigned int bitWidth;
  ohos.hdi.audio.v1_0.AudioFormat format;
  unsigned int offloadBufferSize;
  unsigned long duration;
};

[mini, lite, full] struct AudioSampleAttributes {
  ohos.hdi.audio.v1_0.AudioCategory type;
  boolean interleaved;
  ohos.hdi.audio.v1_0.AudioFormat format;
  unsigned int sampleRate;
  unsigned int channelCount;
  unsigned int period;
  unsigned int frameSize;
  boolean isBigEndian;
  boolean isSignedData;
  unsigned int startThreshold;
  unsigned int stopThreshold;
  unsigned int silenceThreshold;
  int streamId;
  int sourceType;
  ohos.hdi.audio.v1_0.AudioOffloadInfo offloadInfo;
};

[mini, lite, full] struct AudioTimeStamp {
  long tvSec;
  long tvNSec;
};

[mini, lite, full] struct AudioSubPortCapability {
  unsigned int portId;
  std::string desc;
  ohos.hdi.audio.v1_0.AudioPortPassthroughMode mask;
};

[mini, lite, full] struct AudioPortCapability {
  unsigned int deviceType;
  unsigned int deviceId;
  boolean hardwareMode;
  unsigned int formatNum;
  ohos.hdi.audio.v1_0.AudioFormat[] formats;
  unsigned int sampleRateMasks;
  ohos.hdi.audio.v1_0.AudioChannelMask channelMasks;
  unsigned int channelCount;
  ohos.hdi.audio.v1_0.AudioSubPortCapability[] subPorts;
  ohos.hdi.audio.v1_0.AudioSampleFormat[] supportSampleFormats;
};

[mini, lite, full] struct AudioMmapBufferDescriptor {
  byte[] memoryAddress;
  FileDescriptor memoryFd;
  int totalBufferFrames;
  int transferFrameSize;
  int isShareable;
  unsigned int offset;
  std::string filePath;
};

[mini, lite, full] struct AudioDevExtInfo {
  int moduleId;
  ohos.hdi.audio.v1_0.AudioPortPin type;
  std::string desc;
};

[mini, lite, full] struct AudioMixExtInfo {
  int moduleId;
  int streamId;
};

[mini, lite, full] struct AudioSessionExtInfo {
  ohos.hdi.audio.v1_0.AudioSessionType sessionType;
};

[mini, lite, full] struct AudioInfo {
  ohos.hdi.audio.v1_0.AudioDevExtInfo device;
  ohos.hdi.audio.v1_0.AudioMixExtInfo mix;
  ohos.hdi.audio.v1_0.AudioSessionExtInfo session;
};

[mini, lite, full] struct AudioRouteNode {
  int portId;
  ohos.hdi.audio.v1_0.AudioPortRole role;
  ohos.hdi.audio.v1_0.AudioPortType type;
  ohos.hdi.audio.v1_0.AudioInfo ext;
};

[mini, lite, full] struct AudioRoute {
  ohos.hdi.audio.v1_0.AudioRouteNode[] sources;
  ohos.hdi.audio.v1_0.AudioRouteNode[] sinks;
};

[mini, lite, full] struct AudioEvent {
  unsigned int eventType;
  unsigned int deviceType;
};


