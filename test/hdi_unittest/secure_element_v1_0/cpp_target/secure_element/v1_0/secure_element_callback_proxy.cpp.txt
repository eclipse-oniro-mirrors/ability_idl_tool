/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/secure_element_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    secure_element_callback_proxy

namespace OHOS {
namespace HDI {
namespace SecureElement {
namespace V1_0 {


int32_t OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::OnSeStateChanged(bool connected)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::OnSeStateChanged_(connected, Remote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::OnSeStateChanged_(bool connected,
     const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementCallbackData;
    MessageParcel secureElementCallbackReply;
    MessageOption secureElementCallbackOption(MessageOption::TF_SYNC);

    if (!secureElementCallbackData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementCallbackData.WriteBool(connected)) {
        HDF_LOGE("%{public}s: write connected failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementCallbackRet = remote->SendRequest(CMD_SECURE_ELEMENT_CALLBACK_ON_SE_STATE_CHANGED, secureElementCallbackData, secureElementCallbackReply, secureElementCallbackOption);
    if (secureElementCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementCallbackRet);
        return secureElementCallbackRet;
    }

    return secureElementCallbackRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementCallbackData;
    MessageParcel secureElementCallbackReply;
    MessageOption secureElementCallbackOption(MessageOption::TF_SYNC);

    if (!secureElementCallbackData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementCallbackRet = remote->SendRequest(CMD_SECURE_ELEMENT_CALLBACK_GET_VERSION, secureElementCallbackData, secureElementCallbackReply, secureElementCallbackOption);
    if (secureElementCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementCallbackRet);
        return secureElementCallbackRet;
    }

    if (!secureElementCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return secureElementCallbackRet;
}

} // V1_0
} // SecureElement
} // HDI
} // OHOS
