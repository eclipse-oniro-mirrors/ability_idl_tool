/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/secure_element_interface_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    secure_element_interface_proxy

namespace OHOS {
namespace HDI {
namespace SecureElement {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);

sptr<OHOS::HDI::SecureElement::V1_0::ISecureElementInterface> OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::Get(bool isStub)
{
    return ISecureElementInterface::Get("secure_element_interface_service", isStub);
}

sptr<OHOS::HDI::SecureElement::V1_0::ISecureElementInterface> OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor());
        std::string svrName = (serviceName == "secure_element_interface_service") ? "service" : serviceName;
        sptr<OHOS::HDI::SecureElement::V1_0::ISecureElementInterface> impl = \
            reinterpret_cast<OHOS::HDI::SecureElement::V1_0::ISecureElementInterface *>(LoadHdiImpl(desc.c_str(), svrName.c_str()));
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        uint32_t serMajorVer = 0;
        uint32_t serMinorVer = 0;
        int32_t secureElementInterfaceRet = impl->GetVersion(serMajorVer, serMinorVer);
        if (secureElementInterfaceRet != HDF_SUCCESS) {
            HDF_LOGE("%{public}s: get version failed!", __func__);
            return nullptr;
        }

        if (serMajorVer != 1) {
            HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
            return nullptr;
        }
        if (serMinorVer < 0) {
            HDF_LOGE("%{public}s:check Minor version failed! "
                "client minor version(0) should be less or equal to implementation minor version(%u).", __func__, serMinorVer);
            return nullptr;
        }

        return impl;
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy> proxy = new OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t secureElementInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    if (serMinorVer < 0) {
        HDF_LOGE("%{public}s:check Minor version failed! "
            "client minor version(0) should be less or equal to server minor version(%u).", __func__, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::Reconnect(
    sptr<OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}
int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::init(const sptr<OHOS::HDI::SecureElement::V1_0::ISecureElementCallback>& clientCallback, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::init_(clientCallback, status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::getAtr(std::vector<uint8_t>& response)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::getAtr_(response, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::isSecureElementPresent(bool& present)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::isSecureElementPresent_(present, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openLogicalChannel(const std::vector<uint8_t>& aid,
     uint8_t p2, std::vector<uint8_t>& response, uint8_t& channelNumber, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openLogicalChannel_(aid, p2, response, channelNumber, status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openBasicChannel(const std::vector<uint8_t>& aid,
     uint8_t p2, std::vector<uint8_t>& response, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openBasicChannel_(aid, p2, response, status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::closeChannel(uint8_t channelNumber,
     OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::closeChannel_(channelNumber, status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::transmit(const std::vector<uint8_t>& command,
     std::vector<uint8_t>& response, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::transmit_(command, response, status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::reset(OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::reset_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::init_(const sptr<OHOS::HDI::SecureElement::V1_0::ISecureElementCallback>& clientCallback, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (clientCallback == nullptr) {
        HDF_LOGE("%{public}s: parameter clientCallback is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(clientCallback, OHOS::HDI::SecureElement::V1_0::ISecureElementCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write clientCallback failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_INIT, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::getAtr_(std::vector<uint8_t>& response,
     const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_GET_ATR, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!ReadPodArray(secureElementInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to read response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::isSecureElementPresent_(bool& present,
     const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_IS_SECURE_ELEMENT_PRESENT, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!secureElementInterfaceReply.ReadBool(present)) {
        HDF_LOGE("%{public}s: read present failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openLogicalChannel_(const std::vector<uint8_t>& aid, uint8_t p2, std::vector<uint8_t>& response, uint8_t& channelNumber, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(secureElementInterfaceData, aid)) {
        HDF_LOGE("%{public}s: failed to write aid", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteUint8(p2)) {
        HDF_LOGE("%{public}s: write p2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_OPEN_LOGICAL_CHANNEL, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!ReadPodArray(secureElementInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to read response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceReply.ReadUint8(channelNumber)) {
        HDF_LOGE("%{public}s: read channelNumber failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::openBasicChannel_(const std::vector<uint8_t>& aid,
     uint8_t p2, std::vector<uint8_t>& response, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(secureElementInterfaceData, aid)) {
        HDF_LOGE("%{public}s: failed to write aid", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteUint8(p2)) {
        HDF_LOGE("%{public}s: write p2 failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_OPEN_BASIC_CHANNEL, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!ReadPodArray(secureElementInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to read response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::closeChannel_(uint8_t channelNumber,
     OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteUint8(channelNumber)) {
        HDF_LOGE("%{public}s: write channelNumber failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_CLOSE_CHANNEL, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::transmit_(const std::vector<uint8_t>& command,
     std::vector<uint8_t>& response, OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(secureElementInterfaceData, command)) {
        HDF_LOGE("%{public}s: failed to write command", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_TRANSMIT, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!ReadPodArray(secureElementInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to read response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::reset_(OHOS::HDI::SecureElement::V1_0::SecureElementStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_RESET, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!secureElementInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum SecureElementStatus>(enumTmp);
    }

    return secureElementInterfaceRet;
}

int32_t OHOS::HDI::SecureElement::V1_0::SecureElementInterfaceProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel secureElementInterfaceData;
    MessageParcel secureElementInterfaceReply;
    MessageOption secureElementInterfaceOption(MessageOption::TF_SYNC);

    if (!secureElementInterfaceData.WriteInterfaceToken(OHOS::HDI::SecureElement::V1_0::ISecureElementInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t secureElementInterfaceRet = remote->SendRequest(CMD_SECURE_ELEMENT_INTERFACE_GET_VERSION, secureElementInterfaceData, secureElementInterfaceReply, secureElementInterfaceOption);
    if (secureElementInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, secureElementInterfaceRet);
        return secureElementInterfaceRet;
    }

    if (!secureElementInterfaceReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!secureElementInterfaceReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return secureElementInterfaceRet;
}

} // V1_0
} // SecureElement
} // HDI
} // OHOS
