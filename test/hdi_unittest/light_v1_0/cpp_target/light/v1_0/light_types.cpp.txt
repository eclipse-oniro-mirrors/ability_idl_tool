/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/light_types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Light {
namespace V1_0 {



bool HdfLightInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::HdfLightInfo& dataBlock)
{
    if (!data.WriteCString(dataBlock.lightName.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.lightName failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.lightId)) {
        HDF_LOGE("%{public}s: write dataBlock.lightId failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.lightNumber)) {
        HDF_LOGE("%{public}s: write dataBlock.lightNumber failed!", __func__);
        return false;
    }

    if (!data.WriteInt32(dataBlock.lightType)) {
        HDF_LOGE("%{public}s: write dataBlock.lightType failed!", __func__);
        return false;
    }
    return true;
}

bool HdfLightInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::HdfLightInfo& dataBlock)
{
    const char* lightNameCp = data.ReadCString();
    if (lightNameCp == nullptr) {
        HDF_LOGE("%{public}s: read lightNameCp failed", __func__);
        return false;
    }
    dataBlock.lightName = lightNameCp;

    if (!data.ReadInt32(dataBlock.lightId)) {
        HDF_LOGE("%{public}s: read dataBlock.lightId failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.lightNumber)) {
        HDF_LOGE("%{public}s: read dataBlock.lightNumber failed!", __func__);
        return false;
    }

    if (!data.ReadInt32(dataBlock.lightType)) {
        HDF_LOGE("%{public}s: read dataBlock.lightType failed!", __func__);
        return false;
    }
    return true;
}

bool HdfLightFlashEffectBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::HdfLightFlashEffect& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightFlashEffect))) {
        return false;
    }
    return true;
}

bool HdfLightFlashEffectBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::HdfLightFlashEffect& dataBlock)
{
    const OHOS::HDI::Light::V1_0::HdfLightFlashEffect *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Light::V1_0::HdfLightFlashEffect*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Light::V1_0::HdfLightFlashEffect)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightFlashEffect), dataBlockPtr, sizeof(OHOS::HDI::Light::V1_0::HdfLightFlashEffect)) != EOK) {
        return false;
    }
    return true;
}

bool RGBColorBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::RGBColor& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Light::V1_0::RGBColor))) {
        return false;
    }
    return true;
}

bool RGBColorBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::RGBColor& dataBlock)
{
    const OHOS::HDI::Light::V1_0::RGBColor *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Light::V1_0::RGBColor*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Light::V1_0::RGBColor)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Light::V1_0::RGBColor), dataBlockPtr, sizeof(OHOS::HDI::Light::V1_0::RGBColor)) != EOK) {
        return false;
    }
    return true;
}

bool WRGBColorBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::WRGBColor& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Light::V1_0::WRGBColor))) {
        return false;
    }
    return true;
}

bool WRGBColorBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::WRGBColor& dataBlock)
{
    const OHOS::HDI::Light::V1_0::WRGBColor *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Light::V1_0::WRGBColor*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Light::V1_0::WRGBColor)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Light::V1_0::WRGBColor), dataBlockPtr, sizeof(OHOS::HDI::Light::V1_0::WRGBColor)) != EOK) {
        return false;
    }
    return true;
}

bool HdfLightColorBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::HdfLightColor& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightColor))) {
        return false;
    }
    return true;
}

bool HdfLightColorBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::HdfLightColor& dataBlock)
{
    const OHOS::HDI::Light::V1_0::HdfLightColor *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Light::V1_0::HdfLightColor*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Light::V1_0::HdfLightColor)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightColor), dataBlockPtr, sizeof(OHOS::HDI::Light::V1_0::HdfLightColor)) != EOK) {
        return false;
    }
    return true;
}

bool HdfLightEffectBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Light::V1_0::HdfLightEffect& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightEffect))) {
        return false;
    }
    return true;
}

bool HdfLightEffectBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Light::V1_0::HdfLightEffect& dataBlock)
{
    const OHOS::HDI::Light::V1_0::HdfLightEffect *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Light::V1_0::HdfLightEffect*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Light::V1_0::HdfLightEffect)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Light::V1_0::HdfLightEffect), dataBlockPtr, sizeof(OHOS::HDI::Light::V1_0::HdfLightEffect)) != EOK) {
        return false;
    }
    return true;
}

} // V1_0
} // Light
} // HDI
} // OHOS
