/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_LIGHT_V1_0_LIGHTTYPES_H
#define OHOS_HDI_LIGHT_V1_0_LIGHTTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Light {
namespace V1_0 {

using namespace OHOS;

enum HdfLightId : int32_t {
    HDF_LIGHT_ID_BATTERY = 1,
    HDF_LIGHT_ID_NOTIFICATIONS = 2,
    HDF_LIGHT_ID_ATTENTION = 3,
    HDF_LIGHT_ID_BUTT = 4,
};

enum HdfLightType : int32_t {
    HDF_LIGHT_TYPE_SINGLE_COLOR = 1,
    HDF_LIGHT_TYPE_RGB_COLOR = 2,
    HDF_LIGHT_TYPE_WRGB_COLOR = 3,
};

struct HdfLightInfo {
    std::string lightName;
    int32_t lightId;
    int32_t lightNumber;
    int32_t lightType;
};

enum HdfLightFlashMode : int32_t {
    HDF_LIGHT_FLASH_NONE = 0,
    HDF_LIGHT_FLASH_BLINK = 1,
    HDF_LIGHT_FLASH_GRADIENT = 2,
    HDF_LIGHT_FLASH_BUTT = 3,
};

struct HdfLightFlashEffect {
    int32_t flashMode;
    int32_t onTime;
    int32_t offTime;
} __attribute__ ((aligned(8)));

struct RGBColor {
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t reserved;
} __attribute__ ((aligned(8)));

struct WRGBColor {
    uint8_t w;
    uint8_t r;
    uint8_t g;
    uint8_t b;
} __attribute__ ((aligned(8)));

union ColorValue {
    int32_t singleColor;
    OHOS::HDI::Light::V1_0::WRGBColor wrgbColor;
    OHOS::HDI::Light::V1_0::RGBColor rgbColor;
}  __attribute__ ((aligned(8)));

struct HdfLightColor {
    OHOS::HDI::Light::V1_0::ColorValue colorValue;
} __attribute__ ((aligned(8)));

struct HdfLightEffect {
    OHOS::HDI::Light::V1_0::HdfLightColor lightColor;
    OHOS::HDI::Light::V1_0::HdfLightFlashEffect flashEffect;
} __attribute__ ((aligned(8)));

bool HdfLightInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::HdfLightInfo& dataBlock);

bool HdfLightInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::HdfLightInfo& dataBlock);

bool HdfLightFlashEffectBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::HdfLightFlashEffect& dataBlock);

bool HdfLightFlashEffectBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::HdfLightFlashEffect& dataBlock);

bool RGBColorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::RGBColor& dataBlock);

bool RGBColorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::RGBColor& dataBlock);

bool WRGBColorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::WRGBColor& dataBlock);

bool WRGBColorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::WRGBColor& dataBlock);

bool HdfLightColorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::HdfLightColor& dataBlock);

bool HdfLightColorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::HdfLightColor& dataBlock);

bool HdfLightEffectBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Light::V1_0::HdfLightEffect& dataBlock);

bool HdfLightEffectBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Light::V1_0::HdfLightEffect& dataBlock);

} // V1_0
} // Light
} // HDI
} // OHOS

#endif // OHOS_HDI_LIGHT_V1_0_LIGHTTYPES_H

