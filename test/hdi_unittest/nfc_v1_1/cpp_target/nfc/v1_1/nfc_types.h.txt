/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NFC_V1_1_NFCTYPES_H
#define OHOS_HDI_NFC_V1_1_NFCTYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_1 {

using namespace OHOS;

enum VendorProtocalDiscoveryCfg : int32_t {
    NCI_PROTOCOL_18092_ACTIVE = 0,
    NCI_PROTOCOL_B_PRIME = 1,
    NCI_PROTOCOL_DUAL = 2,
    NCI_PROTOCOL_15693 = 3,
    NCI_PROTOCOL_KOVIO = 4,
    NCI_PROTOCOL_MIFARE = 5,
    NCI_DISCOVERY_TYPE_POLL_KOVIO = 6,
    NCI_DISCOVERY_TYPE_POLL_B_PRIME = 7,
    NCI_DISCOVERY_TYPE_LISTEN_B_PRIME = 8,
    VENDOR_PROPEIETARY_CFG_MAX = 9,
};

struct NfcVendorConfig {
    uint32_t isoDepExtApduLength;
    uint8_t defaultOffHostRoute;
    uint8_t defaultOffHostRouteFelica;
    uint8_t defaultSysCodeRoute;
    uint8_t defaultSysCodePwrState;
    uint8_t defaultUnconfiguredRoute;
    uint8_t esePipeId;
    uint8_t simPipeId;
    bool pollBailOutMode;
    uint8_t checkAlgorithm;
    std::vector<uint8_t> vendorProtocalDiscoveryCfg;
    uint8_t vendorProtocalDiscoveryCfgSize;
    std::vector<uint8_t> hostWhitelist;
    std::vector<uint8_t> offHostRouteUicc;
    std::vector<uint8_t> offHostRouteEse;
    uint8_t defaultIsoDepRoute;
};

bool NfcVendorConfigBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Nfc::V1_1::NfcVendorConfig& dataBlock);

bool NfcVendorConfigBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Nfc::V1_1::NfcVendorConfig& dataBlock);

} // V1_1
} // Nfc
} // HDI
} // OHOS

#endif // OHOS_HDI_NFC_V1_1_NFCTYPES_H

