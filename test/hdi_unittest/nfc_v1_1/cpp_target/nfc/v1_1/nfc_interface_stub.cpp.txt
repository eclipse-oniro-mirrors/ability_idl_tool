/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/nfc_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    nfc_interface_stub

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_1 {
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), size, &sz);
    if (ok) { return false; }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sz));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> OHOS::HDI::Nfc::V1_1::INfcInterface::Get(bool isStub)
{
    return OHOS::HDI::Nfc::V1_1::INfcInterface::Get("nfc_interface_service", isStub);
}

sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> OHOS::HDI::Nfc::V1_1::INfcInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "nfc_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Nfc::V1_1::INfcInterface *>(impl);
}


OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStub(const sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::~NfcInterfaceStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_NFC_INTERFACE_GET_VERSION:
            return NfcInterfaceStubGetVersion(data, reply, option);
        case CMD_NFC_INTERFACE_GET_VENDOR_CONFIG:
            return NfcInterfaceStubGetVendorConfig(data, reply, option);
        case CMD_NFC_INTERFACE_DO_FACTORY_RESET:
            return NfcInterfaceStubDoFactoryReset(data, reply, option);
        case CMD_NFC_INTERFACE_SHUTDOWN:
            return NfcInterfaceStubShutdown(data, reply, option);
        case CMD_NFC_INTERFACE_IOCTL_WITH_RESPONSE:
            return NfcInterfaceStubIoctlWithResponse(data, reply, option);
        case CMD_NFC_INTERFACE_OPEN:
            return NfcInterfaceStubOpen(data, reply, option);
        case CMD_NFC_INTERFACE_CORE_INITIALIZED:
            return NfcInterfaceStubCoreInitialized(data, reply, option);
        case CMD_NFC_INTERFACE_PREDISCOVER:
            return NfcInterfaceStubPrediscover(data, reply, option);
        case CMD_NFC_INTERFACE_WRITE:
            return NfcInterfaceStubWrite(data, reply, option);
        case CMD_NFC_INTERFACE_CONTROL_GRANTED:
            return NfcInterfaceStubControlGranted(data, reply, option);
        case CMD_NFC_INTERFACE_POWER_CYCLE:
            return NfcInterfaceStubPowerCycle(data, reply, option);
        case CMD_NFC_INTERFACE_CLOSE:
            return NfcInterfaceStubClose(data, reply, option);
        case CMD_NFC_INTERFACE_IOCTL:
            return NfcInterfaceStubIoctl(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubGetVendorConfig(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubGetVendorConfig_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubDoFactoryReset(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubDoFactoryReset_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubShutdown(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubShutdown_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubIoctlWithResponse(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubIoctlWithResponse_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubOpen(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubOpen_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubCoreInitialized(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubCoreInitialized_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubPrediscover(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPrediscover_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubWrite(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubWrite_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubControlGranted(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubControlGranted_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubPowerCycle(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubPowerCycle_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubClose(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubClose_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubIoctl(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubIoctl_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubGetVersion(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceStub::NfcInterfaceStubGetVersion_(nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption, impl_);
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubGetVendorConfig_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_1::NfcVendorConfig config;

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->GetVendorConfig(config, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!OHOS::HDI::Nfc::V1_1::NfcVendorConfigBlockMarshalling(nfcInterfaceReply, config)) {
        HDF_LOGE("%{public}s: write config failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubDoFactoryReset_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->DoFactoryReset(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubShutdown_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->Shutdown(status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceStub::NfcInterfaceStubIoctlWithResponse_(MessageParcel& nfcInterfaceData, MessageParcel& nfcInterfaceReply, MessageOption& nfcInterfaceOption, sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> impl)
{
    if (nfcInterfaceData.ReadInterfaceToken() != OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool nfcInterfaceMemSet = false;
    if (!nfcInterfaceData.ReadBool(nfcInterfaceMemSet)) {
        HDF_LOGE("%{public}s: failed to read nfcInterfaceMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    OHOS::HDI::Nfc::V1_0::NfcCommand cmd = static_cast<enum NfcCommand>(0);
    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write cmd failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        cmd = static_cast<enum NfcCommand>(enumTmp);
    }

    std::vector<uint8_t> data;
    if (!ReadPodArray(nfcInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to read data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<uint8_t> response;
    if (nfcInterfaceMemSet) {
        uint32_t capacity = 0;
        if (!nfcInterfaceData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(uint8_t), HDF_ERR_INVALID_PARAM);
        response.reserve(capacity);
    }

    OHOS::HDI::Nfc::V1_0::NfcStatus status;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t nfcInterfaceRet = impl->IoctlWithResponse(cmd, data, response, status);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGD("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!WritePodArray(nfcInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to write response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcInterfaceReply.WriteUint64(static_cast<uint64_t>(status))) {
        HDF_LOGE("%{public}s: write status failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return nfcInterfaceRet;
}
} // V1_1
} // Nfc
} // HDI
} // OHOS
