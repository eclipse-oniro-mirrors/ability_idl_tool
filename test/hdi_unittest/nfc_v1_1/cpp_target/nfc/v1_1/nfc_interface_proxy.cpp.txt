/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/nfc_interface_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    nfc_interface_proxy

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_1 {

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);

template<typename ChildType, typename ParentType>
static sptr<ChildType> CastFromTemplate(const sptr<ParentType> &parent)
{
    if (parent == nullptr) {
        HDF_LOGE("%{public}s:parent is nullptr!", __func__);
        return nullptr;
    }

    if (!parent->IsProxy()) {
        HDF_LOGE("%{public}s:not proxy, not support castfrom!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = OHOS::HDI::hdi_objcast<ParentType>(parent);
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:hdi_objcast failed!", __func__);
        return nullptr;
    }

    sptr<ChildType> proxy = OHOS::HDI::hdi_facecast<ChildType>(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:hdi_facecast failed!", __func__);
        return nullptr;
    }

    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t nfcInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> OHOS::HDI::Nfc::V1_1::INfcInterface::Get(bool isStub)
{
    return INfcInterface::Get("nfc_interface_service", isStub);
}

sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> OHOS::HDI::Nfc::V1_1::INfcInterface::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "nfc_interface_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Nfc::V1_1::INfcInterface *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy> proxy = new OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t nfcInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Reconnect(
    sptr<OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

sptr<OHOS::HDI::Nfc::V1_1::INfcInterface> OHOS::HDI::Nfc::V1_1::INfcInterface::CastFrom(const sptr<OHOS::HDI::Nfc::V1_0::INfcInterface> &parent)
{
    return CastFromTemplate<OHOS::HDI::Nfc::V1_1::INfcInterface, OHOS::HDI::Nfc::V1_0::INfcInterface>(parent);
}


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::GetVendorConfig(OHOS::HDI::Nfc::V1_1::NfcVendorConfig& config,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::GetVendorConfig_(config, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::DoFactoryReset(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::DoFactoryReset_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Shutdown(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Shutdown_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::IoctlWithResponse(OHOS::HDI::Nfc::V1_0::NfcCommand cmd,
     const std::vector<uint8_t>& data, std::vector<uint8_t>& response, OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::IoctlWithResponse_(cmd, data, response, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Open(const sptr<OHOS::HDI::Nfc::V1_0::INfcCallback>& callbackObj,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::Open_(callbackObj, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::CoreInitialized(const std::vector<uint8_t>& data,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::CoreInitialized_(data, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Prediscover(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::Prediscover_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Write(const std::vector<uint8_t>& data,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::Write_(data, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::ControlGranted(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::ControlGranted_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::PowerCycle(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::PowerCycle_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Close(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::Close_(status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Ioctl(OHOS::HDI::Nfc::V1_0::NfcCommand cmd,
     const std::vector<uint8_t>& data, OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::Ioctl_(cmd, data, status, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Nfc::V1_0::NfcInterfaceProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::GetVendorConfig_(OHOS::HDI::Nfc::V1_1::NfcVendorConfig& config,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel nfcInterfaceData;
    MessageParcel nfcInterfaceReply;
    MessageOption nfcInterfaceOption(MessageOption::TF_SYNC);

    if (!nfcInterfaceData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcInterfaceRet = remote->SendRequest(CMD_NFC_INTERFACE_GET_VENDOR_CONFIG, nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!NfcVendorConfigBlockUnmarshalling(nfcInterfaceReply, config)) {
        HDF_LOGE("%{public}s: read config failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum NfcStatus>(enumTmp);
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::DoFactoryReset_(OHOS::HDI::Nfc::V1_0::NfcStatus& status,
     const sptr<IRemoteObject> remote)
{
    MessageParcel nfcInterfaceData;
    MessageParcel nfcInterfaceReply;
    MessageOption nfcInterfaceOption(MessageOption::TF_SYNC);

    if (!nfcInterfaceData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcInterfaceRet = remote->SendRequest(CMD_NFC_INTERFACE_DO_FACTORY_RESET, nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum NfcStatus>(enumTmp);
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::Shutdown_(OHOS::HDI::Nfc::V1_0::NfcStatus& status,
     const sptr<IRemoteObject> remote)
{
    MessageParcel nfcInterfaceData;
    MessageParcel nfcInterfaceReply;
    MessageOption nfcInterfaceOption(MessageOption::TF_SYNC);

    if (!nfcInterfaceData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcInterfaceRet = remote->SendRequest(CMD_NFC_INTERFACE_SHUTDOWN, nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum NfcStatus>(enumTmp);
    }

    return nfcInterfaceRet;
}

int32_t OHOS::HDI::Nfc::V1_1::NfcInterfaceProxy::IoctlWithResponse_(OHOS::HDI::Nfc::V1_0::NfcCommand cmd,
     const std::vector<uint8_t>& data, std::vector<uint8_t>& response, OHOS::HDI::Nfc::V1_0::NfcStatus& status, const sptr<IRemoteObject> remote)
{
    MessageParcel nfcInterfaceData;
    MessageParcel nfcInterfaceReply;
    MessageOption nfcInterfaceOption(MessageOption::TF_SYNC);

    if (!nfcInterfaceData.WriteInterfaceToken(OHOS::HDI::Nfc::V1_1::INfcInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!nfcInterfaceData.WriteUint64(static_cast<uint64_t>(cmd))) {
        HDF_LOGE("%{public}s: write cmd failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(nfcInterfaceData, data)) {
        HDF_LOGE("%{public}s: failed to write data", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t nfcInterfaceRet = remote->SendRequest(CMD_NFC_INTERFACE_IOCTL_WITH_RESPONSE, nfcInterfaceData, nfcInterfaceReply, nfcInterfaceOption);
    if (nfcInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, nfcInterfaceRet);
        return nfcInterfaceRet;
    }

    if (!ReadPodArray(nfcInterfaceReply, response)) {
        HDF_LOGE("%{public}s: failed to read response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    {
        uint64_t enumTmp = 0;
        if (!nfcInterfaceReply.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write status failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        status = static_cast<enum NfcStatus>(enumTmp);
    }

    return nfcInterfaceRet;
}

} // V1_1
} // Nfc
} // HDI
} // OHOS
