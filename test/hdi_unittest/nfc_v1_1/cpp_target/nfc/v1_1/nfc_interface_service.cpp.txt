/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/nfc_interface_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    nfc_interface_service

namespace OHOS {
namespace HDI {
namespace Nfc {
namespace V1_1 {
extern "C" INfcInterface *NfcInterfaceImplGetInstance(void)
{
    return new (std::nothrow) NfcInterfaceService();
}

int32_t NfcInterfaceService::GetVendorConfig(OHOS::HDI::Nfc::V1_1::NfcVendorConfig& config,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::DoFactoryReset(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Shutdown(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::IoctlWithResponse(OHOS::HDI::Nfc::V1_0::NfcCommand cmd, const std::vector<uint8_t>& data,
     std::vector<uint8_t>& response, OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Open(const sptr<OHOS::HDI::Nfc::V1_0::INfcCallback>& callbackObj,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::CoreInitialized(const std::vector<uint8_t>& data, OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Prediscover(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Write(const std::vector<uint8_t>& data, OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::ControlGranted(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::PowerCycle(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Close(OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

int32_t NfcInterfaceService::Ioctl(OHOS::HDI::Nfc::V1_0::NfcCommand cmd, const std::vector<uint8_t>& data,
     OHOS::HDI::Nfc::V1_0::NfcStatus& status)
{
    return HDF_SUCCESS;
}

} // V1_1
} // Nfc
} // HDI
} // OHOS
