/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_RIL_V1_2_IRIL_H
#define OHOS_HDI_RIL_V1_2_IRIL_H

#include <stdint.h>
#include <hdf_base.h>
#include <hdi_base.h>
#include "ril/v1_1/iril.h"
#include "ril/v1_2/iril_callback.h"
#include "ril/v1_2/types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Ril {
namespace V1_2 {
using namespace OHOS;
using namespace OHOS::HDI;
using namespace OHOS::HDI::Ril::V1_1;

enum {
    CMD_RIL_SET_CALLBACK1_2 = 114,
    CMD_RIL_SEND_SIM_MATCHED_OPERATOR_INFO = 115,
    CMD_RIL_CLEAN_ALL_CONNECTIONS = 116,
    CMD_RIL_GET_NR_SSB_ID = 117,
};

class IRil : public OHOS::HDI::Ril::V1_1::IRil {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.ril.v1_2.IRil");

    virtual ~IRil() = default;

    static sptr<OHOS::HDI::Ril::V1_2::IRil> Get(bool isStub = false);
    static sptr<OHOS::HDI::Ril::V1_2::IRil> Get(const std::string &serviceName, bool isStub = false);

    static sptr<OHOS::HDI::Ril::V1_2::IRil> CastFrom(const sptr<OHOS::HDI::Ril::V1_1::IRil> &parent);

    virtual int32_t SetCallback1_2(const sptr<OHOS::HDI::Ril::V1_2::IRilCallback>& rilCallback) = 0;

    virtual int32_t SendSimMatchedOperatorInfo(int32_t slotId, int32_t serialId,
         const OHOS::HDI::Ril::V1_2::NcfgOperatorInfo& ncfgOperatorInfo) = 0;

    virtual int32_t CleanAllConnections(int32_t slotId, int32_t serialId) = 0;

    virtual int32_t GetNrSsbId(int32_t slotId, int32_t serialId) = 0;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override
    {
        majorVer = 1;
        minorVer = 2;
        return HDF_SUCCESS;
    }

    const std::u16string GetDesc() override
    {
        return metaDescriptor_;
    }
};
} // V1_2
} // Ril
} // HDI
} // OHOS

#endif // OHOS_HDI_RIL_V1_2_IRIL_H

