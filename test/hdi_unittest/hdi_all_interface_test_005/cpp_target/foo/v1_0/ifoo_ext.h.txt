/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_FOO_V1_0_IFOOEXT_H
#define OHOS_HDI_FOO_V1_0_IFOOEXT_H

#include <stdint.h>
#include <map>
#include <string>
#include <base/native_buffer.h>
#include <hdf_base.h>
#include <hdi_base.h>
#include "foo/v1_0/ifoo_callback.h"
#include "foo/v1_0/types.h"

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {
using namespace OHOS;
using namespace OHOS::HDI;
using namespace OHOS::HDI::Base;

class IFooExt : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.foo.v1_0.IFooExt");

    virtual ~IFooExt() = default;

    static sptr<OHOS::HDI::Foo::V1_0::IFooExt> Get(bool isStub = false);
    static sptr<OHOS::HDI::Foo::V1_0::IFooExt> Get(const std::string &serviceName, bool isStub = false);

    virtual int32_t TestFunc11(const sptr<NativeBuffer>& inData, sptr<NativeBuffer>& outData) = 0;

    virtual int32_t TestFunc13(const std::map<std::string, std::string>& inData, std::map<std::string,
         std::string>& outData) = 0;

    virtual int32_t TestFunc15(uint8_t inData, uint8_t outData) = 0;

    virtual int32_t TestFunc16(uint32_t inData, uint8_t outData) = 0;

    virtual int32_t TestFunc17(uint16_t inData, uint32_t& outData) = 0;

    virtual int32_t TestFunc18(uint64_t inData, uint64_t& outData) = 0;

    virtual int32_t TestFunc19(const OHOS::HDI::Foo::V1_0::FooInfo& inData,
         OHOS::HDI::Foo::V1_0::AudioPortPin& outData) = 0;

    virtual int32_t TestFunc20(const OHOS::HDI::Foo::V1_0::AudioSceneDescriptor& inData,
         OHOS::HDI::Foo::V1_0::SceneDesc& outData) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_0
} // Foo
} // HDI
} // OHOS

#endif // OHOS_HDI_FOO_V1_0_IFOOEXT_H

