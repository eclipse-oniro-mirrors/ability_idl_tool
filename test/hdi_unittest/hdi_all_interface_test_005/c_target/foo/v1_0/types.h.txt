/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TYPES_H
#define TYPES_H

#include <stdbool.h>
#include <stdint.h>
#include <base/buffer_util.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

enum FooType {
    FOO_TYPE_ONE = 1,
    FOO_TYPE_TWO = 2,
};

struct FooInfo {
    uint32_t id;
    char* name;
    enum FooType type;
    bool data1;
    bool* data2;
    uint32_t data2Len;
    int8_t data3;
    int16_t data4;
    int32_t data5;
    int64_t data6;
    char* data7;
    float data8;
    double data9;
    int data10;
    BufferHandle* data12;
    int32_t* data14;
    uint32_t data14Len;
    / data15;
    uint32_t data17;
    uint8_t* data18;
    uint32_t data18Len;
    uint16_t* data19;
    uint32_t data19Len;
    uint32_t data20;
    uint64_t data21;
};

enum AudioPortPin {
    PIN_NONE = 0,
    PIN_OUT_SPEAKER = 1 << 0,
    PIN_OUT_HEADSET = 1 << 1,
    PIN_OUT_LINEOUT = 1 << 2,
    PIN_OUT_HDMI = 1 << 3,
    PIN_OUT_USB = 1 << 4,
    PIN_OUT_USB_EXT = 1 << 5,
    PIN_OUT_EARPIECE = 1 << 5 | 1 << 4,
    PIN_OUT_BLUETOOTH_SCO = 1 << 6,
    PIN_OUT_DAUDIO_DEFAULT = 1 << 7,
    PIN_OUT_HEADPHONE = 1 << 8,
    PIN_OUT_USB_HEADSET = 1 << 9,
    PIN_IN_MIC = 1 << 27 | 1 << 0,
    PIN_IN_HS_MIC = 1 << 27 | 1 << 1,
    PIN_IN_LINEIN = 1 << 27 | 1 << 2,
    PIN_IN_USB_EXT = 1 << 27 | 1 << 3,
    PIN_IN_BLUETOOTH_SCO_HEADSET = 1 << 27 | 1 << 4,
    PIN_IN_DAUDIO_DEFAULT = 1 << 27 | 1 << 5,
    PIN_IN_USB_HEADSET = 1 << 27 | 1 << 6,
};

union SceneDesc {
    uint32_t id;
}  __attribute__ ((aligned(8)));

struct AudioDeviceDescriptor {
    uint32_t portId;
    enum AudioPortPin pins;
    char* desc;
};

struct AudioSceneDescriptor {
    union SceneDesc scene;
    struct AudioDeviceDescriptor desc;
};
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // TYPES_H