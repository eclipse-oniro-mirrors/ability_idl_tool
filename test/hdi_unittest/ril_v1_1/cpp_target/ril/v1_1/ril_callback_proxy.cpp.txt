/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/ril_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    ril_callback_proxy

namespace OHOS {
namespace HDI {
namespace Ril {
namespace V1_1 {


int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallEmergencyNotice(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::EmergencyInfoList& emergencyInfoList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallEmergencyNotice_(responseInfo, emergencyInfoList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallStateUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallStateUpdated_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRingbackVoiceNotice(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RingbackVoice& ringbackVoice)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRingbackVoiceNotice_(responseInfo, ringbackVoice, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSrvccStatusNotice(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SrvccStatus& srvccStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSrvccStatusNotice_(responseInfo, srvccStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallUssdNotice(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::UssdNoticeInfo& ussdNoticeInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallUssdNotice_(responseInfo, ussdNoticeInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSsNotice(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SsNoticeInfo& ssNoticeInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSsNotice_(responseInfo, ssNoticeInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRsrvccStatusNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRsrvccStatusNotify_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetEmergencyCallListResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetEmergencyCallListResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetEmergencyCallListResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::EmergencyInfoList& emergencyInfoList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetEmergencyCallListResponse_(responseInfo, emergencyInfoList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallListResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallInfoList& callList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallListResponse_(responseInfo, callList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DialResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DialResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::HangupResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::HangupResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::RejectResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::RejectResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AnswerResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::AnswerResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::HoldCallResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::HoldCallResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnHoldCallResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnHoldCallResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SwitchCallResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SwitchCallResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClipResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::GetClipResult& getClipResult)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClipResponse_(responseInfo, getClipResult, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClipResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClipResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CombineConferenceResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CombineConferenceResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SeparateConferenceResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SeparateConferenceResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSupplementResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSupplementResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallWaitingResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallWaitResult& callWaitResult)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallWaitingResponse_(responseInfo, callWaitResult, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallWaitingResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallWaitingResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallTransferInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallForwardQueryInfoList& cFQueryList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallTransferInfoResponse_(responseInfo, cFQueryList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallTransferInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallTransferInfoResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallRestrictionResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallRestrictionResult& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallRestrictionResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallRestrictionResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallRestrictionResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClirResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::GetClirResult& getClirResult)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClirResponse_(responseInfo, getClirResult, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClirResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClirResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::StartDtmfResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::StartDtmfResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendDtmfResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendDtmfResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::StopDtmfResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::StopDtmfResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallPreferenceModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mode)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallPreferenceModeResponse_(responseInfo, mode, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallPreferenceModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallPreferenceModeResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetUssdResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetUssdResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CloseUnFinishedUssdResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CloseUnFinishedUssdResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetUssdResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t cusd)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetUssdResponse_(responseInfo, cusd, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetMuteResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetMuteResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMuteResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mute)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMuteResponse_(responseInfo, mute, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallFailReasonResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t callFail)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallFailReasonResponse_(responseInfo, callFail, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetBarringPasswordResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetBarringPasswordResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetVonrSwitchResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetVonrSwitchResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::PdpContextListUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataCallResultList& dataCallResultList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::PdpContextListUpdated_(responseInfo, dataCallResultList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DataLinkCapabilityUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkCapability& capability)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DataLinkCapabilityUpdated_(responseInfo, capability, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ActivatePdpContextResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SetupDataCallResultInfo& setupDataCallResultInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::ActivatePdpContextResponse_(responseInfo, setupDataCallResultInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DeactivatePdpContextResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DeactivatePdpContextResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPdpContextListResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataCallResultList& dataCallResultList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPdpContextListResponse_(responseInfo, dataCallResultList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetInitApnInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetInitApnInfoResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkBandwidthInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkBandwidthInfo& dataLinkBandwidthInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkBandwidthInfoResponse_(responseInfo, dataLinkBandwidthInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkCapabilityResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkCapability& capability)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkCapabilityResponse_(responseInfo, capability, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLinkBandwidthReportingRuleResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLinkBandwidthReportingRuleResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDataPermittedResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDataPermittedResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::RadioStateUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::RadioStateUpdated_(responseInfo, state, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::VoiceRadioTechUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::VoiceRadioTechnology& voiceRadioTechnology)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::VoiceRadioTechUpdated_(responseInfo, voiceRadioTechnology, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DsdsModeUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DsdsModeUpdated_(responseInfo, state, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ShutDownResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::ShutDownResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioStateResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioStateResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioStateResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioStateResponse_(responseInfo, state, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImeiResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& imei)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImeiResponse_(responseInfo, imei, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMeidResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& meid)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMeidResponse_(responseInfo, meid, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVoiceRadioTechnologyResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::VoiceRadioTechnology& voiceRadioTechnology)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVoiceRadioTechnologyResponse_(responseInfo, voiceRadioTechnology, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetBasebandVersionResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& basebandVersion)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetBasebandVersionResponse_(responseInfo, basebandVersion, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStateUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStateUpdated_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSessionEndNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSessionEndNotify_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkProactiveNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkProactiveNotify_(responseInfo, response, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkAlphaNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkAlphaNotify_(responseInfo, response, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkEventNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkEventNotify_(responseInfo, response, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkCallSetupNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkCallSetupNotify_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRefreshNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRefreshNotify_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRadioProtocolUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRadioProtocolUpdated_(responseInfo, radioProtocol, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimIOResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimIOResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimStatusResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CardStatusInfo& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimStatusResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImsiResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImsiResponse_(responseInfo, response, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimLockStatusResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t simLockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimLockStatusResponse_(responseInfo, simLockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSimLockResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSimLockResponse_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ChangeSimPasswordResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::ChangeSimPasswordResponse_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPinResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPinResponse_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPukResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPukResponse_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPin2Response(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPin2Response_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPuk2Response(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPuk2Response_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetActiveSimResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetActiveSimResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendTerminalResponseResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendTerminalResponseResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendEnvelopeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendEnvelopeResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendCallSetupRequestResultResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendCallSetupRequestResultResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkIsReadyResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkIsReadyResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioProtocolResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioProtocolResponse_(responseInfo, radioProtocol, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioProtocolResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioProtocolResponse_(responseInfo, radioProtocol, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimOpenLogicalChannelResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::OpenLogicalChannelResponse& pOpenLogicalChannelResponse)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimOpenLogicalChannelResponse_(responseInfo, pOpenLogicalChannelResponse, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimCloseLogicalChannelResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimCloseLogicalChannelResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduLogicalChannelResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduLogicalChannelResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduBasicChannelResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduBasicChannelResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimAuthenticationResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimAuthenticationResponse_(responseInfo, result, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockSimLockResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockSimLockResponse_(responseInfo, lockStatus, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCsRegStatusUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CsRegStatusInfo& csRegStatusInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCsRegStatusUpdated_(responseInfo, csRegStatusInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPsRegStatusUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PsRegStatusInfo& psRegStatusInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPsRegStatusUpdated_(responseInfo, psRegStatusInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SignalStrengthUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::Rssi& rssi)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SignalStrengthUpdated_(responseInfo, rssi, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeZoneUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& timeZoneStr)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeZoneUpdated_(responseInfo, timeZoneStr, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& timeStr)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeUpdated_(responseInfo, timeStr, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPhyChnlCfgUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ChannelConfigInfoList& channelConfigInfoList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPhyChnlCfgUpdated_(responseInfo, channelConfigInfoList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo& cellListCurrentInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated_(responseInfo, cellListCurrentInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated_1_1(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1& cellListCurrentInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated_1_1_(responseInfo, cellListCurrentInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSignalStrengthResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::Rssi& rssi)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSignalStrengthResponse_(responseInfo, rssi, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCsRegStatusResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CsRegStatusInfo& csRegStatusInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCsRegStatusResponse_(responseInfo, csRegStatusInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPsRegStatusResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PsRegStatusInfo& psRegStatusInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPsRegStatusResponse_(responseInfo, psRegStatusInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetOperatorInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::OperatorInfo& psRegStatusInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetOperatorInfoResponse_(responseInfo, psRegStatusInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSearchInformationResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::AvailableNetworkList& availableNetworkList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSearchInformationResponse_(responseInfo, availableNetworkList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSelectionModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SetNetworkModeInfo& setNetworkModeInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSelectionModeResponse_(responseInfo, setNetworkModeInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNetworkSelectionModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNetworkSelectionModeResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNeighboringCellInfoListResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListNearbyInfo& cellListNearbyInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNeighboringCellInfoListResponse_(responseInfo, cellListNearbyInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo& cellListCurrentInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse_(responseInfo, cellListCurrentInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse_1_1(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1& cellListCurrentInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse_1_1_(responseInfo, cellListCurrentInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetPreferredNetworkResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetPreferredNetworkResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPreferredNetworkResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PreferredNetworkTypeInfo& preferredNetworkTypeInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPreferredNetworkResponse_(responseInfo, preferredNetworkTypeInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPhysicalChannelConfigResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ChannelConfigInfoList& channelConfigInfoList)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPhysicalChannelConfigResponse_(responseInfo, channelConfigInfoList, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLocateUpdatesResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLocateUpdatesResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNotificationFilterResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNotificationFilterResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDeviceStateResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDeviceStateResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsNotify_(responseInfo, smsMessageInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewCdmaSmsNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewCdmaSmsNotify_(responseInfo, smsMessageInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SmsStatusReportNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SmsStatusReportNotify_(responseInfo, smsMessageInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsStoredOnSimNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t recordNumber, int32_t indicationType)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsStoredOnSimNotify_(responseInfo, recordNumber, indicationType, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CBConfigNotify(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CBConfigReportInfo& cellBroadConfigReportInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CBConfigNotify_(responseInfo, cellBroadConfigReportInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendGsmSmsResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendGsmSmsResponse_(responseInfo, sendSmsResultInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendCdmaSmsResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendCdmaSmsResponse_(responseInfo, sendSmsResultInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddCdmaSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddCdmaSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelCdmaSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelCdmaSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateCdmaSimMessageResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateCdmaSimMessageResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSmscAddrResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSmscAddrResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSmscAddrResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ServiceCenterAddress& serviceCenterAddress)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSmscAddrResponse_(responseInfo, serviceCenterAddress, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCBConfigResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCBConfigResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCBConfigResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CBConfigInfo& cellBroadcastInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCBConfigResponse_(responseInfo, cellBroadcastInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCdmaCBConfigResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCdmaCBConfigResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCdmaCBConfigResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CdmaCBConfigInfo& cdmaCBConfigInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCdmaCBConfigResponse_(responseInfo, cdmaCBConfigInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsMoreModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsMoreModeResponse_(responseInfo, sendSmsResultInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsAckResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsAckResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CommonErrorResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::CommonErrorResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateResponse_(responseInfo, state, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNrOptionModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNrOptionModeResponse_(responseInfo, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNrOptionModeResponse(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mode)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNrOptionModeResponse_(responseInfo, mode, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateUpdated(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateUpdated_(responseInfo, state, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallEmergencyNotice_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::EmergencyInfoList& emergencyInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::EmergencyInfoListBlockMarshalling(rilCallbackData, emergencyInfoList)) {
        HDF_LOGE("%{public}s: write emergencyInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_EMERGENCY_NOTICE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallStateUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_STATE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRingbackVoiceNotice_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RingbackVoice& ringbackVoice, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RingbackVoiceBlockMarshalling(rilCallbackData, ringbackVoice)) {
        HDF_LOGE("%{public}s: write ringbackVoice failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_RINGBACK_VOICE_NOTICE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSrvccStatusNotice_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SrvccStatus& srvccStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SrvccStatusBlockMarshalling(rilCallbackData, srvccStatus)) {
        HDF_LOGE("%{public}s: write srvccStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_SRVCC_STATUS_NOTICE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallUssdNotice_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::UssdNoticeInfo& ussdNoticeInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::UssdNoticeInfoBlockMarshalling(rilCallbackData, ussdNoticeInfo)) {
        HDF_LOGE("%{public}s: write ussdNoticeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_USSD_NOTICE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSsNotice_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SsNoticeInfo& ssNoticeInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SsNoticeInfoBlockMarshalling(rilCallbackData, ssNoticeInfo)) {
        HDF_LOGE("%{public}s: write ssNoticeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_SS_NOTICE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallRsrvccStatusNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_RSRVCC_STATUS_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetEmergencyCallListResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_EMERGENCY_CALL_LIST_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetEmergencyCallListResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::EmergencyInfoList& emergencyInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::EmergencyInfoListBlockMarshalling(rilCallbackData, emergencyInfoList)) {
        HDF_LOGE("%{public}s: write emergencyInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_EMERGENCY_CALL_LIST_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallListResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallInfoList& callList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CallInfoListBlockMarshalling(rilCallbackData, callList)) {
        HDF_LOGE("%{public}s: write callList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_LIST_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DialResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DIAL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::HangupResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_HANGUP_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::RejectResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_REJECT_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AnswerResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_ANSWER_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::HoldCallResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_HOLD_CALL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnHoldCallResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UN_HOLD_CALL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SwitchCallResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SWITCH_CALL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClipResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::GetClipResult& getClipResult, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::GetClipResultBlockMarshalling(rilCallbackData, getClipResult)) {
        HDF_LOGE("%{public}s: write getClipResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CLIP_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClipResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CLIP_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CombineConferenceResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_COMBINE_CONFERENCE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SeparateConferenceResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEPARATE_CONFERENCE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CallSupplementResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CALL_SUPPLEMENT_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallWaitingResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallWaitResult& callWaitResult, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CallWaitResultBlockMarshalling(rilCallbackData, callWaitResult)) {
        HDF_LOGE("%{public}s: write callWaitResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_WAITING_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallWaitingResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CALL_WAITING_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallTransferInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallForwardQueryInfoList& cFQueryList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CallForwardQueryInfoListBlockMarshalling(rilCallbackData, cFQueryList)) {
        HDF_LOGE("%{public}s: write cFQueryList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_TRANSFER_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallTransferInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CALL_TRANSFER_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallRestrictionResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CallRestrictionResult& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CallRestrictionResultBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_RESTRICTION_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallRestrictionResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CALL_RESTRICTION_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetClirResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::GetClirResult& getClirResult, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::GetClirResultBlockMarshalling(rilCallbackData, getClirResult)) {
        HDF_LOGE("%{public}s: write getClirResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CLIR_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetClirResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CLIR_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::StartDtmfResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_START_DTMF_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendDtmfResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEND_DTMF_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::StopDtmfResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_STOP_DTMF_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallPreferenceModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mode, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(mode)) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_PREFERENCE_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCallPreferenceModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CALL_PREFERENCE_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetUssdResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_USSD_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CloseUnFinishedUssdResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CLOSE_UN_FINISHED_USSD_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetUssdResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t cusd, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(cusd)) {
        HDF_LOGE("%{public}s: write cusd failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_USSD_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetMuteResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_MUTE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMuteResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mute, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(mute)) {
        HDF_LOGE("%{public}s: write mute failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_MUTE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCallFailReasonResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t callFail, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(callFail)) {
        HDF_LOGE("%{public}s: write callFail failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CALL_FAIL_REASON_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetBarringPasswordResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_BARRING_PASSWORD_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetVonrSwitchResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_VONR_SWITCH_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::PdpContextListUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataCallResultList& dataCallResultList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::DataCallResultListBlockMarshalling(rilCallbackData, dataCallResultList)) {
        HDF_LOGE("%{public}s: write dataCallResultList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_PDP_CONTEXT_LIST_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DataLinkCapabilityUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkCapability& capability, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::DataLinkCapabilityBlockMarshalling(rilCallbackData, capability)) {
        HDF_LOGE("%{public}s: write capability failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DATA_LINK_CAPABILITY_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ActivatePdpContextResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SetupDataCallResultInfo& setupDataCallResultInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SetupDataCallResultInfoBlockMarshalling(rilCallbackData, setupDataCallResultInfo)) {
        HDF_LOGE("%{public}s: write setupDataCallResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_ACTIVATE_PDP_CONTEXT_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DeactivatePdpContextResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DEACTIVATE_PDP_CONTEXT_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPdpContextListResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataCallResultList& dataCallResultList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::DataCallResultListBlockMarshalling(rilCallbackData, dataCallResultList)) {
        HDF_LOGE("%{public}s: write dataCallResultList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_PDP_CONTEXT_LIST_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetInitApnInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_INIT_APN_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkBandwidthInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkBandwidthInfo& dataLinkBandwidthInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::DataLinkBandwidthInfoBlockMarshalling(rilCallbackData, dataLinkBandwidthInfo)) {
        HDF_LOGE("%{public}s: write dataLinkBandwidthInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_LINK_BANDWIDTH_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetLinkCapabilityResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::DataLinkCapability& capability, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::DataLinkCapabilityBlockMarshalling(rilCallbackData, capability)) {
        HDF_LOGE("%{public}s: write capability failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_LINK_CAPABILITY_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLinkBandwidthReportingRuleResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_LINK_BANDWIDTH_REPORTING_RULE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDataPermittedResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_DATA_PERMITTED_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::RadioStateUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(state)) {
        HDF_LOGE("%{public}s: write state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_RADIO_STATE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::VoiceRadioTechUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::VoiceRadioTechnology& voiceRadioTechnology, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::VoiceRadioTechnologyBlockMarshalling(rilCallbackData, voiceRadioTechnology)) {
        HDF_LOGE("%{public}s: write voiceRadioTechnology failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_VOICE_RADIO_TECH_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DsdsModeUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(state)) {
        HDF_LOGE("%{public}s: write state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DSDS_MODE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ShutDownResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SHUT_DOWN_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioStateResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_RADIO_STATE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioStateResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(state)) {
        HDF_LOGE("%{public}s: write state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_RADIO_STATE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImeiResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& imei, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(imei.c_str())) {
        HDF_LOGE("%{public}s: write imei failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_IMEI_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetMeidResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& meid, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(meid.c_str())) {
        HDF_LOGE("%{public}s: write meid failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_MEID_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVoiceRadioTechnologyResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::VoiceRadioTechnology& voiceRadioTechnology, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::VoiceRadioTechnologyBlockMarshalling(rilCallbackData, voiceRadioTechnology)) {
        HDF_LOGE("%{public}s: write voiceRadioTechnology failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_VOICE_RADIO_TECHNOLOGY_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetBasebandVersionResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& basebandVersion, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(basebandVersion.c_str())) {
        HDF_LOGE("%{public}s: write basebandVersion failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_BASEBAND_VERSION_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStateUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STATE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSessionEndNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_SESSION_END_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkProactiveNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(response.c_str())) {
        HDF_LOGE("%{public}s: write response failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_PROACTIVE_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkAlphaNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(response.c_str())) {
        HDF_LOGE("%{public}s: write response failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_ALPHA_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkEventNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(response.c_str())) {
        HDF_LOGE("%{public}s: write response failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_EVENT_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkCallSetupNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_CALL_SETUP_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRefreshNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_REFRESH_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimRadioProtocolUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RadioProtocolBlockMarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: write radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_RADIO_PROTOCOL_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimIOResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::IccIoResultInfoBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_SIM_I_O_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimStatusResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CardStatusInfo& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CardStatusInfoBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_SIM_STATUS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetImsiResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& response, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(response.c_str())) {
        HDF_LOGE("%{public}s: write response failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_IMSI_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSimLockStatusResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t simLockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(simLockStatus)) {
        HDF_LOGE("%{public}s: write simLockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_SIM_LOCK_STATUS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSimLockResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_SIM_LOCK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::ChangeSimPasswordResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CHANGE_SIM_PASSWORD_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPinResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UNLOCK_PIN_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPukResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UNLOCK_PUK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPin2Response_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UNLOCK_PIN2_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockPuk2Response_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UNLOCK_PUK2_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetActiveSimResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_ACTIVE_SIM_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendTerminalResponseResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_SEND_TERMINAL_RESPONSE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendEnvelopeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_SEND_ENVELOPE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkSendCallSetupRequestResultResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimStkIsReadyResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_STK_IS_READY_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRadioProtocolResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RadioProtocolBlockMarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: write radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_RADIO_PROTOCOL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetRadioProtocolResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::RadioProtocol& radioProtocol, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RadioProtocolBlockMarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: write radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_RADIO_PROTOCOL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimOpenLogicalChannelResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::OpenLogicalChannelResponse& pOpenLogicalChannelResponse, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::OpenLogicalChannelResponseBlockMarshalling(rilCallbackData, pOpenLogicalChannelResponse)) {
        HDF_LOGE("%{public}s: write pOpenLogicalChannelResponse failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_OPEN_LOGICAL_CHANNEL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimCloseLogicalChannelResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_CLOSE_LOGICAL_CHANNEL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduLogicalChannelResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::IccIoResultInfoBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimTransmitApduBasicChannelResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::IccIoResultInfoBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_TRANSMIT_APDU_BASIC_CHANNEL_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SimAuthenticationResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::IccIoResultInfo& result, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::IccIoResultInfoBlockMarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: write result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIM_AUTHENTICATION_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UnlockSimLockResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::LockStatusResp& lockStatus, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::LockStatusRespBlockMarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: write lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UNLOCK_SIM_LOCK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCsRegStatusUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CsRegStatusInfo& csRegStatusInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CsRegStatusInfoBlockMarshalling(rilCallbackData, csRegStatusInfo)) {
        HDF_LOGE("%{public}s: write csRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_CS_REG_STATUS_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPsRegStatusUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PsRegStatusInfo& psRegStatusInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::PsRegStatusInfoBlockMarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: write psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_PS_REG_STATUS_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SignalStrengthUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::Rssi& rssi, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RssiBlockMarshalling(rilCallbackData, rssi)) {
        HDF_LOGE("%{public}s: write rssi failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SIGNAL_STRENGTH_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeZoneUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& timeZoneStr, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(timeZoneStr.c_str())) {
        HDF_LOGE("%{public}s: write timeZoneStr failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_TIME_ZONE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkTimeUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const std::string& timeStr, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteCString(timeStr.c_str())) {
        HDF_LOGE("%{public}s: write timeStr failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_TIME_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkPhyChnlCfgUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ChannelConfigInfoList& channelConfigInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::ChannelConfigInfoListBlockMarshalling(rilCallbackData, channelConfigInfoList)) {
        HDF_LOGE("%{public}s: write channelConfigInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_PHY_CHNL_CFG_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo& cellListCurrentInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CellListCurrentInfoBlockMarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: write cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_CURRENT_CELL_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NetworkCurrentCellUpdated_1_1_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1& cellListCurrentInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1BlockMarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: write cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NETWORK_CURRENT_CELL_UPDATED_1_1, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSignalStrengthResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::Rssi& rssi, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RssiBlockMarshalling(rilCallbackData, rssi)) {
        HDF_LOGE("%{public}s: write rssi failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_SIGNAL_STRENGTH_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCsRegStatusResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CsRegStatusInfo& csRegStatusInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CsRegStatusInfoBlockMarshalling(rilCallbackData, csRegStatusInfo)) {
        HDF_LOGE("%{public}s: write csRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CS_REG_STATUS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPsRegStatusResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PsRegStatusInfo& psRegStatusInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::PsRegStatusInfoBlockMarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: write psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_PS_REG_STATUS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetOperatorInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::OperatorInfo& psRegStatusInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::OperatorInfoBlockMarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: write psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_OPERATOR_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSearchInformationResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::AvailableNetworkList& availableNetworkList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::AvailableNetworkListBlockMarshalling(rilCallbackData, availableNetworkList)) {
        HDF_LOGE("%{public}s: write availableNetworkList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_NETWORK_SEARCH_INFORMATION_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNetworkSelectionModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SetNetworkModeInfo& setNetworkModeInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SetNetworkModeInfoBlockMarshalling(rilCallbackData, setNetworkModeInfo)) {
        HDF_LOGE("%{public}s: write setNetworkModeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_NETWORK_SELECTION_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNetworkSelectionModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_NETWORK_SELECTION_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNeighboringCellInfoListResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListNearbyInfo& cellListNearbyInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CellListNearbyInfoBlockMarshalling(rilCallbackData, cellListNearbyInfo)) {
        HDF_LOGE("%{public}s: write cellListNearbyInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_NEIGHBORING_CELL_INFO_LIST_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo& cellListCurrentInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CellListCurrentInfoBlockMarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: write cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CURRENT_CELL_INFO_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCurrentCellInfoResponse_1_1_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1& cellListCurrentInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1BlockMarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: write cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CURRENT_CELL_INFO_RESPONSE_1_1, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetPreferredNetworkResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_PREFERRED_NETWORK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPreferredNetworkResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::PreferredNetworkTypeInfo& preferredNetworkTypeInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::PreferredNetworkTypeInfoBlockMarshalling(rilCallbackData, preferredNetworkTypeInfo)) {
        HDF_LOGE("%{public}s: write preferredNetworkTypeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_PREFERRED_NETWORK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetPhysicalChannelConfigResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ChannelConfigInfoList& channelConfigInfoList, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::ChannelConfigInfoListBlockMarshalling(rilCallbackData, channelConfigInfoList)) {
        HDF_LOGE("%{public}s: write channelConfigInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_PHYSICAL_CHANNEL_CONFIG_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetLocateUpdatesResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_LOCATE_UPDATES_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNotificationFilterResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_NOTIFICATION_FILTER_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetDeviceStateResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_DEVICE_STATE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SmsMessageInfoBlockMarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: write smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NEW_SMS_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewCdmaSmsNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SmsMessageInfoBlockMarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: write smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NEW_CDMA_SMS_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SmsStatusReportNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SmsMessageInfo& smsMessageInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SmsMessageInfoBlockMarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: write smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SMS_STATUS_REPORT_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::NewSmsStoredOnSimNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t recordNumber, int32_t indicationType, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(recordNumber)) {
        HDF_LOGE("%{public}s: write recordNumber failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(indicationType)) {
        HDF_LOGE("%{public}s: write indicationType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_NEW_SMS_STORED_ON_SIM_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CBConfigNotify_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CBConfigReportInfo& cellBroadConfigReportInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CBConfigReportInfoBlockMarshalling(rilCallbackData, cellBroadConfigReportInfo)) {
        HDF_LOGE("%{public}s: write cellBroadConfigReportInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_CB_CONFIG_NOTIFY, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendGsmSmsResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SendSmsResultInfoBlockMarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: write sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEND_GSM_SMS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendCdmaSmsResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SendSmsResultInfoBlockMarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: write sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEND_CDMA_SMS_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_ADD_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DEL_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UPDATE_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::AddCdmaSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_ADD_CDMA_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::DelCdmaSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_DEL_CDMA_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::UpdateCdmaSimMessageResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_UPDATE_CDMA_SIM_MESSAGE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetSmscAddrResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_SMSC_ADDR_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetSmscAddrResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::ServiceCenterAddress& serviceCenterAddress, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::ServiceCenterAddressBlockMarshalling(rilCallbackData, serviceCenterAddress)) {
        HDF_LOGE("%{public}s: write serviceCenterAddress failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_SMSC_ADDR_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCBConfigResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_C_B_CONFIG_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCBConfigResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CBConfigInfo& cellBroadcastInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CBConfigInfoBlockMarshalling(rilCallbackData, cellBroadcastInfo)) {
        HDF_LOGE("%{public}s: write cellBroadcastInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_C_B_CONFIG_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetCdmaCBConfigResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_CDMA_C_B_CONFIG_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetCdmaCBConfigResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::CdmaCBConfigInfo& cdmaCBConfigInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::CdmaCBConfigInfoBlockMarshalling(rilCallbackData, cdmaCBConfigInfo)) {
        HDF_LOGE("%{public}s: write cdmaCBConfigInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_CDMA_C_B_CONFIG_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsMoreModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const OHOS::HDI::Ril::V1_1::SendSmsResultInfo& sendSmsResultInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::SendSmsResultInfoBlockMarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: write sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEND_SMS_MORE_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SendSmsAckResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SEND_SMS_ACK_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::CommonErrorResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_COMMON_ERROR_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(state)) {
        HDF_LOGE("%{public}s: write state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_RRC_CONNECTION_STATE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::SetNrOptionModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_SET_NR_OPTION_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetNrOptionModeResponse_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t mode, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(mode)) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_NR_OPTION_MODE_RESPONSE, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetRrcConnectionStateUpdated_(const OHOS::HDI::Ril::V1_1::RilRadioResponseInfo& responseInfo, int32_t state, const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Ril::V1_1::RilRadioResponseInfoBlockMarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: write responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackData.WriteInt32(state)) {
        HDF_LOGE("%{public}s: write state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_RRC_CONNECTION_STATE_UPDATED, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel rilCallbackData;
    MessageParcel rilCallbackReply;
    MessageOption rilCallbackOption(MessageOption::TF_SYNC);

    if (!rilCallbackData.WriteInterfaceToken(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t rilCallbackRet = remote->SendRequest(CMD_RIL_CALLBACK_GET_VERSION, rilCallbackData, rilCallbackReply, rilCallbackOption);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    if (!rilCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return rilCallbackRet;
}

} // V1_1
} // Ril
} // HDI
} // OHOS
