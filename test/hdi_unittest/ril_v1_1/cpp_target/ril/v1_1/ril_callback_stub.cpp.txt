/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/ril_callback_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>

#define HDF_LOG_TAG    ril_callback_stub

namespace OHOS {
namespace HDI {
namespace Ril {
namespace V1_1 {



OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStub(const sptr<OHOS::HDI::Ril::V1_1::IRilCallback> &impl)
    : IPCObjectStub(OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Ril::V1_1::RilCallbackStub::~RilCallbackStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_RIL_CALLBACK_GET_VERSION:
            return RilCallbackStubGetVersion(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_EMERGENCY_NOTICE:
            return RilCallbackStubCallEmergencyNotice(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_STATE_UPDATED:
            return RilCallbackStubCallStateUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_RINGBACK_VOICE_NOTICE:
            return RilCallbackStubCallRingbackVoiceNotice(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_SRVCC_STATUS_NOTICE:
            return RilCallbackStubCallSrvccStatusNotice(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_USSD_NOTICE:
            return RilCallbackStubCallUssdNotice(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_SS_NOTICE:
            return RilCallbackStubCallSsNotice(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_RSRVCC_STATUS_NOTIFY:
            return RilCallbackStubCallRsrvccStatusNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SET_EMERGENCY_CALL_LIST_RESPONSE:
            return RilCallbackStubSetEmergencyCallListResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_EMERGENCY_CALL_LIST_RESPONSE:
            return RilCallbackStubGetEmergencyCallListResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_LIST_RESPONSE:
            return RilCallbackStubGetCallListResponse(data, reply, option);
        case CMD_RIL_CALLBACK_DIAL_RESPONSE:
            return RilCallbackStubDialResponse(data, reply, option);
        case CMD_RIL_CALLBACK_HANGUP_RESPONSE:
            return RilCallbackStubHangupResponse(data, reply, option);
        case CMD_RIL_CALLBACK_REJECT_RESPONSE:
            return RilCallbackStubRejectResponse(data, reply, option);
        case CMD_RIL_CALLBACK_ANSWER_RESPONSE:
            return RilCallbackStubAnswerResponse(data, reply, option);
        case CMD_RIL_CALLBACK_HOLD_CALL_RESPONSE:
            return RilCallbackStubHoldCallResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UN_HOLD_CALL_RESPONSE:
            return RilCallbackStubUnHoldCallResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SWITCH_CALL_RESPONSE:
            return RilCallbackStubSwitchCallResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CLIP_RESPONSE:
            return RilCallbackStubGetClipResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CLIP_RESPONSE:
            return RilCallbackStubSetClipResponse(data, reply, option);
        case CMD_RIL_CALLBACK_COMBINE_CONFERENCE_RESPONSE:
            return RilCallbackStubCombineConferenceResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SEPARATE_CONFERENCE_RESPONSE:
            return RilCallbackStubSeparateConferenceResponse(data, reply, option);
        case CMD_RIL_CALLBACK_CALL_SUPPLEMENT_RESPONSE:
            return RilCallbackStubCallSupplementResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_WAITING_RESPONSE:
            return RilCallbackStubGetCallWaitingResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CALL_WAITING_RESPONSE:
            return RilCallbackStubSetCallWaitingResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_TRANSFER_INFO_RESPONSE:
            return RilCallbackStubGetCallTransferInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CALL_TRANSFER_INFO_RESPONSE:
            return RilCallbackStubSetCallTransferInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_RESTRICTION_RESPONSE:
            return RilCallbackStubGetCallRestrictionResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CALL_RESTRICTION_RESPONSE:
            return RilCallbackStubSetCallRestrictionResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CLIR_RESPONSE:
            return RilCallbackStubGetClirResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CLIR_RESPONSE:
            return RilCallbackStubSetClirResponse(data, reply, option);
        case CMD_RIL_CALLBACK_START_DTMF_RESPONSE:
            return RilCallbackStubStartDtmfResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SEND_DTMF_RESPONSE:
            return RilCallbackStubSendDtmfResponse(data, reply, option);
        case CMD_RIL_CALLBACK_STOP_DTMF_RESPONSE:
            return RilCallbackStubStopDtmfResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_PREFERENCE_MODE_RESPONSE:
            return RilCallbackStubGetCallPreferenceModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CALL_PREFERENCE_MODE_RESPONSE:
            return RilCallbackStubSetCallPreferenceModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_USSD_RESPONSE:
            return RilCallbackStubSetUssdResponse(data, reply, option);
        case CMD_RIL_CALLBACK_CLOSE_UN_FINISHED_USSD_RESPONSE:
            return RilCallbackStubCloseUnFinishedUssdResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_USSD_RESPONSE:
            return RilCallbackStubGetUssdResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_MUTE_RESPONSE:
            return RilCallbackStubSetMuteResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_MUTE_RESPONSE:
            return RilCallbackStubGetMuteResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CALL_FAIL_REASON_RESPONSE:
            return RilCallbackStubGetCallFailReasonResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_BARRING_PASSWORD_RESPONSE:
            return RilCallbackStubSetBarringPasswordResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_VONR_SWITCH_RESPONSE:
            return RilCallbackStubSetVonrSwitchResponse(data, reply, option);
        case CMD_RIL_CALLBACK_PDP_CONTEXT_LIST_UPDATED:
            return RilCallbackStubPdpContextListUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_DATA_LINK_CAPABILITY_UPDATED:
            return RilCallbackStubDataLinkCapabilityUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_ACTIVATE_PDP_CONTEXT_RESPONSE:
            return RilCallbackStubActivatePdpContextResponse(data, reply, option);
        case CMD_RIL_CALLBACK_DEACTIVATE_PDP_CONTEXT_RESPONSE:
            return RilCallbackStubDeactivatePdpContextResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_PDP_CONTEXT_LIST_RESPONSE:
            return RilCallbackStubGetPdpContextListResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_INIT_APN_INFO_RESPONSE:
            return RilCallbackStubSetInitApnInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_LINK_BANDWIDTH_INFO_RESPONSE:
            return RilCallbackStubGetLinkBandwidthInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_LINK_CAPABILITY_RESPONSE:
            return RilCallbackStubGetLinkCapabilityResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_LINK_BANDWIDTH_REPORTING_RULE_RESPONSE:
            return RilCallbackStubSetLinkBandwidthReportingRuleResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_DATA_PERMITTED_RESPONSE:
            return RilCallbackStubSetDataPermittedResponse(data, reply, option);
        case CMD_RIL_CALLBACK_RADIO_STATE_UPDATED:
            return RilCallbackStubRadioStateUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_VOICE_RADIO_TECH_UPDATED:
            return RilCallbackStubVoiceRadioTechUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_DSDS_MODE_UPDATED:
            return RilCallbackStubDsdsModeUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_SHUT_DOWN_RESPONSE:
            return RilCallbackStubShutDownResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_RADIO_STATE_RESPONSE:
            return RilCallbackStubSetRadioStateResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_RADIO_STATE_RESPONSE:
            return RilCallbackStubGetRadioStateResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_IMEI_RESPONSE:
            return RilCallbackStubGetImeiResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_MEID_RESPONSE:
            return RilCallbackStubGetMeidResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_VOICE_RADIO_TECHNOLOGY_RESPONSE:
            return RilCallbackStubGetVoiceRadioTechnologyResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_BASEBAND_VERSION_RESPONSE:
            return RilCallbackStubGetBasebandVersionResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STATE_UPDATED:
            return RilCallbackStubSimStateUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_SESSION_END_NOTIFY:
            return RilCallbackStubSimStkSessionEndNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_PROACTIVE_NOTIFY:
            return RilCallbackStubSimStkProactiveNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_ALPHA_NOTIFY:
            return RilCallbackStubSimStkAlphaNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_EVENT_NOTIFY:
            return RilCallbackStubSimStkEventNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_CALL_SETUP_NOTIFY:
            return RilCallbackStubSimStkCallSetupNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_REFRESH_NOTIFY:
            return RilCallbackStubSimRefreshNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_RADIO_PROTOCOL_UPDATED:
            return RilCallbackStubSimRadioProtocolUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_GET_SIM_I_O_RESPONSE:
            return RilCallbackStubGetSimIOResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_SIM_STATUS_RESPONSE:
            return RilCallbackStubGetSimStatusResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_IMSI_RESPONSE:
            return RilCallbackStubGetImsiResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_SIM_LOCK_STATUS_RESPONSE:
            return RilCallbackStubGetSimLockStatusResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_SIM_LOCK_RESPONSE:
            return RilCallbackStubSetSimLockResponse(data, reply, option);
        case CMD_RIL_CALLBACK_CHANGE_SIM_PASSWORD_RESPONSE:
            return RilCallbackStubChangeSimPasswordResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UNLOCK_PIN_RESPONSE:
            return RilCallbackStubUnlockPinResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UNLOCK_PUK_RESPONSE:
            return RilCallbackStubUnlockPukResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UNLOCK_PIN2_RESPONSE:
            return RilCallbackStubUnlockPin2Response(data, reply, option);
        case CMD_RIL_CALLBACK_UNLOCK_PUK2_RESPONSE:
            return RilCallbackStubUnlockPuk2Response(data, reply, option);
        case CMD_RIL_CALLBACK_SET_ACTIVE_SIM_RESPONSE:
            return RilCallbackStubSetActiveSimResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_SEND_TERMINAL_RESPONSE_RESPONSE:
            return RilCallbackStubSimStkSendTerminalResponseResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_SEND_ENVELOPE_RESPONSE:
            return RilCallbackStubSimStkSendEnvelopeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT_RESPONSE:
            return RilCallbackStubSimStkSendCallSetupRequestResultResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_STK_IS_READY_RESPONSE:
            return RilCallbackStubSimStkIsReadyResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_RADIO_PROTOCOL_RESPONSE:
            return RilCallbackStubGetRadioProtocolResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_RADIO_PROTOCOL_RESPONSE:
            return RilCallbackStubSetRadioProtocolResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_OPEN_LOGICAL_CHANNEL_RESPONSE:
            return RilCallbackStubSimOpenLogicalChannelResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_CLOSE_LOGICAL_CHANNEL_RESPONSE:
            return RilCallbackStubSimCloseLogicalChannelResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL_RESPONSE:
            return RilCallbackStubSimTransmitApduLogicalChannelResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_TRANSMIT_APDU_BASIC_CHANNEL_RESPONSE:
            return RilCallbackStubSimTransmitApduBasicChannelResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SIM_AUTHENTICATION_RESPONSE:
            return RilCallbackStubSimAuthenticationResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UNLOCK_SIM_LOCK_RESPONSE:
            return RilCallbackStubUnlockSimLockResponse(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_CS_REG_STATUS_UPDATED:
            return RilCallbackStubNetworkCsRegStatusUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_PS_REG_STATUS_UPDATED:
            return RilCallbackStubNetworkPsRegStatusUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_SIGNAL_STRENGTH_UPDATED:
            return RilCallbackStubSignalStrengthUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_TIME_ZONE_UPDATED:
            return RilCallbackStubNetworkTimeZoneUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_TIME_UPDATED:
            return RilCallbackStubNetworkTimeUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_PHY_CHNL_CFG_UPDATED:
            return RilCallbackStubNetworkPhyChnlCfgUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_CURRENT_CELL_UPDATED:
            return RilCallbackStubNetworkCurrentCellUpdated(data, reply, option);
        case CMD_RIL_CALLBACK_NETWORK_CURRENT_CELL_UPDATED_1_1:
            return RilCallbackStubNetworkCurrentCellUpdated_1_1(data, reply, option);
        case CMD_RIL_CALLBACK_GET_SIGNAL_STRENGTH_RESPONSE:
            return RilCallbackStubGetSignalStrengthResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CS_REG_STATUS_RESPONSE:
            return RilCallbackStubGetCsRegStatusResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_PS_REG_STATUS_RESPONSE:
            return RilCallbackStubGetPsRegStatusResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_OPERATOR_INFO_RESPONSE:
            return RilCallbackStubGetOperatorInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_NETWORK_SEARCH_INFORMATION_RESPONSE:
            return RilCallbackStubGetNetworkSearchInformationResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_NETWORK_SELECTION_MODE_RESPONSE:
            return RilCallbackStubGetNetworkSelectionModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_NETWORK_SELECTION_MODE_RESPONSE:
            return RilCallbackStubSetNetworkSelectionModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_NEIGHBORING_CELL_INFO_LIST_RESPONSE:
            return RilCallbackStubGetNeighboringCellInfoListResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CURRENT_CELL_INFO_RESPONSE:
            return RilCallbackStubGetCurrentCellInfoResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CURRENT_CELL_INFO_RESPONSE_1_1:
            return RilCallbackStubGetCurrentCellInfoResponse_1_1(data, reply, option);
        case CMD_RIL_CALLBACK_SET_PREFERRED_NETWORK_RESPONSE:
            return RilCallbackStubSetPreferredNetworkResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_PREFERRED_NETWORK_RESPONSE:
            return RilCallbackStubGetPreferredNetworkResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_PHYSICAL_CHANNEL_CONFIG_RESPONSE:
            return RilCallbackStubGetPhysicalChannelConfigResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_LOCATE_UPDATES_RESPONSE:
            return RilCallbackStubSetLocateUpdatesResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_NOTIFICATION_FILTER_RESPONSE:
            return RilCallbackStubSetNotificationFilterResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_DEVICE_STATE_RESPONSE:
            return RilCallbackStubSetDeviceStateResponse(data, reply, option);
        case CMD_RIL_CALLBACK_NEW_SMS_NOTIFY:
            return RilCallbackStubNewSmsNotify(data, reply, option);
        case CMD_RIL_CALLBACK_NEW_CDMA_SMS_NOTIFY:
            return RilCallbackStubNewCdmaSmsNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SMS_STATUS_REPORT_NOTIFY:
            return RilCallbackStubSmsStatusReportNotify(data, reply, option);
        case CMD_RIL_CALLBACK_NEW_SMS_STORED_ON_SIM_NOTIFY:
            return RilCallbackStubNewSmsStoredOnSimNotify(data, reply, option);
        case CMD_RIL_CALLBACK_CB_CONFIG_NOTIFY:
            return RilCallbackStubCBConfigNotify(data, reply, option);
        case CMD_RIL_CALLBACK_SEND_GSM_SMS_RESPONSE:
            return RilCallbackStubSendGsmSmsResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SEND_CDMA_SMS_RESPONSE:
            return RilCallbackStubSendCdmaSmsResponse(data, reply, option);
        case CMD_RIL_CALLBACK_ADD_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubAddSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_DEL_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubDelSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UPDATE_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubUpdateSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_ADD_CDMA_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubAddCdmaSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_DEL_CDMA_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubDelCdmaSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_UPDATE_CDMA_SIM_MESSAGE_RESPONSE:
            return RilCallbackStubUpdateCdmaSimMessageResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_SMSC_ADDR_RESPONSE:
            return RilCallbackStubSetSmscAddrResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_SMSC_ADDR_RESPONSE:
            return RilCallbackStubGetSmscAddrResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_C_B_CONFIG_RESPONSE:
            return RilCallbackStubSetCBConfigResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_C_B_CONFIG_RESPONSE:
            return RilCallbackStubGetCBConfigResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_CDMA_C_B_CONFIG_RESPONSE:
            return RilCallbackStubSetCdmaCBConfigResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_CDMA_C_B_CONFIG_RESPONSE:
            return RilCallbackStubGetCdmaCBConfigResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SEND_SMS_MORE_MODE_RESPONSE:
            return RilCallbackStubSendSmsMoreModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SEND_SMS_ACK_RESPONSE:
            return RilCallbackStubSendSmsAckResponse(data, reply, option);
        case CMD_RIL_CALLBACK_COMMON_ERROR_RESPONSE:
            return RilCallbackStubCommonErrorResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_RRC_CONNECTION_STATE_RESPONSE:
            return RilCallbackStubGetRrcConnectionStateResponse(data, reply, option);
        case CMD_RIL_CALLBACK_SET_NR_OPTION_MODE_RESPONSE:
            return RilCallbackStubSetNrOptionModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_NR_OPTION_MODE_RESPONSE:
            return RilCallbackStubGetNrOptionModeResponse(data, reply, option);
        case CMD_RIL_CALLBACK_GET_RRC_CONNECTION_STATE_UPDATED:
            return RilCallbackStubGetRrcConnectionStateUpdated(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallEmergencyNotice(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallEmergencyNotice_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallStateUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallStateUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRingbackVoiceNotice(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRingbackVoiceNotice_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSrvccStatusNotice(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSrvccStatusNotice_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallUssdNotice(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallUssdNotice_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSsNotice(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSsNotice_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRsrvccStatusNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRsrvccStatusNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetEmergencyCallListResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetEmergencyCallListResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetEmergencyCallListResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetEmergencyCallListResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallListResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallListResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDialResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDialResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHangupResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHangupResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRejectResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRejectResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAnswerResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAnswerResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHoldCallResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHoldCallResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnHoldCallResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnHoldCallResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSwitchCallResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSwitchCallResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClipResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClipResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClipResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClipResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCombineConferenceResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCombineConferenceResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSeparateConferenceResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSeparateConferenceResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSupplementResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSupplementResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallWaitingResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallWaitingResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallWaitingResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallWaitingResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallTransferInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallTransferInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallTransferInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallTransferInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallRestrictionResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallRestrictionResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallRestrictionResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallRestrictionResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClirResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClirResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClirResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClirResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStartDtmfResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStartDtmfResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendDtmfResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendDtmfResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStopDtmfResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStopDtmfResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallPreferenceModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallPreferenceModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallPreferenceModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallPreferenceModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetUssdResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetUssdResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCloseUnFinishedUssdResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCloseUnFinishedUssdResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetUssdResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetUssdResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetMuteResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetMuteResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMuteResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMuteResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallFailReasonResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallFailReasonResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetBarringPasswordResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetBarringPasswordResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetVonrSwitchResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetVonrSwitchResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubPdpContextListUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubPdpContextListUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDataLinkCapabilityUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDataLinkCapabilityUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubActivatePdpContextResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubActivatePdpContextResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDeactivatePdpContextResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDeactivatePdpContextResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPdpContextListResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPdpContextListResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetInitApnInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetInitApnInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkBandwidthInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkBandwidthInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkCapabilityResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkCapabilityResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLinkBandwidthReportingRuleResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLinkBandwidthReportingRuleResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDataPermittedResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDataPermittedResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRadioStateUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRadioStateUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubVoiceRadioTechUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubVoiceRadioTechUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDsdsModeUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDsdsModeUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubShutDownResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubShutDownResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioStateResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioStateResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioStateResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioStateResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImeiResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImeiResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMeidResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMeidResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVoiceRadioTechnologyResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVoiceRadioTechnologyResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetBasebandVersionResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetBasebandVersionResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStateUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStateUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSessionEndNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSessionEndNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkProactiveNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkProactiveNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkAlphaNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkAlphaNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkEventNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkEventNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkCallSetupNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkCallSetupNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRefreshNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRefreshNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRadioProtocolUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRadioProtocolUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimIOResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimIOResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimStatusResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimStatusResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImsiResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImsiResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimLockStatusResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimLockStatusResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSimLockResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSimLockResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubChangeSimPasswordResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubChangeSimPasswordResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPinResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPinResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPukResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPukResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPin2Response(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPin2Response_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPuk2Response(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPuk2Response_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetActiveSimResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetActiveSimResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendTerminalResponseResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendTerminalResponseResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendEnvelopeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendEnvelopeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendCallSetupRequestResultResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendCallSetupRequestResultResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkIsReadyResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkIsReadyResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioProtocolResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioProtocolResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioProtocolResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioProtocolResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimOpenLogicalChannelResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimOpenLogicalChannelResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimCloseLogicalChannelResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimCloseLogicalChannelResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduLogicalChannelResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduLogicalChannelResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduBasicChannelResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduBasicChannelResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimAuthenticationResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimAuthenticationResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockSimLockResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockSimLockResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCsRegStatusUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCsRegStatusUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPsRegStatusUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPsRegStatusUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSignalStrengthUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSignalStrengthUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeZoneUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeZoneUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPhyChnlCfgUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPhyChnlCfgUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated_1_1(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated_1_1_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSignalStrengthResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSignalStrengthResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCsRegStatusResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCsRegStatusResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPsRegStatusResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPsRegStatusResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetOperatorInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetOperatorInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSearchInformationResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSearchInformationResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSelectionModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSelectionModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNetworkSelectionModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNetworkSelectionModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNeighboringCellInfoListResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNeighboringCellInfoListResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse_1_1(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse_1_1_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetPreferredNetworkResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetPreferredNetworkResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPreferredNetworkResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPreferredNetworkResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPhysicalChannelConfigResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPhysicalChannelConfigResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLocateUpdatesResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLocateUpdatesResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNotificationFilterResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNotificationFilterResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDeviceStateResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDeviceStateResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewCdmaSmsNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewCdmaSmsNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSmsStatusReportNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSmsStatusReportNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsStoredOnSimNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsStoredOnSimNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCBConfigNotify(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCBConfigNotify_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendGsmSmsResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendGsmSmsResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendCdmaSmsResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendCdmaSmsResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddCdmaSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddCdmaSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelCdmaSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelCdmaSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateCdmaSimMessageResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateCdmaSimMessageResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSmscAddrResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSmscAddrResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSmscAddrResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSmscAddrResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCBConfigResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCBConfigResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCBConfigResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCBConfigResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCdmaCBConfigResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCdmaCBConfigResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCdmaCBConfigResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCdmaCBConfigResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsMoreModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsMoreModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsAckResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsAckResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCommonErrorResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCommonErrorResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNrOptionModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNrOptionModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNrOptionModeResponse(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNrOptionModeResponse_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateUpdated(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateUpdated_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVersion(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption)
{
    return OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVersion_(rilCallbackData, rilCallbackReply, rilCallbackOption, impl_);
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallEmergencyNotice_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::EmergencyInfoList emergencyInfoList;
    if (!EmergencyInfoListBlockUnmarshalling(rilCallbackData, emergencyInfoList)) {
        HDF_LOGE("%{public}s: read emergencyInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallEmergencyNotice(responseInfo, emergencyInfoList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallStateUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallStateUpdated(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRingbackVoiceNotice_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RingbackVoice ringbackVoice;
    if (!RingbackVoiceBlockUnmarshalling(rilCallbackData, ringbackVoice)) {
        HDF_LOGE("%{public}s: read ringbackVoice failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallRingbackVoiceNotice(responseInfo, ringbackVoice);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSrvccStatusNotice_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SrvccStatus srvccStatus;
    if (!SrvccStatusBlockUnmarshalling(rilCallbackData, srvccStatus)) {
        HDF_LOGE("%{public}s: read srvccStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallSrvccStatusNotice(responseInfo, srvccStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallUssdNotice_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::UssdNoticeInfo ussdNoticeInfo;
    if (!UssdNoticeInfoBlockUnmarshalling(rilCallbackData, ussdNoticeInfo)) {
        HDF_LOGE("%{public}s: read ussdNoticeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallUssdNotice(responseInfo, ussdNoticeInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSsNotice_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SsNoticeInfo ssNoticeInfo;
    if (!SsNoticeInfoBlockUnmarshalling(rilCallbackData, ssNoticeInfo)) {
        HDF_LOGE("%{public}s: read ssNoticeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallSsNotice(responseInfo, ssNoticeInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallRsrvccStatusNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallRsrvccStatusNotify(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetEmergencyCallListResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetEmergencyCallListResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetEmergencyCallListResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::EmergencyInfoList emergencyInfoList;
    if (!EmergencyInfoListBlockUnmarshalling(rilCallbackData, emergencyInfoList)) {
        HDF_LOGE("%{public}s: read emergencyInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetEmergencyCallListResponse(responseInfo, emergencyInfoList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallListResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CallInfoList callList;
    if (!CallInfoListBlockUnmarshalling(rilCallbackData, callList)) {
        HDF_LOGE("%{public}s: read callList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallListResponse(responseInfo, callList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDialResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DialResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHangupResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->HangupResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRejectResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->RejectResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAnswerResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->AnswerResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubHoldCallResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->HoldCallResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnHoldCallResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnHoldCallResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSwitchCallResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SwitchCallResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClipResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::GetClipResult getClipResult;
    if (!GetClipResultBlockUnmarshalling(rilCallbackData, getClipResult)) {
        HDF_LOGE("%{public}s: read getClipResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetClipResponse(responseInfo, getClipResult);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClipResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetClipResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCombineConferenceResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CombineConferenceResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSeparateConferenceResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SeparateConferenceResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCallSupplementResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CallSupplementResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallWaitingResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CallWaitResult callWaitResult;
    if (!CallWaitResultBlockUnmarshalling(rilCallbackData, callWaitResult)) {
        HDF_LOGE("%{public}s: read callWaitResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallWaitingResponse(responseInfo, callWaitResult);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallWaitingResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCallWaitingResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallTransferInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CallForwardQueryInfoList cFQueryList;
    if (!CallForwardQueryInfoListBlockUnmarshalling(rilCallbackData, cFQueryList)) {
        HDF_LOGE("%{public}s: read cFQueryList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallTransferInfoResponse(responseInfo, cFQueryList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallTransferInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCallTransferInfoResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallRestrictionResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CallRestrictionResult result;
    if (!CallRestrictionResultBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallRestrictionResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallRestrictionResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCallRestrictionResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetClirResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::GetClirResult getClirResult;
    if (!GetClirResultBlockUnmarshalling(rilCallbackData, getClirResult)) {
        HDF_LOGE("%{public}s: read getClirResult failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetClirResponse(responseInfo, getClirResult);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetClirResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetClirResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStartDtmfResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->StartDtmfResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendDtmfResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SendDtmfResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubStopDtmfResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->StopDtmfResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallPreferenceModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mode = 0;
    if (!rilCallbackData.ReadInt32(mode)) {
        HDF_LOGE("%{public}s: read mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallPreferenceModeResponse(responseInfo, mode);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCallPreferenceModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCallPreferenceModeResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetUssdResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetUssdResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCloseUnFinishedUssdResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CloseUnFinishedUssdResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetUssdResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cusd = 0;
    if (!rilCallbackData.ReadInt32(cusd)) {
        HDF_LOGE("%{public}s: read cusd failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetUssdResponse(responseInfo, cusd);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetMuteResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetMuteResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMuteResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mute = 0;
    if (!rilCallbackData.ReadInt32(mute)) {
        HDF_LOGE("%{public}s: read mute failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetMuteResponse(responseInfo, mute);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCallFailReasonResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t callFail = 0;
    if (!rilCallbackData.ReadInt32(callFail)) {
        HDF_LOGE("%{public}s: read callFail failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCallFailReasonResponse(responseInfo, callFail);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetBarringPasswordResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetBarringPasswordResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetVonrSwitchResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetVonrSwitchResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubPdpContextListUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::DataCallResultList dataCallResultList;
    if (!DataCallResultListBlockUnmarshalling(rilCallbackData, dataCallResultList)) {
        HDF_LOGE("%{public}s: read dataCallResultList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->PdpContextListUpdated(responseInfo, dataCallResultList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDataLinkCapabilityUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::DataLinkCapability capability;
    if (!DataLinkCapabilityBlockUnmarshalling(rilCallbackData, capability)) {
        HDF_LOGE("%{public}s: read capability failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DataLinkCapabilityUpdated(responseInfo, capability);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubActivatePdpContextResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SetupDataCallResultInfo setupDataCallResultInfo;
    if (!SetupDataCallResultInfoBlockUnmarshalling(rilCallbackData, setupDataCallResultInfo)) {
        HDF_LOGE("%{public}s: read setupDataCallResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->ActivatePdpContextResponse(responseInfo, setupDataCallResultInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDeactivatePdpContextResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DeactivatePdpContextResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPdpContextListResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::DataCallResultList dataCallResultList;
    if (!DataCallResultListBlockUnmarshalling(rilCallbackData, dataCallResultList)) {
        HDF_LOGE("%{public}s: read dataCallResultList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetPdpContextListResponse(responseInfo, dataCallResultList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetInitApnInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetInitApnInfoResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkBandwidthInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::DataLinkBandwidthInfo dataLinkBandwidthInfo;
    if (!DataLinkBandwidthInfoBlockUnmarshalling(rilCallbackData, dataLinkBandwidthInfo)) {
        HDF_LOGE("%{public}s: read dataLinkBandwidthInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetLinkBandwidthInfoResponse(responseInfo, dataLinkBandwidthInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetLinkCapabilityResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::DataLinkCapability capability;
    if (!DataLinkCapabilityBlockUnmarshalling(rilCallbackData, capability)) {
        HDF_LOGE("%{public}s: read capability failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetLinkCapabilityResponse(responseInfo, capability);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLinkBandwidthReportingRuleResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetLinkBandwidthReportingRuleResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDataPermittedResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetDataPermittedResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubRadioStateUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t state = 0;
    if (!rilCallbackData.ReadInt32(state)) {
        HDF_LOGE("%{public}s: read state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->RadioStateUpdated(responseInfo, state);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubVoiceRadioTechUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::VoiceRadioTechnology voiceRadioTechnology;
    if (!VoiceRadioTechnologyBlockUnmarshalling(rilCallbackData, voiceRadioTechnology)) {
        HDF_LOGE("%{public}s: read voiceRadioTechnology failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->VoiceRadioTechUpdated(responseInfo, voiceRadioTechnology);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDsdsModeUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t state = 0;
    if (!rilCallbackData.ReadInt32(state)) {
        HDF_LOGE("%{public}s: read state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DsdsModeUpdated(responseInfo, state);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubShutDownResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->ShutDownResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioStateResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetRadioStateResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioStateResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t state = 0;
    if (!rilCallbackData.ReadInt32(state)) {
        HDF_LOGE("%{public}s: read state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetRadioStateResponse(responseInfo, state);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImeiResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* imeiCp = rilCallbackData.ReadCString();
    if (imeiCp == nullptr) {
        HDF_LOGE("%{public}s: read imei failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string imei = imeiCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetImeiResponse(responseInfo, imei);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetMeidResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* meidCp = rilCallbackData.ReadCString();
    if (meidCp == nullptr) {
        HDF_LOGE("%{public}s: read meid failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string meid = meidCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetMeidResponse(responseInfo, meid);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVoiceRadioTechnologyResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::VoiceRadioTechnology voiceRadioTechnology;
    if (!VoiceRadioTechnologyBlockUnmarshalling(rilCallbackData, voiceRadioTechnology)) {
        HDF_LOGE("%{public}s: read voiceRadioTechnology failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetVoiceRadioTechnologyResponse(responseInfo, voiceRadioTechnology);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetBasebandVersionResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* basebandVersionCp = rilCallbackData.ReadCString();
    if (basebandVersionCp == nullptr) {
        HDF_LOGE("%{public}s: read basebandVersion failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string basebandVersion = basebandVersionCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetBasebandVersionResponse(responseInfo, basebandVersion);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStateUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStateUpdated(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSessionEndNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkSessionEndNotify(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkProactiveNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* responseCp = rilCallbackData.ReadCString();
    if (responseCp == nullptr) {
        HDF_LOGE("%{public}s: read response failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string response = responseCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkProactiveNotify(responseInfo, response);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkAlphaNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* responseCp = rilCallbackData.ReadCString();
    if (responseCp == nullptr) {
        HDF_LOGE("%{public}s: read response failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string response = responseCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkAlphaNotify(responseInfo, response);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkEventNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* responseCp = rilCallbackData.ReadCString();
    if (responseCp == nullptr) {
        HDF_LOGE("%{public}s: read response failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string response = responseCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkEventNotify(responseInfo, response);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkCallSetupNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkCallSetupNotify(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRefreshNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimRefreshNotify(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimRadioProtocolUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RadioProtocol radioProtocol;
    if (!RadioProtocolBlockUnmarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: read radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimRadioProtocolUpdated(responseInfo, radioProtocol);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimIOResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::IccIoResultInfo result;
    if (!IccIoResultInfoBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetSimIOResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimStatusResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CardStatusInfo result;
    if (!CardStatusInfoBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetSimStatusResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetImsiResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* responseCp = rilCallbackData.ReadCString();
    if (responseCp == nullptr) {
        HDF_LOGE("%{public}s: read response failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string response = responseCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetImsiResponse(responseInfo, response);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSimLockStatusResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t simLockStatus = 0;
    if (!rilCallbackData.ReadInt32(simLockStatus)) {
        HDF_LOGE("%{public}s: read simLockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetSimLockStatusResponse(responseInfo, simLockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSimLockResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetSimLockResponse(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubChangeSimPasswordResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->ChangeSimPasswordResponse(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPinResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnlockPinResponse(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPukResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnlockPukResponse(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPin2Response_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnlockPin2Response(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockPuk2Response_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnlockPuk2Response(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetActiveSimResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetActiveSimResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendTerminalResponseResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkSendTerminalResponseResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendEnvelopeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkSendEnvelopeResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkSendCallSetupRequestResultResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkSendCallSetupRequestResultResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimStkIsReadyResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimStkIsReadyResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRadioProtocolResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RadioProtocol radioProtocol;
    if (!RadioProtocolBlockUnmarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: read radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetRadioProtocolResponse(responseInfo, radioProtocol);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetRadioProtocolResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RadioProtocol radioProtocol;
    if (!RadioProtocolBlockUnmarshalling(rilCallbackData, radioProtocol)) {
        HDF_LOGE("%{public}s: read radioProtocol failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetRadioProtocolResponse(responseInfo, radioProtocol);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimOpenLogicalChannelResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::OpenLogicalChannelResponse pOpenLogicalChannelResponse;
    if (!OpenLogicalChannelResponseBlockUnmarshalling(rilCallbackData, pOpenLogicalChannelResponse)) {
        HDF_LOGE("%{public}s: read pOpenLogicalChannelResponse failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimOpenLogicalChannelResponse(responseInfo, pOpenLogicalChannelResponse);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimCloseLogicalChannelResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimCloseLogicalChannelResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduLogicalChannelResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::IccIoResultInfo result;
    if (!IccIoResultInfoBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimTransmitApduLogicalChannelResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimTransmitApduBasicChannelResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::IccIoResultInfo result;
    if (!IccIoResultInfoBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimTransmitApduBasicChannelResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSimAuthenticationResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::IccIoResultInfo result;
    if (!IccIoResultInfoBlockUnmarshalling(rilCallbackData, result)) {
        HDF_LOGE("%{public}s: read result failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SimAuthenticationResponse(responseInfo, result);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUnlockSimLockResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::LockStatusResp lockStatus;
    if (!LockStatusRespBlockUnmarshalling(rilCallbackData, lockStatus)) {
        HDF_LOGE("%{public}s: read lockStatus failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UnlockSimLockResponse(responseInfo, lockStatus);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCsRegStatusUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CsRegStatusInfo csRegStatusInfo;
    if (!CsRegStatusInfoBlockUnmarshalling(rilCallbackData, csRegStatusInfo)) {
        HDF_LOGE("%{public}s: read csRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkCsRegStatusUpdated(responseInfo, csRegStatusInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPsRegStatusUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::PsRegStatusInfo psRegStatusInfo;
    if (!PsRegStatusInfoBlockUnmarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: read psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkPsRegStatusUpdated(responseInfo, psRegStatusInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSignalStrengthUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::Rssi rssi;
    if (!RssiBlockUnmarshalling(rilCallbackData, rssi)) {
        HDF_LOGE("%{public}s: read rssi failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SignalStrengthUpdated(responseInfo, rssi);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeZoneUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* timeZoneStrCp = rilCallbackData.ReadCString();
    if (timeZoneStrCp == nullptr) {
        HDF_LOGE("%{public}s: read timeZoneStr failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string timeZoneStr = timeZoneStrCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkTimeZoneUpdated(responseInfo, timeZoneStr);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkTimeUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* timeStrCp = rilCallbackData.ReadCString();
    if (timeStrCp == nullptr) {
        HDF_LOGE("%{public}s: read timeStr failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string timeStr = timeStrCp;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkTimeUpdated(responseInfo, timeStr);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkPhyChnlCfgUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::ChannelConfigInfoList channelConfigInfoList;
    if (!ChannelConfigInfoListBlockUnmarshalling(rilCallbackData, channelConfigInfoList)) {
        HDF_LOGE("%{public}s: read channelConfigInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkPhyChnlCfgUpdated(responseInfo, channelConfigInfoList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CellListCurrentInfo cellListCurrentInfo;
    if (!CellListCurrentInfoBlockUnmarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: read cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkCurrentCellUpdated(responseInfo, cellListCurrentInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNetworkCurrentCellUpdated_1_1_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1 cellListCurrentInfo;
    if (!CellListCurrentInfo_1_1BlockUnmarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: read cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NetworkCurrentCellUpdated_1_1(responseInfo, cellListCurrentInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSignalStrengthResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::Rssi rssi;
    if (!RssiBlockUnmarshalling(rilCallbackData, rssi)) {
        HDF_LOGE("%{public}s: read rssi failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetSignalStrengthResponse(responseInfo, rssi);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCsRegStatusResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CsRegStatusInfo csRegStatusInfo;
    if (!CsRegStatusInfoBlockUnmarshalling(rilCallbackData, csRegStatusInfo)) {
        HDF_LOGE("%{public}s: read csRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCsRegStatusResponse(responseInfo, csRegStatusInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPsRegStatusResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::PsRegStatusInfo psRegStatusInfo;
    if (!PsRegStatusInfoBlockUnmarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: read psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetPsRegStatusResponse(responseInfo, psRegStatusInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetOperatorInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::OperatorInfo psRegStatusInfo;
    if (!OperatorInfoBlockUnmarshalling(rilCallbackData, psRegStatusInfo)) {
        HDF_LOGE("%{public}s: read psRegStatusInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetOperatorInfoResponse(responseInfo, psRegStatusInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSearchInformationResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::AvailableNetworkList availableNetworkList;
    if (!AvailableNetworkListBlockUnmarshalling(rilCallbackData, availableNetworkList)) {
        HDF_LOGE("%{public}s: read availableNetworkList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetNetworkSearchInformationResponse(responseInfo, availableNetworkList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNetworkSelectionModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SetNetworkModeInfo setNetworkModeInfo;
    if (!SetNetworkModeInfoBlockUnmarshalling(rilCallbackData, setNetworkModeInfo)) {
        HDF_LOGE("%{public}s: read setNetworkModeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetNetworkSelectionModeResponse(responseInfo, setNetworkModeInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNetworkSelectionModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetNetworkSelectionModeResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNeighboringCellInfoListResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CellListNearbyInfo cellListNearbyInfo;
    if (!CellListNearbyInfoBlockUnmarshalling(rilCallbackData, cellListNearbyInfo)) {
        HDF_LOGE("%{public}s: read cellListNearbyInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetNeighboringCellInfoListResponse(responseInfo, cellListNearbyInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CellListCurrentInfo cellListCurrentInfo;
    if (!CellListCurrentInfoBlockUnmarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: read cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCurrentCellInfoResponse(responseInfo, cellListCurrentInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCurrentCellInfoResponse_1_1_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CellListCurrentInfo_1_1 cellListCurrentInfo;
    if (!CellListCurrentInfo_1_1BlockUnmarshalling(rilCallbackData, cellListCurrentInfo)) {
        HDF_LOGE("%{public}s: read cellListCurrentInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCurrentCellInfoResponse_1_1(responseInfo, cellListCurrentInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetPreferredNetworkResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetPreferredNetworkResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPreferredNetworkResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::PreferredNetworkTypeInfo preferredNetworkTypeInfo;
    if (!PreferredNetworkTypeInfoBlockUnmarshalling(rilCallbackData, preferredNetworkTypeInfo)) {
        HDF_LOGE("%{public}s: read preferredNetworkTypeInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetPreferredNetworkResponse(responseInfo, preferredNetworkTypeInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetPhysicalChannelConfigResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::ChannelConfigInfoList channelConfigInfoList;
    if (!ChannelConfigInfoListBlockUnmarshalling(rilCallbackData, channelConfigInfoList)) {
        HDF_LOGE("%{public}s: read channelConfigInfoList failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetPhysicalChannelConfigResponse(responseInfo, channelConfigInfoList);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetLocateUpdatesResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetLocateUpdatesResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNotificationFilterResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetNotificationFilterResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetDeviceStateResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetDeviceStateResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SmsMessageInfo smsMessageInfo;
    if (!SmsMessageInfoBlockUnmarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: read smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NewSmsNotify(responseInfo, smsMessageInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewCdmaSmsNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SmsMessageInfo smsMessageInfo;
    if (!SmsMessageInfoBlockUnmarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: read smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NewCdmaSmsNotify(responseInfo, smsMessageInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSmsStatusReportNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SmsMessageInfo smsMessageInfo;
    if (!SmsMessageInfoBlockUnmarshalling(rilCallbackData, smsMessageInfo)) {
        HDF_LOGE("%{public}s: read smsMessageInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SmsStatusReportNotify(responseInfo, smsMessageInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubNewSmsStoredOnSimNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t recordNumber = 0;
    if (!rilCallbackData.ReadInt32(recordNumber)) {
        HDF_LOGE("%{public}s: read recordNumber failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t indicationType = 0;
    if (!rilCallbackData.ReadInt32(indicationType)) {
        HDF_LOGE("%{public}s: read indicationType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->NewSmsStoredOnSimNotify(responseInfo, recordNumber, indicationType);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCBConfigNotify_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CBConfigReportInfo cellBroadConfigReportInfo;
    if (!CBConfigReportInfoBlockUnmarshalling(rilCallbackData, cellBroadConfigReportInfo)) {
        HDF_LOGE("%{public}s: read cellBroadConfigReportInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CBConfigNotify(responseInfo, cellBroadConfigReportInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendGsmSmsResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SendSmsResultInfo sendSmsResultInfo;
    if (!SendSmsResultInfoBlockUnmarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: read sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SendGsmSmsResponse(responseInfo, sendSmsResultInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendCdmaSmsResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SendSmsResultInfo sendSmsResultInfo;
    if (!SendSmsResultInfoBlockUnmarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: read sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SendCdmaSmsResponse(responseInfo, sendSmsResultInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->AddSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DelSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UpdateSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubAddCdmaSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->AddCdmaSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubDelCdmaSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->DelCdmaSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubUpdateCdmaSimMessageResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->UpdateCdmaSimMessageResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetSmscAddrResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetSmscAddrResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetSmscAddrResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::ServiceCenterAddress serviceCenterAddress;
    if (!ServiceCenterAddressBlockUnmarshalling(rilCallbackData, serviceCenterAddress)) {
        HDF_LOGE("%{public}s: read serviceCenterAddress failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetSmscAddrResponse(responseInfo, serviceCenterAddress);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCBConfigResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCBConfigResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCBConfigResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CBConfigInfo cellBroadcastInfo;
    if (!CBConfigInfoBlockUnmarshalling(rilCallbackData, cellBroadcastInfo)) {
        HDF_LOGE("%{public}s: read cellBroadcastInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCBConfigResponse(responseInfo, cellBroadcastInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetCdmaCBConfigResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetCdmaCBConfigResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetCdmaCBConfigResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::CdmaCBConfigInfo cdmaCBConfigInfo;
    if (!CdmaCBConfigInfoBlockUnmarshalling(rilCallbackData, cdmaCBConfigInfo)) {
        HDF_LOGE("%{public}s: read cdmaCBConfigInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetCdmaCBConfigResponse(responseInfo, cdmaCBConfigInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsMoreModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::SendSmsResultInfo sendSmsResultInfo;
    if (!SendSmsResultInfoBlockUnmarshalling(rilCallbackData, sendSmsResultInfo)) {
        HDF_LOGE("%{public}s: read sendSmsResultInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SendSmsMoreModeResponse(responseInfo, sendSmsResultInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSendSmsAckResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SendSmsAckResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubCommonErrorResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->CommonErrorResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t state = 0;
    if (!rilCallbackData.ReadInt32(state)) {
        HDF_LOGE("%{public}s: read state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetRrcConnectionStateResponse(responseInfo, state);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubSetNrOptionModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->SetNrOptionModeResponse(responseInfo);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetNrOptionModeResponse_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mode = 0;
    if (!rilCallbackData.ReadInt32(mode)) {
        HDF_LOGE("%{public}s: read mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetNrOptionModeResponse(responseInfo, mode);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetRrcConnectionStateUpdated_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    if (!RilRadioResponseInfoBlockUnmarshalling(rilCallbackData, responseInfo)) {
        HDF_LOGE("%{public}s: read responseInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t state = 0;
    if (!rilCallbackData.ReadInt32(state)) {
        HDF_LOGE("%{public}s: read state failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetRrcConnectionStateUpdated(responseInfo, state);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    return rilCallbackRet;
}

int32_t OHOS::HDI::Ril::V1_1::RilCallbackStub::RilCallbackStubGetVersion_(MessageParcel& rilCallbackData, MessageParcel& rilCallbackReply, MessageOption& rilCallbackOption, sptr<OHOS::HDI::Ril::V1_1::IRilCallback> impl)
{
    if (rilCallbackData.ReadInterfaceToken() != OHOS::HDI::Ril::V1_1::IRilCallback::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t rilCallbackRet = impl->GetVersion(majorVer, minorVer);
    if (rilCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, rilCallbackRet);
        return rilCallbackRet;
    }

    if (!rilCallbackReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!rilCallbackReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return rilCallbackRet;
}
} // V1_1
} // Ril
} // HDI
} // OHOS
