/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H
#define OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H

#include "v1_0/icodec_component.h"

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V1_0 {
class CodecComponentService : public OHOS::HDI::Codec::V1_0::ICodecComponent {
public:
    CodecComponentService() = default;
    virtual ~CodecComponentService() = default;

    int32_t GetComponentVersion(OHOS::HDI::Codec::V1_0::CompVerInfo& verInfo) override;

    int32_t SendCommand(OHOS::HDI::Codec::V1_0::CodecCommandType cmd, uint32_t param,
         const std::vector<int8_t>& cmdData) override;

    int32_t GetParameter(uint32_t index, const std::vector<int8_t>& inParamStruct,
         std::vector<int8_t>& outParamStruct) override;

    int32_t SetParameter(uint32_t index, const std::vector<int8_t>& paramStruct) override;

    int32_t GetConfig(uint32_t index, const std::vector<int8_t>& inCfgStruct,
         std::vector<int8_t>& outCfgStruct) override;

    int32_t SetConfig(uint32_t index, const std::vector<int8_t>& cfgStruct) override;

    int32_t GetExtensionIndex(const std::string& paramName, uint32_t& indexType) override;

    int32_t GetState(OHOS::HDI::Codec::V1_0::CodecStateType& state) override;

    int32_t ComponentTunnelRequest(uint32_t port, int32_t tunneledComp, uint32_t tunneledPort,
         const OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& inTunnelSetup, OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& outTunnelSetup) override;

    int32_t UseBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer) override;

    int32_t AllocateBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer) override;

    int32_t FreeBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) override;

    int32_t EmptyThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) override;

    int32_t FillThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) override;

    int32_t SetCallbacks(const sptr<OHOS::HDI::Codec::V1_0::ICodecCallback>& callbacks, int64_t appData) override;

    int32_t ComponentDeInit() override;

    int32_t UseEglImage(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer, const std::vector<int8_t>& eglImage) override;

    int32_t ComponentRoleEnum(std::vector<uint8_t>& role, uint32_t index) override;

};
} // V1_0
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_V1_0_CODECCOMPONENTSERVICE_H

