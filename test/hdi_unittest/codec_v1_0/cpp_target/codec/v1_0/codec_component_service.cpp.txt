/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/codec_component_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    codec_component_service

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V1_0 {
int32_t CodecComponentService::GetComponentVersion(OHOS::HDI::Codec::V1_0::CompVerInfo& verInfo)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::SendCommand(OHOS::HDI::Codec::V1_0::CodecCommandType cmd, uint32_t param,
     const std::vector<int8_t>& cmdData)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::GetParameter(uint32_t index, const std::vector<int8_t>& inParamStruct,
     std::vector<int8_t>& outParamStruct)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::SetParameter(uint32_t index, const std::vector<int8_t>& paramStruct)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::GetConfig(uint32_t index, const std::vector<int8_t>& inCfgStruct,
     std::vector<int8_t>& outCfgStruct)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::SetConfig(uint32_t index, const std::vector<int8_t>& cfgStruct)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::GetExtensionIndex(const std::string& paramName, uint32_t& indexType)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::GetState(OHOS::HDI::Codec::V1_0::CodecStateType& state)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::ComponentTunnelRequest(uint32_t port, int32_t tunneledComp, uint32_t tunneledPort,
     const OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& inTunnelSetup, OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& outTunnelSetup)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::UseBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
     OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::AllocateBuffer(uint32_t portIndex,
     const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer, OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::FreeBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::EmptyThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::FillThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::SetCallbacks(const sptr<OHOS::HDI::Codec::V1_0::ICodecCallback>& callbacks,
     int64_t appData)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::ComponentDeInit()
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::UseEglImage(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
     OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer, const std::vector<int8_t>& eglImage)
{
    return HDF_SUCCESS;
}

int32_t CodecComponentService::ComponentRoleEnum(std::vector<uint8_t>& role, uint32_t index)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Codec
} // HDI
} // OHOS
