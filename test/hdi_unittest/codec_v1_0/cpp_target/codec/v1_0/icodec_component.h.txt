/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_V1_0_ICODECCOMPONENT_H
#define OHOS_HDI_CODEC_V1_0_ICODECCOMPONENT_H

#include <stdint.h>
#include <string>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "codec/v1_0/codec_types.h"
#include "codec/v1_0/icodec_callback.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V1_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_CODEC_COMPONENT_GET_VERSION = 0,
    CMD_CODEC_COMPONENT_GET_COMPONENT_VERSION = 1,
    CMD_CODEC_COMPONENT_SEND_COMMAND = 2,
    CMD_CODEC_COMPONENT_GET_PARAMETER = 3,
    CMD_CODEC_COMPONENT_SET_PARAMETER = 4,
    CMD_CODEC_COMPONENT_GET_CONFIG = 5,
    CMD_CODEC_COMPONENT_SET_CONFIG = 6,
    CMD_CODEC_COMPONENT_GET_EXTENSION_INDEX = 7,
    CMD_CODEC_COMPONENT_GET_STATE = 8,
    CMD_CODEC_COMPONENT_COMPONENT_TUNNEL_REQUEST = 9,
    CMD_CODEC_COMPONENT_USE_BUFFER = 10,
    CMD_CODEC_COMPONENT_ALLOCATE_BUFFER = 11,
    CMD_CODEC_COMPONENT_FREE_BUFFER = 12,
    CMD_CODEC_COMPONENT_EMPTY_THIS_BUFFER = 13,
    CMD_CODEC_COMPONENT_FILL_THIS_BUFFER = 14,
    CMD_CODEC_COMPONENT_SET_CALLBACKS = 15,
    CMD_CODEC_COMPONENT_COMPONENT_DE_INIT = 16,
    CMD_CODEC_COMPONENT_USE_EGL_IMAGE = 17,
    CMD_CODEC_COMPONENT_COMPONENT_ROLE_ENUM = 18,
};

class ICodecComponent : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.codec.v1_0.ICodecComponent");

    virtual ~ICodecComponent() = default;

    virtual int32_t GetComponentVersion(OHOS::HDI::Codec::V1_0::CompVerInfo& verInfo) = 0;

    virtual int32_t SendCommand(OHOS::HDI::Codec::V1_0::CodecCommandType cmd, uint32_t param,
         const std::vector<int8_t>& cmdData) = 0;

    virtual int32_t GetParameter(uint32_t index, const std::vector<int8_t>& inParamStruct,
         std::vector<int8_t>& outParamStruct) = 0;

    virtual int32_t SetParameter(uint32_t index, const std::vector<int8_t>& paramStruct) = 0;

    virtual int32_t GetConfig(uint32_t index, const std::vector<int8_t>& inCfgStruct,
         std::vector<int8_t>& outCfgStruct) = 0;

    virtual int32_t SetConfig(uint32_t index, const std::vector<int8_t>& cfgStruct) = 0;

    virtual int32_t GetExtensionIndex(const std::string& paramName, uint32_t& indexType) = 0;

    virtual int32_t GetState(OHOS::HDI::Codec::V1_0::CodecStateType& state) = 0;

    virtual int32_t ComponentTunnelRequest(uint32_t port, int32_t tunneledComp, uint32_t tunneledPort,
         const OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& inTunnelSetup, OHOS::HDI::Codec::V1_0::CodecTunnelSetupType& outTunnelSetup) = 0;

    virtual int32_t UseBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer) = 0;

    virtual int32_t AllocateBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer) = 0;

    virtual int32_t FreeBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) = 0;

    virtual int32_t EmptyThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) = 0;

    virtual int32_t FillThisBuffer(const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& buffer) = 0;

    virtual int32_t SetCallbacks(const sptr<OHOS::HDI::Codec::V1_0::ICodecCallback>& callbacks, int64_t appData) = 0;

    virtual int32_t ComponentDeInit() = 0;

    virtual int32_t UseEglImage(uint32_t portIndex, const OHOS::HDI::Codec::V1_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V1_0::OmxCodecBuffer& outBuffer, const std::vector<int8_t>& eglImage) = 0;

    virtual int32_t ComponentRoleEnum(std::vector<uint8_t>& role, uint32_t index) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_0
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_V1_0_ICODECCOMPONENT_H

