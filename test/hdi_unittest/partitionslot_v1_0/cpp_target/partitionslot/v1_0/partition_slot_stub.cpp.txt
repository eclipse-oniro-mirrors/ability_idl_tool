/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/partition_slot_stub.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    partition_slot_stub

namespace OHOS {
namespace HDI {
namespace Partitionslot {
namespace V1_0 {


sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::Get(bool isStub)
{
    return OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::Get("partition_slot_service", isStub);
}

sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "partition_slot_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot *>(impl);
}


OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStub(const sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> &impl)
    : IPCObjectStub(OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::~PartitionSlotStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_PARTITION_SLOT_GET_VERSION:
            return PartitionSlotStubGetVersion(data, reply, option);
        case CMD_PARTITION_SLOT_GET_CURRENT_SLOT:
            return PartitionSlotStubGetCurrentSlot(data, reply, option);
        case CMD_PARTITION_SLOT_GET_SLOT_SUFFIX:
            return PartitionSlotStubGetSlotSuffix(data, reply, option);
        case CMD_PARTITION_SLOT_SET_ACTIVE_SLOT:
            return PartitionSlotStubSetActiveSlot(data, reply, option);
        case CMD_PARTITION_SLOT_SET_SLOT_UNBOOTABLE:
            return PartitionSlotStubSetSlotUnbootable(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetCurrentSlot(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption)
{
    return OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetCurrentSlot_(partitionSlotData, partitionSlotReply, partitionSlotOption, impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetSlotSuffix(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption)
{
    return OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetSlotSuffix_(partitionSlotData, partitionSlotReply, partitionSlotOption, impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetActiveSlot(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption)
{
    return OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetActiveSlot_(partitionSlotData, partitionSlotReply, partitionSlotOption, impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetSlotUnbootable(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption)
{
    return OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetSlotUnbootable_(partitionSlotData, partitionSlotReply, partitionSlotOption, impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetVersion(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption)
{
    return OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetVersion_(partitionSlotData, partitionSlotReply, partitionSlotOption, impl_);
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetCurrentSlot_(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption, sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> impl)
{
    if (partitionSlotData.ReadInterfaceToken() != OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t currentSlot = 0;

    int32_t numOfSlots = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t partitionSlotRet = impl->GetCurrentSlot(currentSlot, numOfSlots);
    if (partitionSlotRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, partitionSlotRet);
        return partitionSlotRet;
    }

    if (!partitionSlotReply.WriteInt32(currentSlot)) {
        HDF_LOGE("%{public}s: write currentSlot failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!partitionSlotReply.WriteInt32(numOfSlots)) {
        HDF_LOGE("%{public}s: write numOfSlots failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return partitionSlotRet;
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetSlotSuffix_(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption, sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> impl)
{
    if (partitionSlotData.ReadInterfaceToken() != OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool partitionSlotMemSet = false;
    if (!partitionSlotData.ReadBool(partitionSlotMemSet)) {
        HDF_LOGE("%{public}s: failed to read partitionSlotMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    int32_t slot = 0;
    if (!partitionSlotData.ReadInt32(slot)) {
        HDF_LOGE("%{public}s: read slot failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::string suffix;
    if (partitionSlotMemSet) {
        uint32_t capacity = 0;
        if (!partitionSlotData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(char), HDF_ERR_INVALID_PARAM);
        suffix.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t partitionSlotRet = impl->GetSlotSuffix(slot, suffix);
    if (partitionSlotRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, partitionSlotRet);
        return partitionSlotRet;
    }

    if (!partitionSlotReply.WriteCString(suffix.c_str())) {
        HDF_LOGE("%{public}s: write suffix failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return partitionSlotRet;
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetActiveSlot_(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption, sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> impl)
{
    if (partitionSlotData.ReadInterfaceToken() != OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t slot = 0;
    if (!partitionSlotData.ReadInt32(slot)) {
        HDF_LOGE("%{public}s: read slot failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t partitionSlotRet = impl->SetActiveSlot(slot);
    if (partitionSlotRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, partitionSlotRet);
        return partitionSlotRet;
    }

    return partitionSlotRet;
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubSetSlotUnbootable_(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption, sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> impl)
{
    if (partitionSlotData.ReadInterfaceToken() != OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t slot = 0;
    if (!partitionSlotData.ReadInt32(slot)) {
        HDF_LOGE("%{public}s: read slot failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t partitionSlotRet = impl->SetSlotUnbootable(slot);
    if (partitionSlotRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, partitionSlotRet);
        return partitionSlotRet;
    }

    return partitionSlotRet;
}

int32_t OHOS::HDI::Partitionslot::V1_0::PartitionSlotStub::PartitionSlotStubGetVersion_(MessageParcel& partitionSlotData, MessageParcel& partitionSlotReply, MessageOption& partitionSlotOption, sptr<OHOS::HDI::Partitionslot::V1_0::IPartitionSlot> impl)
{
    if (partitionSlotData.ReadInterfaceToken() != OHOS::HDI::Partitionslot::V1_0::IPartitionSlot::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t partitionSlotRet = impl->GetVersion(majorVer, minorVer);
    if (partitionSlotRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, partitionSlotRet);
        return partitionSlotRet;
    }

    if (!partitionSlotReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!partitionSlotReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return partitionSlotRet;
}
} // V1_0
} // Partitionslot
} // HDI
} // OHOS
