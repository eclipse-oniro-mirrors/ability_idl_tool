/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/prepared_model_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>

#define HDF_LOG_TAG    prepared_model_stub

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V1_0 {
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}


OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStub(const sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel> &impl)
    : IPCObjectStub(OHOS::HDI::Nnrt::V1_0::IPreparedModel::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Nnrt::V1_0::PreparedModelStub::~PreparedModelStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_PREPARED_MODEL_GET_VERSION:
            return PreparedModelStubGetVersion(data, reply, option);
        case CMD_PREPARED_MODEL_EXPORT_MODEL_CACHE:
            return PreparedModelStubExportModelCache(data, reply, option);
        case CMD_PREPARED_MODEL_RUN:
            return PreparedModelStubRun(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubExportModelCache(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption)
{
    return OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubExportModelCache_(preparedModelData, preparedModelReply, preparedModelOption, impl_);
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubRun(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption)
{
    return OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubRun_(preparedModelData, preparedModelReply, preparedModelOption, impl_);
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubGetVersion(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption)
{
    return OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubGetVersion_(preparedModelData, preparedModelReply, preparedModelOption, impl_);
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubExportModelCache_(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel> impl)
{
    if (preparedModelData.ReadInterfaceToken() != OHOS::HDI::Nnrt::V1_0::IPreparedModel::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool preparedModelMemSet = false;
    if (!preparedModelData.ReadBool(preparedModelMemSet)) {
        HDF_LOGE("%{public}s: failed to read preparedModelMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<OHOS::HDI::Nnrt::V1_0::SharedBuffer> modelCache;
    if (preparedModelMemSet) {
        uint32_t capacity = 0;
        if (!preparedModelData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Nnrt::V1_0::SharedBuffer), HDF_ERR_INVALID_PARAM);
        modelCache.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t preparedModelRet = impl->ExportModelCache(modelCache);
    if (preparedModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, preparedModelRet);
        return preparedModelRet;
    }

    if (!preparedModelReply.WriteUint32(modelCache.size())) {
        HDF_LOGE("%{public}s: write modelCache size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : modelCache) {
        if (!OHOS::HDI::Nnrt::V1_0::SharedBufferBlockMarshalling(preparedModelReply, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return preparedModelRet;
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubRun_(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel> impl)
{
    if (preparedModelData.ReadInterfaceToken() != OHOS::HDI::Nnrt::V1_0::IPreparedModel::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool preparedModelMemSet = false;
    if (!preparedModelData.ReadBool(preparedModelMemSet)) {
        HDF_LOGE("%{public}s: failed to read preparedModelMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor> inputs;
    uint32_t inputsSize = 0;
    if (!preparedModelData.ReadUint32(inputsSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(inputsSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Nnrt::V1_0::IOTensor), HDF_ERR_INVALID_PARAM);
    inputs.clear();
    inputs.reserve(inputsSize);
    for (uint32_t i0 = 0; i0 < inputsSize; ++i0) {
        OHOS::HDI::Nnrt::V1_0::IOTensor value0;
        if (!IOTensorBlockUnmarshalling(preparedModelData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        inputs.push_back(value0);
    }

    std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor> outputs;
    uint32_t outputsSize = 0;
    if (!preparedModelData.ReadUint32(outputsSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(outputsSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Nnrt::V1_0::IOTensor), HDF_ERR_INVALID_PARAM);
    outputs.clear();
    outputs.reserve(outputsSize);
    for (uint32_t i0 = 0; i0 < outputsSize; ++i0) {
        OHOS::HDI::Nnrt::V1_0::IOTensor value0;
        if (!IOTensorBlockUnmarshalling(preparedModelData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        outputs.push_back(value0);
    }

    std::vector<std::vector<int32_t>> outputsDims;
    if (preparedModelMemSet) {
        uint32_t capacity = 0;
        if (!preparedModelData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(std::vector<int32_t>), HDF_ERR_INVALID_PARAM);
        outputsDims.reserve(capacity);
    }

    std::vector<bool> isOutputBufferEnough;
    if (preparedModelMemSet) {
        uint32_t capacity = 0;
        if (!preparedModelData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(bool), HDF_ERR_INVALID_PARAM);
        isOutputBufferEnough.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t preparedModelRet = impl->Run(inputs, outputs, outputsDims, isOutputBufferEnough);
    if (preparedModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, preparedModelRet);
        return preparedModelRet;
    }

    if (!preparedModelReply.WriteUint32(outputsDims.size())) {
        HDF_LOGE("%{public}s: write outputsDims size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : outputsDims) {
        if (!WritePodArray(preparedModelReply, it0)) {
            HDF_LOGE("%{public}s: failed to write it0", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    if (!preparedModelReply.WriteUint32(isOutputBufferEnough.size())) {
        HDF_LOGE("%{public}s: write isOutputBufferEnough size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : isOutputBufferEnough) {
        if (!preparedModelReply.WriteBool(it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return preparedModelRet;
}

int32_t OHOS::HDI::Nnrt::V1_0::PreparedModelStub::PreparedModelStubGetVersion_(MessageParcel& preparedModelData, MessageParcel& preparedModelReply, MessageOption& preparedModelOption, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel> impl)
{
    if (preparedModelData.ReadInterfaceToken() != OHOS::HDI::Nnrt::V1_0::IPreparedModel::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t preparedModelRet = impl->GetVersion(majorVer, minorVer);
    if (preparedModelRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, preparedModelRet);
        return preparedModelRet;
    }

    if (!preparedModelReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!preparedModelReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return preparedModelRet;
}
} // V1_0
} // Nnrt
} // HDI
} // OHOS
