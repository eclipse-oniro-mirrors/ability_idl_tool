/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V1_0_PREPAREDMODELPROXY_H
#define OHOS_HDI_NNRT_V1_0_PREPAREDMODELPROXY_H

#include "v1_0/iprepared_model.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V1_0 {

class PreparedModelProxy : public IProxyBroker<OHOS::HDI::Nnrt::V1_0::IPreparedModel> {
public:
    explicit PreparedModelProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::Nnrt::V1_0::IPreparedModel>(remote) {
    }
    virtual ~PreparedModelProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t ExportModelCache(std::vector<OHOS::HDI::Nnrt::V1_0::SharedBuffer>& modelCache) override;

    int32_t Run(const std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor>& inputs,
         const std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor>& outputs, std::vector<std::vector<int32_t>>& outputsDims, std::vector<bool>& isOutputBufferEnough) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t ExportModelCache_(std::vector<OHOS::HDI::Nnrt::V1_0::SharedBuffer>& modelCache,
         const sptr<IRemoteObject> remote);

    static int32_t Run_(const std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor>& inputs,
         const std::vector<OHOS::HDI::Nnrt::V1_0::IOTensor>& outputs, std::vector<std::vector<int32_t>>& outputsDims, std::vector<bool>& isOutputBufferEnough, const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::Nnrt::V1_0::PreparedModelProxy> delegator_;
};

} // V1_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V1_0_PREPAREDMODELPROXY_H

