/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V1_0_MODELTYPES_H
#define OHOS_HDI_NNRT_V1_0_MODELTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>
#include <vector>
#include "nnrt/v1_0/nnrt_types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V1_0 {

using namespace OHOS;

struct Tensor {
    std::string name;
    OHOS::HDI::Nnrt::V1_0::DataType dataType;
    std::vector<int32_t> dims;
    OHOS::HDI::Nnrt::V1_0::Format format;
    OHOS::HDI::Nnrt::V1_0::SharedBuffer data;
    std::vector<OHOS::HDI::Nnrt::V1_0::QuantParam> quantParams;
};

struct Node {
    std::string name;
    OHOS::HDI::Nnrt::V1_0::NodeType nodeType;
    std::vector<int8_t> nodeAttr;
    std::vector<uint32_t> inputIndex;
    std::vector<uint32_t> outputIndex;
    OHOS::HDI::Nnrt::V1_0::QuantType quantType;
};

struct SubGraph {
    std::string name;
    std::vector<uint32_t> inputIndices;
    std::vector<uint32_t> outputIndices;
    std::vector<uint32_t> nodeIndices;
};

struct Model {
    std::string name;
    std::vector<uint32_t> inputIndex;
    std::vector<uint32_t> outputIndex;
    std::vector<OHOS::HDI::Nnrt::V1_0::Node> nodes;
    std::vector<OHOS::HDI::Nnrt::V1_0::Tensor> allTensors;
    std::vector<OHOS::HDI::Nnrt::V1_0::SubGraph> subGraph;
};

bool TensorBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Nnrt::V1_0::Tensor& dataBlock);

bool TensorBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Nnrt::V1_0::Tensor& dataBlock);

bool NodeBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Nnrt::V1_0::Node& dataBlock);

bool NodeBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Nnrt::V1_0::Node& dataBlock);

bool SubGraphBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Nnrt::V1_0::SubGraph& dataBlock);

bool SubGraphBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Nnrt::V1_0::SubGraph& dataBlock);

bool ModelBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Nnrt::V1_0::Model& dataBlock);

bool ModelBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Nnrt::V1_0::Model& dataBlock);

} // V1_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V1_0_MODELTYPES_H

