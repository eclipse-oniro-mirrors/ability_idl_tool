/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_NNRT_V1_0_NNRTDEVICEPROXY_H
#define OHOS_HDI_NNRT_V1_0_NNRTDEVICEPROXY_H

#include "v1_0/innrt_device.h"
#include <unistd.h>
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace Nnrt {
namespace V1_0 {

class NnrtDeviceProxy : public IProxyBroker<OHOS::HDI::Nnrt::V1_0::INnrtDevice> {
public:
    class IServiceManagerDeathRecipient : public IRemoteObject::DeathRecipient {
    public:
        IServiceManagerDeathRecipient(wptr<OHOS::HDI::Nnrt::V1_0::NnrtDeviceProxy> proxy) : proxy_(proxy) {} 
        ~IServiceManagerDeathRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject> &remote) override
        {
            int32_t result = HDF_FAILURE;
            const int sleepInterval = 500000;
            const int waitTimes = 10;
            int currentTime = waitTimes;
            do {
                usleep(sleepInterval);
                auto proxy = proxy_.promote();
                if (proxy != nullptr) {
                    result = OHOS::HDI::Nnrt::V1_0::NnrtDeviceProxy::Reconnect(proxy);
                }
                --currentTime;
            } while (result != HDF_SUCCESS && currentTime >0);
        }
    private:
        wptr<OHOS::HDI::Nnrt::V1_0::NnrtDeviceProxy> proxy_;
    };

    explicit NnrtDeviceProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::Nnrt::V1_0::INnrtDevice>(remote) {
        reconnectRemote_ = nullptr;
        isReconnected_ = false;
    }
    virtual ~NnrtDeviceProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t GetDeviceName(std::string& name) override;

    int32_t GetVendorName(std::string& name) override;

    int32_t GetDeviceType(OHOS::HDI::Nnrt::V1_0::DeviceType& deviceType) override;

    int32_t GetDeviceStatus(OHOS::HDI::Nnrt::V1_0::DeviceStatus& status) override;

    int32_t GetSupportedOperation(const OHOS::HDI::Nnrt::V1_0::Model& model, std::vector<bool>& ops) override;

    int32_t IsFloat16PrecisionSupported(bool& isSupported) override;

    int32_t IsPerformanceModeSupported(bool& isSupported) override;

    int32_t IsPrioritySupported(bool& isSupported) override;

    int32_t IsDynamicInputSupported(bool& isSupported) override;

    int32_t PrepareModel(const OHOS::HDI::Nnrt::V1_0::Model& model, const OHOS::HDI::Nnrt::V1_0::ModelConfig& config,
         sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel>& preparedModel) override;

    int32_t IsModelCacheSupported(bool& isSupported) override;

    int32_t PrepareModelFromModelCache(const std::vector<OHOS::HDI::Nnrt::V1_0::SharedBuffer>& modelCache,
         const OHOS::HDI::Nnrt::V1_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel>& preparedModel) override;

    int32_t AllocateBuffer(uint32_t length, OHOS::HDI::Nnrt::V1_0::SharedBuffer& buffer) override;

    int32_t ReleaseBuffer(const OHOS::HDI::Nnrt::V1_0::SharedBuffer& buffer) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t GetDeviceName_(std::string& name, const sptr<IRemoteObject> remote);

    static int32_t GetVendorName_(std::string& name, const sptr<IRemoteObject> remote);

    static int32_t GetDeviceType_(OHOS::HDI::Nnrt::V1_0::DeviceType& deviceType, const sptr<IRemoteObject> remote);

    static int32_t GetDeviceStatus_(OHOS::HDI::Nnrt::V1_0::DeviceStatus& status, const sptr<IRemoteObject> remote);

    static int32_t GetSupportedOperation_(const OHOS::HDI::Nnrt::V1_0::Model& model, std::vector<bool>& ops,
         const sptr<IRemoteObject> remote);

    static int32_t IsFloat16PrecisionSupported_(bool& isSupported, const sptr<IRemoteObject> remote);

    static int32_t IsPerformanceModeSupported_(bool& isSupported, const sptr<IRemoteObject> remote);

    static int32_t IsPrioritySupported_(bool& isSupported, const sptr<IRemoteObject> remote);

    static int32_t IsDynamicInputSupported_(bool& isSupported, const sptr<IRemoteObject> remote);

    static int32_t PrepareModel_(const OHOS::HDI::Nnrt::V1_0::Model& model,
         const OHOS::HDI::Nnrt::V1_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel>& preparedModel, const sptr<IRemoteObject> remote);

    static int32_t IsModelCacheSupported_(bool& isSupported, const sptr<IRemoteObject> remote);

    static int32_t PrepareModelFromModelCache_(const std::vector<OHOS::HDI::Nnrt::V1_0::SharedBuffer>& modelCache,
         const OHOS::HDI::Nnrt::V1_0::ModelConfig& config, sptr<OHOS::HDI::Nnrt::V1_0::IPreparedModel>& preparedModel, const sptr<IRemoteObject> remote);

    static int32_t AllocateBuffer_(uint32_t length, OHOS::HDI::Nnrt::V1_0::SharedBuffer& buffer,
         const sptr<IRemoteObject> remote);

    static int32_t ReleaseBuffer_(const OHOS::HDI::Nnrt::V1_0::SharedBuffer& buffer, const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

    static int32_t Reconnect(sptr<OHOS::HDI::Nnrt::V1_0::NnrtDeviceProxy> proxy);

    sptr<IRemoteObject> GetCurrentRemote() {
        return isReconnected_ ? reconnectRemote_ : Remote();
    }

    bool isReconnected_;
    std::string serviceName_;
    sptr<IRemoteObject> servMgr_;
    sptr<IRemoteObject> reconnectRemote_;
private:
    static inline BrokerDelegator<OHOS::HDI::Nnrt::V1_0::NnrtDeviceProxy> delegator_;
};

} // V1_0
} // Nnrt
} // HDI
} // OHOS

#endif // OHOS_HDI_NNRT_V1_0_NNRTDEVICEPROXY_H

