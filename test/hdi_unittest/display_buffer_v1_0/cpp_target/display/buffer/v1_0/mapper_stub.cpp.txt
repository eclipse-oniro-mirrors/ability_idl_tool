/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/mapper_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    mapper_stub

namespace OHOS {
namespace HDI {
namespace Display {
namespace Buffer {
namespace V1_0 {


sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> OHOS::HDI::Display::Buffer::V1_0::IMapper::Get(bool isStub)
{
    return OHOS::HDI::Display::Buffer::V1_0::IMapper::Get("mapper_service", isStub);
}

sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> OHOS::HDI::Display::Buffer::V1_0::IMapper::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "mapper_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Display::Buffer::V1_0::IMapper *>(impl);
}


OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStub(const sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> &impl)
    : IPCObjectStub(OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Display::Buffer::V1_0::MapperStub::~MapperStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_MAPPER_GET_VERSION:
            return MapperStubGetVersion(data, reply, option);
        case CMD_MAPPER_FREE_MEM:
            return MapperStubFreeMem(data, reply, option);
        case CMD_MAPPER_MMAP:
            return MapperStubMmap(data, reply, option);
        case CMD_MAPPER_UNMAP:
            return MapperStubUnmap(data, reply, option);
        case CMD_MAPPER_FLUSH_CACHE:
            return MapperStubFlushCache(data, reply, option);
        case CMD_MAPPER_INVALIDATE_CACHE:
            return MapperStubInvalidateCache(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFreeMem(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFreeMem_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubMmap(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubMmap_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubUnmap(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubUnmap_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFlushCache(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFlushCache_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubInvalidateCache(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubInvalidateCache_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubGetVersion(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption)
{
    return OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubGetVersion_(mapperData, mapperReply, mapperOption, impl_);
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFreeMem_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> handle = mapperData.ReadStrongParcelable<NativeBuffer>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->FreeMem(handle);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    return mapperRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubMmap_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> handle = mapperData.ReadStrongParcelable<NativeBuffer>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->Mmap(handle);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    return mapperRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubUnmap_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> handle = mapperData.ReadStrongParcelable<NativeBuffer>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->Unmap(handle);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    return mapperRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubFlushCache_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> handle = mapperData.ReadStrongParcelable<NativeBuffer>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->FlushCache(handle);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    return mapperRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubInvalidateCache_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<NativeBuffer> handle = mapperData.ReadStrongParcelable<NativeBuffer>();

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->InvalidateCache(handle);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    return mapperRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::MapperStub::MapperStubGetVersion_(MessageParcel& mapperData, MessageParcel& mapperReply, MessageOption& mapperOption, sptr<OHOS::HDI::Display::Buffer::V1_0::IMapper> impl)
{
    if (mapperData.ReadInterfaceToken() != OHOS::HDI::Display::Buffer::V1_0::IMapper::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mapperRet = impl->GetVersion(majorVer, minorVer);
    if (mapperRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mapperRet);
        return mapperRet;
    }

    if (!mapperReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mapperReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mapperRet;
}
} // V1_0
} // Buffer
} // Display
} // HDI
} // OHOS
