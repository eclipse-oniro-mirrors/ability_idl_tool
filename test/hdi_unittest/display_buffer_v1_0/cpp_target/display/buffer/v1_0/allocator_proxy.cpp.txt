/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/allocator_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    allocator_proxy

namespace OHOS {
namespace HDI {
namespace Display {
namespace Buffer {
namespace V1_0 {


sptr<OHOS::HDI::Display::Buffer::V1_0::IAllocator> OHOS::HDI::Display::Buffer::V1_0::IAllocator::Get(bool isStub)
{
    return IAllocator::Get("allocator_service", isStub);
}

sptr<OHOS::HDI::Display::Buffer::V1_0::IAllocator> OHOS::HDI::Display::Buffer::V1_0::IAllocator::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Display::Buffer::V1_0::IAllocator::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "allocator_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Display::Buffer::V1_0::IAllocator *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy> proxy = new OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t allocatorRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (allocatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::Reconnect(
    sptr<OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::AllocMem(const OHOS::HDI::Display::Buffer::V1_0::AllocInfo& info, sptr<NativeBuffer>& handle)
{
    return OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::AllocMem_(info, handle, GetCurrentRemote());
}

int32_t OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::AllocMem_(const OHOS::HDI::Display::Buffer::V1_0::AllocInfo& info, sptr<NativeBuffer>& handle, const sptr<IRemoteObject> remote)
{
    MessageParcel allocatorData;
    MessageParcel allocatorReply;
    MessageOption allocatorOption(MessageOption::TF_SYNC);

    if (!allocatorData.WriteInterfaceToken(OHOS::HDI::Display::Buffer::V1_0::IAllocator::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Display::Buffer::V1_0::AllocInfoBlockMarshalling(allocatorData, info)) {
        HDF_LOGE("%{public}s: write info failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t allocatorRet = remote->SendRequest(CMD_ALLOCATOR_ALLOC_MEM, allocatorData, allocatorReply, allocatorOption);
    if (allocatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, allocatorRet);
        return allocatorRet;
    }

    handle = allocatorReply.ReadStrongParcelable<NativeBuffer>();

    return allocatorRet;
}

int32_t OHOS::HDI::Display::Buffer::V1_0::AllocatorProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel allocatorData;
    MessageParcel allocatorReply;
    MessageOption allocatorOption(MessageOption::TF_SYNC);

    if (!allocatorData.WriteInterfaceToken(OHOS::HDI::Display::Buffer::V1_0::IAllocator::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t allocatorRet = remote->SendRequest(CMD_ALLOCATOR_GET_VERSION, allocatorData, allocatorReply, allocatorOption);
    if (allocatorRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, allocatorRet);
        return allocatorRet;
    }

    if (!allocatorReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!allocatorReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return allocatorRet;
}

} // V1_0
} // Buffer
} // Display
} // HDI
} // OHOS
