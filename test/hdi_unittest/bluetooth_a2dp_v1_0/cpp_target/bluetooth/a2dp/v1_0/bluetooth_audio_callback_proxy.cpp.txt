/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/bluetooth_audio_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    bluetooth_audio_callback_proxy

namespace OHOS {
namespace HDI {
namespace Bluetooth {
namespace A2dp {
namespace V1_0 {


int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StartRender()
{
    return OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StartRender_(Remote());
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::SuspendRender()
{
    return OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::SuspendRender_(Remote());
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StopRender()
{
    return OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StopRender_(Remote());
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StartRender_(const sptr<IRemoteObject> remote)
{
    MessageParcel bluetoothAudioCallbackData;
    MessageParcel bluetoothAudioCallbackReply;
    MessageOption bluetoothAudioCallbackOption(MessageOption::TF_SYNC);

    if (!bluetoothAudioCallbackData.WriteInterfaceToken(OHOS::HDI::Bluetooth::A2dp::V1_0::IBluetoothAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t bluetoothAudioCallbackRet = remote->SendRequest(CMD_BLUETOOTH_AUDIO_CALLBACK_START_RENDER, bluetoothAudioCallbackData, bluetoothAudioCallbackReply, bluetoothAudioCallbackOption);
    if (bluetoothAudioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, bluetoothAudioCallbackRet);
        return bluetoothAudioCallbackRet;
    }

    return bluetoothAudioCallbackRet;
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::SuspendRender_(const sptr<IRemoteObject> remote)
{
    MessageParcel bluetoothAudioCallbackData;
    MessageParcel bluetoothAudioCallbackReply;
    MessageOption bluetoothAudioCallbackOption(MessageOption::TF_SYNC);

    if (!bluetoothAudioCallbackData.WriteInterfaceToken(OHOS::HDI::Bluetooth::A2dp::V1_0::IBluetoothAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t bluetoothAudioCallbackRet = remote->SendRequest(CMD_BLUETOOTH_AUDIO_CALLBACK_SUSPEND_RENDER, bluetoothAudioCallbackData, bluetoothAudioCallbackReply, bluetoothAudioCallbackOption);
    if (bluetoothAudioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, bluetoothAudioCallbackRet);
        return bluetoothAudioCallbackRet;
    }

    return bluetoothAudioCallbackRet;
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::StopRender_(const sptr<IRemoteObject> remote)
{
    MessageParcel bluetoothAudioCallbackData;
    MessageParcel bluetoothAudioCallbackReply;
    MessageOption bluetoothAudioCallbackOption(MessageOption::TF_SYNC);

    if (!bluetoothAudioCallbackData.WriteInterfaceToken(OHOS::HDI::Bluetooth::A2dp::V1_0::IBluetoothAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t bluetoothAudioCallbackRet = remote->SendRequest(CMD_BLUETOOTH_AUDIO_CALLBACK_STOP_RENDER, bluetoothAudioCallbackData, bluetoothAudioCallbackReply, bluetoothAudioCallbackOption);
    if (bluetoothAudioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, bluetoothAudioCallbackRet);
        return bluetoothAudioCallbackRet;
    }

    return bluetoothAudioCallbackRet;
}

int32_t OHOS::HDI::Bluetooth::A2dp::V1_0::BluetoothAudioCallbackProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel bluetoothAudioCallbackData;
    MessageParcel bluetoothAudioCallbackReply;
    MessageOption bluetoothAudioCallbackOption(MessageOption::TF_SYNC);

    if (!bluetoothAudioCallbackData.WriteInterfaceToken(OHOS::HDI::Bluetooth::A2dp::V1_0::IBluetoothAudioCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t bluetoothAudioCallbackRet = remote->SendRequest(CMD_BLUETOOTH_AUDIO_CALLBACK_GET_VERSION, bluetoothAudioCallbackData, bluetoothAudioCallbackReply, bluetoothAudioCallbackOption);
    if (bluetoothAudioCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, bluetoothAudioCallbackRet);
        return bluetoothAudioCallbackRet;
    }

    if (!bluetoothAudioCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!bluetoothAudioCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return bluetoothAudioCallbackRet;
}

} // V1_0
} // A2dp
} // Bluetooth
} // HDI
} // OHOS
