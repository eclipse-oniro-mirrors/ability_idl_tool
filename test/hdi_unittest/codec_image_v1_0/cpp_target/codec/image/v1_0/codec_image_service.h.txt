/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESERVICE_H
#define OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESERVICE_H

#include "v1_0/icodec_image.h"

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {
class CodecImageService : public OHOS::HDI::Codec::Image::V1_0::ICodecImage {
public:
    CodecImageService() = default;
    virtual ~CodecImageService() = default;

    int32_t GetImageCapability(std::vector<OHOS::HDI::Codec::Image::V1_0::CodecImageCapability>& capList) override;

    int32_t Init(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role) override;

    int32_t DeInit(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role) override;

    int32_t DoJpegDecode(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer,
         const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& outBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& decInfo) override;

    int32_t AllocateInBuffer(OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, uint32_t size,
         OHOS::HDI::Codec::Image::V1_0::CodecImageRole role) override;

    int32_t FreeInBuffer(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer) override;

};
} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESERVICE_H

