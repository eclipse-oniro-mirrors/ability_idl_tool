/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGETYPE_H
#define OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGETYPE_H

#include <cstdbool>
#include <cstdint>
#include <string>
#include <vector>
#include <base/native_buffer.h>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {

using namespace OHOS;
using namespace OHOS::HDI::Base;

struct CodecImageRegion {
    uint32_t left;
    uint32_t right;
    uint32_t top;
    uint32_t bottom;
    uint32_t flag;
    uint32_t rsv;
} __attribute__ ((aligned(8)));

enum CodecImageRole : int32_t {
    CODEC_IMAGE_JPEG = 0,
    CODEC_IMAGE_HEIF,
    CODEC_IMAGE_INVALID,
};

struct CodecImageBuffer {
    uint32_t id;
    uint32_t size;
    sptr<NativeBuffer> buffer;
    int fenceFd;
    OHOS::HDI::Codec::Image::V1_0::CodecImageRole bufferRole;
};

enum CodecImageType : int32_t {
    CODEC_IMAGE_TYPE_DECODER = 0,
    CODEC_IMAGE_TYPE_ENCODER,
    CODEC_IMAGE_TYPE_INVALID,
};

struct CodecImageCapability {
    std::string name;
    OHOS::HDI::Codec::Image::V1_0::CodecImageRole role;
    OHOS::HDI::Codec::Image::V1_0::CodecImageType type;
    uint32_t widthAlignment;
    uint32_t heightAlignment;
    uint32_t maxSample;
    uint32_t maxWidth;
    uint32_t maxHeight;
    uint32_t minWidth;
    uint32_t minHeight;
    uint32_t maxInst;
    std::vector<uint32_t> supportPixFmts;
    bool isSoftwareCodec;
};

struct CodecJpegQuantTable {
    std::vector<uint16_t> quantVal;
    bool tableFlag;
};

struct CodecJpegHuffTable {
    std::vector<uint8_t> bits;
    std::vector<uint8_t> huffVal;
    bool tableFlag;
};

struct CodecJpegCompInfo {
    uint32_t componentId;
    uint32_t componentIndex;
    uint32_t hSampFactor;
    uint32_t vSampFactor;
    uint32_t quantTableNo;
    uint32_t dcTableNo;
    uint32_t acTableNo;
    bool infoFlag;
} __attribute__ ((aligned(8)));

struct CodecJpegDecInfo {
    uint32_t imageWidth;
    uint32_t imageHeight;
    uint32_t dataPrecision;
    uint32_t numComponents;
    uint32_t restartInterval;
    bool arithCode;
    bool progressiveMode;
    std::vector<OHOS::HDI::Codec::Image::V1_0::CodecJpegCompInfo> compInfo;
    std::vector<OHOS::HDI::Codec::Image::V1_0::CodecJpegHuffTable> dcHuffTbl;
    std::vector<OHOS::HDI::Codec::Image::V1_0::CodecJpegHuffTable> acHuffTbl;
    std::vector<OHOS::HDI::Codec::Image::V1_0::CodecJpegQuantTable> quantTbl;
    OHOS::HDI::Codec::Image::V1_0::CodecImageRegion region;
    uint32_t sampleSize;
    uint32_t compressPos;
};

bool CodecImageRegionBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecImageRegion& dataBlock);

bool CodecImageRegionBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecImageRegion& dataBlock);

bool CodecImageBufferBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& dataBlock);

bool CodecImageBufferBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& dataBlock);

bool CodecImageCapabilityBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecImageCapability& dataBlock);

bool CodecImageCapabilityBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecImageCapability& dataBlock);

bool CodecJpegQuantTableBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecJpegQuantTable& dataBlock);

bool CodecJpegQuantTableBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecJpegQuantTable& dataBlock);

bool CodecJpegHuffTableBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecJpegHuffTable& dataBlock);

bool CodecJpegHuffTableBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecJpegHuffTable& dataBlock);

bool CodecJpegCompInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecJpegCompInfo& dataBlock);

bool CodecJpegCompInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecJpegCompInfo& dataBlock);

bool CodecJpegDecInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& dataBlock);

bool CodecJpegDecInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& dataBlock);

} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGETYPE_H

