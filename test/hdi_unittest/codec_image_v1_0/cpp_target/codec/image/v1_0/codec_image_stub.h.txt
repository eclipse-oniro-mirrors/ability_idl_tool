/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESTUB_H
#define OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v1_0/icodec_image.h"

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {

using namespace OHOS;
class CodecImageStub : public IPCObjectStub {
public:
    explicit CodecImageStub(const sptr<ICodecImage> &impl);
    virtual ~CodecImageStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t CodecImageStubGetImageCapability_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubInit_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubDeInit_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubDoJpegDecode_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubAllocateInBuffer_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubFreeInBuffer_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

    static int32_t CodecImageStubGetVersion_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl);

private:
    int32_t CodecImageStubGetImageCapability(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubInit(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubDeInit(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubDoJpegDecode(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubAllocateInBuffer(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubFreeInBuffer(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);

    int32_t CodecImageStubGetVersion(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption);


    static inline ObjectDelegator<OHOS::HDI::Codec::Image::V1_0::CodecImageStub, OHOS::HDI::Codec::Image::V1_0::ICodecImage> objDelegator_;
    sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl_;
};
} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_IMAGE_V1_0_CODECIMAGESTUB_H

