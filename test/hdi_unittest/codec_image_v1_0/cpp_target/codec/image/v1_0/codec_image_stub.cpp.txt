/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/codec_image_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    codec_image_stub

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {


sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> OHOS::HDI::Codec::Image::V1_0::ICodecImage::Get(bool isStub)
{
    return OHOS::HDI::Codec::Image::V1_0::ICodecImage::Get("codec_image_service", isStub);
}

sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> OHOS::HDI::Codec::Image::V1_0::ICodecImage::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "codec_image_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Codec::Image::V1_0::ICodecImage *>(impl);
}


OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStub(const sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> &impl)
    : IPCObjectStub(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Codec::Image::V1_0::CodecImageStub::~CodecImageStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_CODEC_IMAGE_GET_VERSION:
            return CodecImageStubGetVersion(data, reply, option);
        case CMD_CODEC_IMAGE_GET_IMAGE_CAPABILITY:
            return CodecImageStubGetImageCapability(data, reply, option);
        case CMD_CODEC_IMAGE_INIT:
            return CodecImageStubInit(data, reply, option);
        case CMD_CODEC_IMAGE_DE_INIT:
            return CodecImageStubDeInit(data, reply, option);
        case CMD_CODEC_IMAGE_DO_JPEG_DECODE:
            return CodecImageStubDoJpegDecode(data, reply, option);
        case CMD_CODEC_IMAGE_ALLOCATE_IN_BUFFER:
            return CodecImageStubAllocateInBuffer(data, reply, option);
        case CMD_CODEC_IMAGE_FREE_IN_BUFFER:
            return CodecImageStubFreeInBuffer(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetImageCapability(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetImageCapability_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubInit(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubInit_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDeInit(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDeInit_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDoJpegDecode(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDoJpegDecode_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubAllocateInBuffer(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubAllocateInBuffer_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubFreeInBuffer(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubFreeInBuffer_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetVersion(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetVersion_(codecImageData, codecImageReply, codecImageOption, impl_);
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetImageCapability_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    bool codecImageMemSet = false;
    if (!codecImageData.ReadBool(codecImageMemSet)) {
        HDF_LOGE("%{public}s: failed to read codecImageMemSet", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::vector<OHOS::HDI::Codec::Image::V1_0::CodecImageCapability> capList;
    if (codecImageMemSet) {
        uint32_t capacity = 0;
        if (!codecImageData.ReadUint32(capacity)) {
            HDF_LOGE("%{public}s: failed to read capacity", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        HDI_CHECK_VALUE_RETURN(capacity, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Codec::Image::V1_0::CodecImageCapability), HDF_ERR_INVALID_PARAM);
        capList.reserve(capacity);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->GetImageCapability(capList);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    if (!codecImageReply.WriteUint32(capList.size())) {
        HDF_LOGE("%{public}s: write capList size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : capList) {
        if (!OHOS::HDI::Codec::Image::V1_0::CodecImageCapabilityBlockMarshalling(codecImageReply, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubInit_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageRole role = static_cast<enum CodecImageRole>(0);
    {
        uint64_t enumTmp = 0;
        if (!codecImageData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write role failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        role = static_cast<enum CodecImageRole>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->Init(role);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDeInit_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageRole role = static_cast<enum CodecImageRole>(0);
    {
        uint64_t enumTmp = 0;
        if (!codecImageData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write role failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        role = static_cast<enum CodecImageRole>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->DeInit(role);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubDoJpegDecode_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer inBuffer;
    if (!CodecImageBufferBlockUnmarshalling(codecImageData, inBuffer)) {
        HDF_LOGE("%{public}s: read inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer outBuffer;
    if (!CodecImageBufferBlockUnmarshalling(codecImageData, outBuffer)) {
        HDF_LOGE("%{public}s: read outBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo decInfo;
    if (!CodecJpegDecInfoBlockUnmarshalling(codecImageData, decInfo)) {
        HDF_LOGE("%{public}s: read decInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->DoJpegDecode(inBuffer, outBuffer, decInfo);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubAllocateInBuffer_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer inBuffer;

    uint32_t size = 0;
    if (!codecImageData.ReadUint32(size)) {
        HDF_LOGE("%{public}s: read size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageRole role = static_cast<enum CodecImageRole>(0);
    {
        uint64_t enumTmp = 0;
        if (!codecImageData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write role failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        role = static_cast<enum CodecImageRole>(enumTmp);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->AllocateInBuffer(inBuffer, size, role);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    if (!OHOS::HDI::Codec::Image::V1_0::CodecImageBufferBlockMarshalling(codecImageReply, inBuffer)) {
        HDF_LOGE("%{public}s: write inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubFreeInBuffer_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer inBuffer;
    if (!CodecImageBufferBlockUnmarshalling(codecImageData, inBuffer)) {
        HDF_LOGE("%{public}s: read inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->FreeInBuffer(inBuffer);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageStub::CodecImageStubGetVersion_(MessageParcel& codecImageData, MessageParcel& codecImageReply, MessageOption& codecImageOption, sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> impl)
{
    if (codecImageData.ReadInterfaceToken() != OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t codecImageRet = impl->GetVersion(majorVer, minorVer);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    if (!codecImageReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return codecImageRet;
}
} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS
