/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/codec_image_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    codec_image_service

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {
extern "C" ICodecImage *CodecImageImplGetInstance(void)
{
    return new (std::nothrow) CodecImageService();
}

int32_t CodecImageService::GetImageCapability(std::vector<OHOS::HDI::Codec::Image::V1_0::CodecImageCapability>& capList)
{
    return HDF_SUCCESS;
}

int32_t CodecImageService::Init(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return HDF_SUCCESS;
}

int32_t CodecImageService::DeInit(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return HDF_SUCCESS;
}

int32_t CodecImageService::DoJpegDecode(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer,
     const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& outBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& decInfo)
{
    return HDF_SUCCESS;
}

int32_t CodecImageService::AllocateInBuffer(OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, uint32_t size,
     OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return HDF_SUCCESS;
}

int32_t CodecImageService::FreeInBuffer(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS
