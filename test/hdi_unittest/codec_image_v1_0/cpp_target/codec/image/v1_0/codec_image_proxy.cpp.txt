/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/codec_image_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    codec_image_proxy

namespace OHOS {
namespace HDI {
namespace Codec {
namespace Image {
namespace V1_0 {


sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> OHOS::HDI::Codec::Image::V1_0::ICodecImage::Get(bool isStub)
{
    return ICodecImage::Get("codec_image_service", isStub);
}

sptr<OHOS::HDI::Codec::Image::V1_0::ICodecImage> OHOS::HDI::Codec::Image::V1_0::ICodecImage::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "codec_image_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Codec::Image::V1_0::ICodecImage *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Codec::Image::V1_0::CodecImageProxy> proxy = new OHOS::HDI::Codec::Image::V1_0::CodecImageProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t codecImageRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::Reconnect(
    sptr<OHOS::HDI::Codec::Image::V1_0::CodecImageProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetImageCapability(std::vector<OHOS::HDI::Codec::Image::V1_0::CodecImageCapability>& capList)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetImageCapability_(capList, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::Init(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::Init_(role, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DeInit(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DeInit_(role, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DoJpegDecode(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& outBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& decInfo)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DoJpegDecode_(inBuffer, outBuffer, decInfo, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::AllocateInBuffer(OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, uint32_t size, OHOS::HDI::Codec::Image::V1_0::CodecImageRole role)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::AllocateInBuffer_(inBuffer, size, role, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::FreeInBuffer(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::FreeInBuffer_(inBuffer, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetImageCapability_(std::vector<OHOS::HDI::Codec::Image::V1_0::CodecImageCapability>& capList, const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_GET_IMAGE_CAPABILITY, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    uint32_t capListSize = 0;
    if (!codecImageReply.ReadUint32(capListSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(capListSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Codec::Image::V1_0::CodecImageCapability), HDF_ERR_INVALID_PARAM);
    capList.clear();
    capList.reserve(capListSize);
    for (uint32_t i0 = 0; i0 < capListSize; ++i0) {
        OHOS::HDI::Codec::Image::V1_0::CodecImageCapability value0;
        if (!CodecImageCapabilityBlockUnmarshalling(codecImageReply, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        capList.push_back(value0);
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::Init_(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role,
     const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageData.WriteUint64(static_cast<uint64_t>(role))) {
        HDF_LOGE("%{public}s: write role failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_INIT, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DeInit_(OHOS::HDI::Codec::Image::V1_0::CodecImageRole role,
     const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageData.WriteUint64(static_cast<uint64_t>(role))) {
        HDF_LOGE("%{public}s: write role failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_DE_INIT, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::DoJpegDecode_(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& outBuffer, const OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfo& decInfo, const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Codec::Image::V1_0::CodecImageBufferBlockMarshalling(codecImageData, inBuffer)) {
        HDF_LOGE("%{public}s: write inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Codec::Image::V1_0::CodecImageBufferBlockMarshalling(codecImageData, outBuffer)) {
        HDF_LOGE("%{public}s: write outBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Codec::Image::V1_0::CodecJpegDecInfoBlockMarshalling(codecImageData, decInfo)) {
        HDF_LOGE("%{public}s: write decInfo failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_DO_JPEG_DECODE, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::AllocateInBuffer_(OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, uint32_t size, OHOS::HDI::Codec::Image::V1_0::CodecImageRole role, const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageData.WriteUint32(size)) {
        HDF_LOGE("%{public}s: write size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageData.WriteUint64(static_cast<uint64_t>(role))) {
        HDF_LOGE("%{public}s: write role failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_ALLOCATE_IN_BUFFER, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    if (!CodecImageBufferBlockUnmarshalling(codecImageReply, inBuffer)) {
        HDF_LOGE("%{public}s: read inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::FreeInBuffer_(const OHOS::HDI::Codec::Image::V1_0::CodecImageBuffer& inBuffer, const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Codec::Image::V1_0::CodecImageBufferBlockMarshalling(codecImageData, inBuffer)) {
        HDF_LOGE("%{public}s: write inBuffer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_FREE_IN_BUFFER, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    return codecImageRet;
}

int32_t OHOS::HDI::Codec::Image::V1_0::CodecImageProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel codecImageData;
    MessageParcel codecImageReply;
    MessageOption codecImageOption(MessageOption::TF_SYNC);

    if (!codecImageData.WriteInterfaceToken(OHOS::HDI::Codec::Image::V1_0::ICodecImage::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t codecImageRet = remote->SendRequest(CMD_CODEC_IMAGE_GET_VERSION, codecImageData, codecImageReply, codecImageOption);
    if (codecImageRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, codecImageRet);
        return codecImageRet;
    }

    if (!codecImageReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!codecImageReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return codecImageRet;
}

} // V1_0
} // Image
} // Codec
} // HDI
} // OHOS
