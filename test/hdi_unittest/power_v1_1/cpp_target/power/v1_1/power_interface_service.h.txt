/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_POWER_V1_1_POWERINTERFACESERVICE_H
#define OHOS_HDI_POWER_V1_1_POWERINTERFACESERVICE_H

#include "v1_1/ipower_interface.h"

namespace OHOS {
namespace HDI {
namespace Power {
namespace V1_1 {
class PowerInterfaceService : public OHOS::HDI::Power::V1_1::IPowerInterface {
public:
    PowerInterfaceService() = default;
    virtual ~PowerInterfaceService() = default;

    int32_t RegisterCallback(const sptr<OHOS::HDI::Power::V1_1::IPowerHdiCallback>& ipowerHdiCallback) override;

    int32_t StartSuspend() override;

    int32_t StopSuspend() override;

    int32_t ForceSuspend() override;

    int32_t SuspendBlock(const std::string& name) override;

    int32_t SuspendUnblock(const std::string& name) override;

    int32_t PowerDump(std::string& info) override;

    int32_t HoldRunningLock(const OHOS::HDI::Power::V1_1::RunningLockInfo& info) override;

    int32_t UnholdRunningLock(const OHOS::HDI::Power::V1_1::RunningLockInfo& info) override;

    int32_t GetWakeupReason(std::string& reason) override;

    int32_t HoldRunningLockExt(const OHOS::HDI::Power::V1_1::RunningLockInfo& info, uint64_t lockid,
         const std::string& bundleName) override;

    int32_t UnholdRunningLockExt(const OHOS::HDI::Power::V1_1::RunningLockInfo& info, uint64_t lockid,
         const std::string& bundleName) override;

    int32_t RegisterRunningLockCallback(const sptr<OHOS::HDI::Power::V1_1::IPowerRunningLockCallback>& iPowerRunningLockCallback) override;

    int32_t UnRegisterRunningLockCallback() override;

};
} // V1_1
} // Power
} // HDI
} // OHOS

#endif // OHOS_HDI_POWER_V1_1_POWERINTERFACESERVICE_H

