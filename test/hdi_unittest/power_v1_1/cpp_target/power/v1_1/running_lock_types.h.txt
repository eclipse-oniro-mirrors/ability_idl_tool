/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_POWER_V1_1_RUNNINGLOCKTYPES_H
#define OHOS_HDI_POWER_V1_1_RUNNINGLOCKTYPES_H

#include <cstdbool>
#include <cstdint>
#include <string>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace Power {
namespace V1_1 {

using namespace OHOS;

enum BaseRunningLockType : int32_t {
    RUNNINGLOCK_SCREEN = 0,
    RUNNINGLOCK_BACKGROUND = 1,
    RUNNINGLOCK_PROXIMITY_SCREEN_CONTROL = 2,
};

enum RunningLockType : int32_t {
    RUNNINGLOCK_BACKGROUND_PHONE = 3,
    RUNNINGLOCK_BACKGROUND_NOTIFICATION = 5,
    RUNNINGLOCK_BACKGROUND_AUDIO = 9,
    RUNNINGLOCK_BACKGROUND_SPORT = 17,
    RUNNINGLOCK_BACKGROUND_NAVIGATION = 33,
    RUNNINGLOCK_BACKGROUND_TASK = 65,
    RUNNINGLOCK_BUTT,
};

struct RunningLockInfo {
    std::string name;
    OHOS::HDI::Power::V1_1::RunningLockType type;
    int32_t timeoutMs;
    int32_t pid;
    int32_t uid;
};

bool RunningLockInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::Power::V1_1::RunningLockInfo& dataBlock);

bool RunningLockInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::Power::V1_1::RunningLockInfo& dataBlock);

} // V1_1
} // Power
} // HDI
} // OHOS

#endif // OHOS_HDI_POWER_V1_1_RUNNINGLOCKTYPES_H

