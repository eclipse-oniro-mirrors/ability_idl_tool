/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_V2_0_ICODECCOMPONENTMANAGER_H
#define OHOS_HDI_CODEC_V2_0_ICODECCOMPONENTMANAGER_H

#include <stdint.h>
#include <string>
#include <vector>
#include <hdf_base.h>
#include <hdi_base.h>
#include "codec/v2_0/codec_types.h"
#include "codec/v2_0/icodec_callback.h"
#include "codec/v2_0/icodec_component.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V2_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_CODEC_COMPONENT_MANAGER_GET_VERSION = 0,
    CMD_CODEC_COMPONENT_MANAGER_GET_COMPONENT_NUM = 1,
    CMD_CODEC_COMPONENT_MANAGER_GET_COMPONENT_CAPABILITY_LIST = 2,
    CMD_CODEC_COMPONENT_MANAGER_CREATE_COMPONENT = 3,
    CMD_CODEC_COMPONENT_MANAGER_DESTROY_COMPONENT = 4,
};

class ICodecComponentManager : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.codec.v2_0.ICodecComponentManager");

    virtual ~ICodecComponentManager() = default;

    static sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> Get(bool isStub = false);
    static sptr<OHOS::HDI::Codec::V2_0::ICodecComponentManager> Get(const std::string &serviceName, bool isStub = false);

    virtual int32_t GetComponentNum(int32_t& count) = 0;

    virtual int32_t GetComponentCapabilityList(std::vector<OHOS::HDI::Codec::V2_0::CodecCompCapability>& capList,
         int32_t count) = 0;

    virtual int32_t CreateComponent(sptr<OHOS::HDI::Codec::V2_0::ICodecComponent>& component, uint32_t& componentId,
         const std::string& compName, int64_t appData, const sptr<OHOS::HDI::Codec::V2_0::ICodecCallback>& callbacks) = 0;

    virtual int32_t DestroyComponent(uint32_t componentId) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 2;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V2_0
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_V2_0_ICODECCOMPONENTMANAGER_H

