/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v2_0/codec_ext_types.h"
#include <hdf_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V2_0 {



bool SupportBufferTypeBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::SupportBufferType& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::SupportBufferType))) {
        return false;
    }
    return true;
}

bool SupportBufferTypeBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::SupportBufferType& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::SupportBufferType *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::SupportBufferType*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::SupportBufferType)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::SupportBufferType), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::SupportBufferType)) != EOK) {
        return false;
    }
    return true;
}

bool UseBufferTypeBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::UseBufferType& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::UseBufferType))) {
        return false;
    }
    return true;
}

bool UseBufferTypeBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::UseBufferType& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::UseBufferType *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::UseBufferType*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::UseBufferType)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::UseBufferType), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::UseBufferType)) != EOK) {
        return false;
    }
    return true;
}

bool GetBufferHandleUsageParamsBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams))) {
        return false;
    }
    return true;
}

bool GetBufferHandleUsageParamsBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::GetBufferHandleUsageParams)) != EOK) {
        return false;
    }
    return true;
}

bool CodecVideoPortFormatParamBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam))) {
        return false;
    }
    return true;
}

bool CodecVideoPortFormatParamBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoPortFormatParam)) != EOK) {
        return false;
    }
    return true;
}

bool ControlRateConstantQualityBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::ControlRateConstantQuality& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::ControlRateConstantQuality))) {
        return false;
    }
    return true;
}

bool ControlRateConstantQualityBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::ControlRateConstantQuality& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::ControlRateConstantQuality *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::ControlRateConstantQuality*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::ControlRateConstantQuality)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::ControlRateConstantQuality), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::ControlRateConstantQuality)) != EOK) {
        return false;
    }
    return true;
}

bool WorkingFrequencyParamBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::WorkingFrequencyParam& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::WorkingFrequencyParam))) {
        return false;
    }
    return true;
}

bool WorkingFrequencyParamBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::WorkingFrequencyParam& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::WorkingFrequencyParam *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::WorkingFrequencyParam*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::WorkingFrequencyParam)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::WorkingFrequencyParam), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::WorkingFrequencyParam)) != EOK) {
        return false;
    }
    return true;
}

bool ProcessNameParamBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::ProcessNameParam& dataBlock)
{
    if (!data.WriteUint32(dataBlock.size)) {
        HDF_LOGE("%{public}s: write dataBlock.size failed!", __func__);
        return false;
    }

    if (!data.WriteUnpadBuffer((const void*)&dataBlock.version, sizeof(OHOS::HDI::Codec::V2_0::CodecVersionType))) {
        HDF_LOGE("%{public}s: write dataBlock.version failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.processName.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.processName failed!", __func__);
        return false;
    }
    return true;
}

bool ProcessNameParamBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::ProcessNameParam& dataBlock)
{
    if (!data.ReadUint32(dataBlock.size)) {
        HDF_LOGE("%{public}s: read dataBlock.size failed!", __func__);
        return false;
    }

    const OHOS::HDI::Codec::V2_0::CodecVersionType *versionCp = reinterpret_cast<const OHOS::HDI::Codec::V2_0::CodecVersionType*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::CodecVersionType)));
    if (versionCp == nullptr) {
        HDF_LOGE("%{public}s: read versionCp failed!", __func__);
        return false;
    }
    if (memcpy_s(&dataBlock.version, sizeof(OHOS::HDI::Codec::V2_0::CodecVersionType), versionCp, sizeof(OHOS::HDI::Codec::V2_0::CodecVersionType)) != EOK) {
        HDF_LOGE("%{public}s: failed to memcpy dataBlock.version", __func__);
        return false;
    }

    const char* processNameCp = data.ReadCString();
    if (processNameCp == nullptr) {
        HDF_LOGE("%{public}s: read processNameCp failed", __func__);
        return false;
    }
    dataBlock.processName = processNameCp;
    return true;
}

bool CodecVideoParamHevcBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::CodecVideoParamHevc& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoParamHevc))) {
        return false;
    }
    return true;
}

bool CodecVideoParamHevcBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::CodecVideoParamHevc& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::CodecVideoParamHevc *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::CodecVideoParamHevc*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::CodecVideoParamHevc)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoParamHevc), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoParamHevc)) != EOK) {
        return false;
    }
    return true;
}

bool ColorAspectsBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::ColorAspects& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::ColorAspects))) {
        return false;
    }
    return true;
}

bool ColorAspectsBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::ColorAspects& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::ColorAspects *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::ColorAspects*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::ColorAspects)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::ColorAspects), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::ColorAspects)) != EOK) {
        return false;
    }
    return true;
}

bool CodecVideoColorspaceBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Codec::V2_0::CodecVideoColorspace& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoColorspace))) {
        return false;
    }
    return true;
}

bool CodecVideoColorspaceBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Codec::V2_0::CodecVideoColorspace& dataBlock)
{
    const OHOS::HDI::Codec::V2_0::CodecVideoColorspace *dataBlockPtr = reinterpret_cast<const OHOS::HDI::Codec::V2_0::CodecVideoColorspace*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::Codec::V2_0::CodecVideoColorspace)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoColorspace), dataBlockPtr, sizeof(OHOS::HDI::Codec::V2_0::CodecVideoColorspace)) != EOK) {
        return false;
    }
    return true;
}

} // V2_0
} // Codec
} // HDI
} // OHOS
