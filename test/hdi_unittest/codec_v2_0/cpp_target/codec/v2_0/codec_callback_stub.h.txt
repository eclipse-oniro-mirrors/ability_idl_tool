/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_V2_0_CODECCALLBACKSTUB_H
#define OHOS_HDI_CODEC_V2_0_CODECCALLBACKSTUB_H

#include <ipc_object_stub.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <refbase.h>
#include "v2_0/icodec_callback.h"

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V2_0 {

using namespace OHOS;
class CodecCallbackStub : public IPCObjectStub {
public:
    explicit CodecCallbackStub(const sptr<ICodecCallback> &impl);
    virtual ~CodecCallbackStub();

    int32_t OnRemoteRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override;

    static int32_t CodecCallbackStubEventHandler_(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption, sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> impl);

    static int32_t CodecCallbackStubEmptyBufferDone_(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption, sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> impl);

    static int32_t CodecCallbackStubFillBufferDone_(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption, sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> impl);

    static int32_t CodecCallbackStubGetVersion_(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption, sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> impl);

private:
    int32_t CodecCallbackStubEventHandler(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption);

    int32_t CodecCallbackStubEmptyBufferDone(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption);

    int32_t CodecCallbackStubFillBufferDone(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption);

    int32_t CodecCallbackStubGetVersion(MessageParcel& codecCallbackData, MessageParcel& codecCallbackReply, MessageOption& codecCallbackOption);


    static inline ObjectDelegator<OHOS::HDI::Codec::V2_0::CodecCallbackStub, OHOS::HDI::Codec::V2_0::ICodecCallback> objDelegator_;
    sptr<OHOS::HDI::Codec::V2_0::ICodecCallback> impl_;
};
} // V2_0
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_V2_0_CODECCALLBACKSTUB_H

