/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_CODEC_V2_0_CODECCOMPONENTPROXY_H
#define OHOS_HDI_CODEC_V2_0_CODECCOMPONENTPROXY_H

#include "v2_0/icodec_component.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace Codec {
namespace V2_0 {

class CodecComponentProxy : public IProxyBroker<OHOS::HDI::Codec::V2_0::ICodecComponent> {
public:
    explicit CodecComponentProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::Codec::V2_0::ICodecComponent>(remote) {
    }
    virtual ~CodecComponentProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t GetComponentVersion(OHOS::HDI::Codec::V2_0::CompVerInfo& verInfo) override;

    int32_t SendCommand(OHOS::HDI::Codec::V2_0::CodecCommandType cmd, uint32_t param,
         const std::vector<int8_t>& cmdData) override;

    int32_t GetParameter(uint32_t index, const std::vector<int8_t>& inParamStruct,
         std::vector<int8_t>& outParamStruct) override;

    int32_t SetParameter(uint32_t index, const std::vector<int8_t>& paramStruct) override;

    int32_t GetConfig(uint32_t index, const std::vector<int8_t>& inCfgStruct,
         std::vector<int8_t>& outCfgStruct) override;

    int32_t SetConfig(uint32_t index, const std::vector<int8_t>& cfgStruct) override;

    int32_t GetExtensionIndex(const std::string& paramName, uint32_t& indexType) override;

    int32_t GetState(OHOS::HDI::Codec::V2_0::CodecStateType& state) override;

    int32_t ComponentTunnelRequest(uint32_t port, int32_t tunneledComp, uint32_t tunneledPort,
         const OHOS::HDI::Codec::V2_0::CodecTunnelSetupType& inTunnelSetup, OHOS::HDI::Codec::V2_0::CodecTunnelSetupType& outTunnelSetup) override;

    int32_t UseBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer) override;

    int32_t AllocateBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer) override;

    int32_t FreeBuffer(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer) override;

    int32_t EmptyThisBuffer(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer) override;

    int32_t FillThisBuffer(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer) override;

    int32_t SetCallbacks(const sptr<OHOS::HDI::Codec::V2_0::ICodecCallback>& callbacks, int64_t appData) override;

    int32_t ComponentDeInit() override;

    int32_t UseEglImage(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer, const std::vector<int8_t>& eglImage) override;

    int32_t ComponentRoleEnum(std::vector<uint8_t>& role, uint32_t index) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t GetComponentVersion_(OHOS::HDI::Codec::V2_0::CompVerInfo& verInfo, const sptr<IRemoteObject> remote);

    static int32_t SendCommand_(OHOS::HDI::Codec::V2_0::CodecCommandType cmd, uint32_t param,
         const std::vector<int8_t>& cmdData, const sptr<IRemoteObject> remote);

    static int32_t GetParameter_(uint32_t index, const std::vector<int8_t>& inParamStruct,
         std::vector<int8_t>& outParamStruct, const sptr<IRemoteObject> remote);

    static int32_t SetParameter_(uint32_t index, const std::vector<int8_t>& paramStruct,
         const sptr<IRemoteObject> remote);

    static int32_t GetConfig_(uint32_t index, const std::vector<int8_t>& inCfgStruct, std::vector<int8_t>& outCfgStruct,
         const sptr<IRemoteObject> remote);

    static int32_t SetConfig_(uint32_t index, const std::vector<int8_t>& cfgStruct, const sptr<IRemoteObject> remote);

    static int32_t GetExtensionIndex_(const std::string& paramName, uint32_t& indexType,
         const sptr<IRemoteObject> remote);

    static int32_t GetState_(OHOS::HDI::Codec::V2_0::CodecStateType& state, const sptr<IRemoteObject> remote);

    static int32_t ComponentTunnelRequest_(uint32_t port, int32_t tunneledComp, uint32_t tunneledPort,
         const OHOS::HDI::Codec::V2_0::CodecTunnelSetupType& inTunnelSetup, OHOS::HDI::Codec::V2_0::CodecTunnelSetupType& outTunnelSetup, const sptr<IRemoteObject> remote);

    static int32_t UseBuffer_(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer, const sptr<IRemoteObject> remote);

    static int32_t AllocateBuffer_(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer, const sptr<IRemoteObject> remote);

    static int32_t FreeBuffer_(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer,
         const sptr<IRemoteObject> remote);

    static int32_t EmptyThisBuffer_(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer,
         const sptr<IRemoteObject> remote);

    static int32_t FillThisBuffer_(const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& buffer,
         const sptr<IRemoteObject> remote);

    static int32_t SetCallbacks_(const sptr<OHOS::HDI::Codec::V2_0::ICodecCallback>& callbacks, int64_t appData,
         const sptr<IRemoteObject> remote);

    static int32_t ComponentDeInit_(const sptr<IRemoteObject> remote);

    static int32_t UseEglImage_(uint32_t portIndex, const OHOS::HDI::Codec::V2_0::OmxCodecBuffer& inBuffer,
         OHOS::HDI::Codec::V2_0::OmxCodecBuffer& outBuffer, const std::vector<int8_t>& eglImage, const sptr<IRemoteObject> remote);

    static int32_t ComponentRoleEnum_(std::vector<uint8_t>& role, uint32_t index, const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::Codec::V2_0::CodecComponentProxy> delegator_;
};

} // V2_0
} // Codec
} // HDI
} // OHOS

#endif // OHOS_HDI_CODEC_V2_0_CODECCOMPONENTPROXY_H

