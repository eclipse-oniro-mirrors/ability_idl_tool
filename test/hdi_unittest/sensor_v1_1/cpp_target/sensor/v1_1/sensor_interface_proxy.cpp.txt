/*
 * Copyright (c) 2021-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_1/sensor_interface_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    sensor_interface_proxy

namespace OHOS {
namespace HDI {
namespace Sensor {
namespace V1_1 {


sptr<OHOS::HDI::Sensor::V1_1::ISensorInterface> OHOS::HDI::Sensor::V1_1::ISensorInterface::Get(bool isStub)
{
    return ISensorInterface::Get("sensor_interface_service", isStub);
}

sptr<OHOS::HDI::Sensor::V1_1::ISensorInterface> OHOS::HDI::Sensor::V1_1::ISensorInterface::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "sensor_interface_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Sensor::V1_1::ISensorInterface *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy> proxy = new OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t sensorInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.1", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Reconnect(
    sptr<OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetAllSensorInfo(std::vector<OHOS::HDI::Sensor::V1_1::HdfSensorInformation>& info)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetAllSensorInfo_(info, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Enable(int32_t sensorId)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Enable_(sensorId, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Disable(int32_t sensorId)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Disable_(sensorId, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetBatch(int32_t sensorId, int64_t samplingInterval,
     int64_t reportInterval)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetBatch_(sensorId, samplingInterval, reportInterval, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetMode(int32_t sensorId, int32_t mode)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetMode_(sensorId, mode, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetOption(int32_t sensorId, uint32_t option)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetOption_(sensorId, option, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Register(int32_t groupId,
     const sptr<OHOS::HDI::Sensor::V1_1::ISensorCallback>& callbackObj)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Register_(groupId, callbackObj, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Unregister(int32_t groupId,
     const sptr<OHOS::HDI::Sensor::V1_1::ISensorCallback>& callbackObj)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Unregister_(groupId, callbackObj, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::ReadData(int32_t sensorId,
     std::vector<OHOS::HDI::Sensor::V1_1::HdfSensorEvents>& event)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::ReadData_(sensorId, event, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetAllSensorInfo_(std::vector<OHOS::HDI::Sensor::V1_1::HdfSensorInformation>& info, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_GET_ALL_SENSOR_INFO, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    uint32_t infoSize = 0;
    if (!sensorInterfaceReply.ReadUint32(infoSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(infoSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Sensor::V1_1::HdfSensorInformation), HDF_ERR_INVALID_PARAM);
    info.clear();
    info.reserve(infoSize);
    for (uint32_t i0 = 0; i0 < infoSize; ++i0) {
        OHOS::HDI::Sensor::V1_1::HdfSensorInformation value0;
        if (!HdfSensorInformationBlockUnmarshalling(sensorInterfaceReply, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        info.push_back(value0);
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Enable_(int32_t sensorId, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_ENABLE, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Disable_(int32_t sensorId, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_DISABLE, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetBatch_(int32_t sensorId, int64_t samplingInterval,
     int64_t reportInterval, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt64(samplingInterval)) {
        HDF_LOGE("%{public}s: write samplingInterval failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt64(reportInterval)) {
        HDF_LOGE("%{public}s: write reportInterval failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_SET_BATCH, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetMode_(int32_t sensorId, int32_t mode,
     const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(mode)) {
        HDF_LOGE("%{public}s: write mode failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_SET_MODE, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::SetOption_(int32_t sensorId, uint32_t option,
     const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteUint32(option)) {
        HDF_LOGE("%{public}s: write option failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_SET_OPTION, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Register_(int32_t groupId,
     const sptr<OHOS::HDI::Sensor::V1_1::ISensorCallback>& callbackObj, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(groupId)) {
        HDF_LOGE("%{public}s: write groupId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: parameter callbackObj is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(callbackObj, OHOS::HDI::Sensor::V1_1::ISensorCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write callbackObj failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_REGISTER, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::Unregister_(int32_t groupId,
     const sptr<OHOS::HDI::Sensor::V1_1::ISensorCallback>& callbackObj, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(groupId)) {
        HDF_LOGE("%{public}s: write groupId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: parameter callbackObj is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(callbackObj, OHOS::HDI::Sensor::V1_1::ISensorCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write callbackObj failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_UNREGISTER, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::ReadData_(int32_t sensorId,
     std::vector<OHOS::HDI::Sensor::V1_1::HdfSensorEvents>& event, const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceData.WriteInt32(sensorId)) {
        HDF_LOGE("%{public}s: write sensorId failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_READ_DATA, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    uint32_t eventSize = 0;
    if (!sensorInterfaceReply.ReadUint32(eventSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(eventSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Sensor::V1_1::HdfSensorEvents), HDF_ERR_INVALID_PARAM);
    event.clear();
    event.reserve(eventSize);
    for (uint32_t i0 = 0; i0 < eventSize; ++i0) {
        OHOS::HDI::Sensor::V1_1::HdfSensorEvents value0;
        if (!HdfSensorEventsBlockUnmarshalling(sensorInterfaceReply, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        event.push_back(value0);
    }

    return sensorInterfaceRet;
}

int32_t OHOS::HDI::Sensor::V1_1::SensorInterfaceProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel sensorInterfaceData;
    MessageParcel sensorInterfaceReply;
    MessageOption sensorInterfaceOption(MessageOption::TF_SYNC);

    if (!sensorInterfaceData.WriteInterfaceToken(OHOS::HDI::Sensor::V1_1::ISensorInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t sensorInterfaceRet = remote->SendRequest(CMD_SENSOR_INTERFACE_GET_VERSION, sensorInterfaceData, sensorInterfaceReply, sensorInterfaceOption);
    if (sensorInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, sensorInterfaceRet);
        return sensorInterfaceRet;
    }

    if (!sensorInterfaceReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!sensorInterfaceReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return sensorInterfaceRet;
}

} // V1_1
} // Sensor
} // HDI
} // OHOS
