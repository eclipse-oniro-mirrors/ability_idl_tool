/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_core_log.h>
#include <osal_mem.h>
#include <securec.h>
#include "v1_0/iwlan_interface.h"

#define HDF_LOG_TAG    wlan_interface_service

struct WlanInterfaceService {
    struct IWlanInterface interface;
};

static int32_t WlanInterfaceStart(struct IWlanInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceStop(struct IWlanInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceCreateFeature(struct IWlanInterface *self, int32_t type, struct HdfFeatureInfo* ifeature)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceDestroyFeature(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetAssociatedStas(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     struct HdfStaInfo* staInfo, uint32_t* staInfoLen, uint32_t* num)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetChipId(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     uint8_t* chipId)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetDeviceMacAddress(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     uint8_t* mac, uint32_t* macLen, uint8_t len)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetFeatureByIfName(struct IWlanInterface *self, const char* ifName,
     struct HdfFeatureInfo* ifeature)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetFeatureType(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     int32_t* featureType)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetFreqsWithBand(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     const struct HdfWifiInfo* wifiInfo, int32_t* freq, uint32_t* freqLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetIfNamesByChipId(struct IWlanInterface *self, uint8_t chipId, char* ifName,
     uint32_t ifNameLen, uint32_t* num)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetNetworkIfaceName(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     char* ifName, uint32_t ifNameLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetSupportCombo(struct IWlanInterface *self, uint64_t* combo)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetSupportFeature(struct IWlanInterface *self, uint8_t* supType, uint32_t* supTypeLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceRegisterEventCallback(struct IWlanInterface *self, struct IWlanCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceUnregisterEventCallback(struct IWlanInterface *self, struct IWlanCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceResetDriver(struct IWlanInterface *self, uint8_t chipId, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetCountryCode(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     const char* code, uint32_t len)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetMacAddress(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     const uint8_t* mac, uint32_t macLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetScanningMacAddress(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     const uint8_t* scanMac, uint32_t scanMacLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetTxPower(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     int32_t power)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetNetDevInfo(struct IWlanInterface *self,
     struct HdfNetDeviceInfoResult* netDeviceInfoResult)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceStartScan(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     const struct HdfWifiScan* scan)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetPowerMode(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     uint8_t* mode)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetPowerMode(struct IWlanInterface *self, const struct HdfFeatureInfo* ifeature,
     uint8_t mode)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceStartChannelMeas(struct IWlanInterface *self, const char* ifName,
     const struct MeasChannelParam* measChannelParam)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetChannelMeasResult(struct IWlanInterface *self, const char* ifName,
     struct MeasChannelResult* measChannelResult)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceSetProjectionScreenParam(struct IWlanInterface *self, const char* ifName,
     const struct ProjectionScreenCmdParam* param)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceWifiSendCmdIoctl(struct IWlanInterface *self, const char* ifName, int32_t cmdId,
     const int8_t* paramBuf, uint32_t paramBufLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetStaInfo(struct IWlanInterface *self, const char* ifName, struct WifiStationInfo* info,
     const uint8_t* mac, uint32_t macLen)
{
    return HDF_SUCCESS;
}

static int32_t WlanInterfaceGetVersion(struct IWlanInterface *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IWLAN_INTERFACE_MAJOR_VERSION;
    *minorVer = IWLAN_INTERFACE_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IWlanInterface *WlanInterfaceImplGetInstance(void)
{
    struct WlanInterfaceService *service = (struct WlanInterfaceService *)OsalMemCalloc(sizeof(struct WlanInterfaceService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc WlanInterfaceService obj failed!", __func__);
        return NULL;
    }

    service->interface.Start = WlanInterfaceStart;
    service->interface.Stop = WlanInterfaceStop;
    service->interface.CreateFeature = WlanInterfaceCreateFeature;
    service->interface.DestroyFeature = WlanInterfaceDestroyFeature;
    service->interface.GetAssociatedStas = WlanInterfaceGetAssociatedStas;
    service->interface.GetChipId = WlanInterfaceGetChipId;
    service->interface.GetDeviceMacAddress = WlanInterfaceGetDeviceMacAddress;
    service->interface.GetFeatureByIfName = WlanInterfaceGetFeatureByIfName;
    service->interface.GetFeatureType = WlanInterfaceGetFeatureType;
    service->interface.GetFreqsWithBand = WlanInterfaceGetFreqsWithBand;
    service->interface.GetIfNamesByChipId = WlanInterfaceGetIfNamesByChipId;
    service->interface.GetNetworkIfaceName = WlanInterfaceGetNetworkIfaceName;
    service->interface.GetSupportCombo = WlanInterfaceGetSupportCombo;
    service->interface.GetSupportFeature = WlanInterfaceGetSupportFeature;
    service->interface.RegisterEventCallback = WlanInterfaceRegisterEventCallback;
    service->interface.UnregisterEventCallback = WlanInterfaceUnregisterEventCallback;
    service->interface.ResetDriver = WlanInterfaceResetDriver;
    service->interface.SetCountryCode = WlanInterfaceSetCountryCode;
    service->interface.SetMacAddress = WlanInterfaceSetMacAddress;
    service->interface.SetScanningMacAddress = WlanInterfaceSetScanningMacAddress;
    service->interface.SetTxPower = WlanInterfaceSetTxPower;
    service->interface.GetNetDevInfo = WlanInterfaceGetNetDevInfo;
    service->interface.StartScan = WlanInterfaceStartScan;
    service->interface.GetPowerMode = WlanInterfaceGetPowerMode;
    service->interface.SetPowerMode = WlanInterfaceSetPowerMode;
    service->interface.StartChannelMeas = WlanInterfaceStartChannelMeas;
    service->interface.GetChannelMeasResult = WlanInterfaceGetChannelMeasResult;
    service->interface.SetProjectionScreenParam = WlanInterfaceSetProjectionScreenParam;
    service->interface.WifiSendCmdIoctl = WlanInterfaceWifiSendCmdIoctl;
    service->interface.GetStaInfo = WlanInterfaceGetStaInfo;
    service->interface.GetVersion = WlanInterfaceGetVersion;
    return &service->interface;
}

void WlanInterfaceImplRelease(struct IWlanInterface *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
