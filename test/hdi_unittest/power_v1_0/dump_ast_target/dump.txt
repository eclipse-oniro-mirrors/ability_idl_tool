AST[name: IPowerInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/power_v1_0/foo/power/v1_0/IPowerInterface.idl]
package ohos.hdi.power.v1_0;

import ohos.hdi.power.v1_0.PowerTypes;
import ohos.hdi.power.v1_0.IPowerHdiCallback;

[mini, lite, full] interface IPowerInterface {
    [mini, lite, full] RegisterCallback(
      [in] ohos.hdi.power.v1_0.IPowerHdiCallback ipowerHdiCallback);

    [mini, lite, full] StartSuspend();

    [mini, lite, full] StopSuspend();

    [mini, lite, full] ForceSuspend();

    [mini, lite, full] SuspendBlock(
      [in] std::string name);

    [mini, lite, full] SuspendUnblock(
      [in] std::string name);

    [mini, lite, full] PowerDump(
      [out] std::string info);
}


AST[name: PowerTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/power_v1_0/foo/power/v1_0/PowerTypes.idl]
package ohos.hdi.power.v1_0;

[mini, lite, full] enum PowerHdfCmd : int {
  CMD_REGISTER_CALLBCK = 0,
  CMD_START_SUSPEND,
  CMD_STOP_SUSPEND,
  CMD_FORCE_SUSPEND,
  CMD_SUSPEND_BLOCK,
  CMD_SUSPEND_UNBLOCK,
  CMD_DUMP,
};

[mini, lite, full] enum PowerHdfCallbackCmd : int {
  CMD_ON_SUSPEND = 0,
  CMD_ON_WAKEUP,
};

[mini, lite, full] enum PowerHdfState : int {
  AWAKE = 0,
  INACTIVE,
  SLEEP,
};


AST[name: IPowerHdiCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/power_v1_0/foo/power/v1_0/IPowerHdiCallback.idl]
package ohos.hdi.power.v1_0;

[mini, lite, full, callback] interface IPowerHdiCallback {
    [mini, lite, full, callback] OnSuspend();

    [mini, lite, full, callback] OnWakeup();
}


