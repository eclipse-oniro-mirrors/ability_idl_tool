/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/media_key_system_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    media_key_system_service

namespace OHOS {
namespace HDI {
namespace Drm {
namespace V1_0 {
int32_t MediaKeySystemService::GetConfigurationString(const std::string& name, std::string& value)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::SetConfigurationString(const std::string& name, const std::string& value)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetConfigurationByteArray(const std::string& name, std::vector<uint8_t>& value)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::SetConfigurationByteArray(const std::string& name, const std::vector<uint8_t>& value)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetStatistics(std::map<std::string, std::string>& statistics)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetMaxContentProtectionLevel(OHOS::HDI::Drm::V1_0::ContentProtectionLevel& level)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GenerateKeySystemRequest(std::string& defaultUrl, std::vector<uint8_t>& request)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::ProcessKeySystemResponse(const std::vector<uint8_t>& response)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetOemCertificateStatus(OHOS::HDI::Drm::V1_0::CertificateStatus& status)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::SetCallback(const sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemCallback>& systemCallback)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::CreateMediaKeySession(OHOS::HDI::Drm::V1_0::ContentProtectionLevel level,
     sptr<OHOS::HDI::Drm::V1_0::IMediaKeySession>& keySession)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetOfflineMediaKeyIds(std::vector<std::vector<uint8_t>>& mediaKeyIds)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetOfflineMediaKeyStatus(const std::vector<uint8_t>& mediaKeyId,
     OHOS::HDI::Drm::V1_0::OfflineMediaKeyStatus& mediaKeyStatus)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::ClearOfflineMediaKeys(const std::vector<uint8_t>& mediaKeyId)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::GetOemCertificate(sptr<OHOS::HDI::Drm::V1_0::IOemCertificate>& oemCert)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySystemService::Destroy()
{
    return HDF_SUCCESS;
}

} // V1_0
} // Drm
} // HDI
} // OHOS
