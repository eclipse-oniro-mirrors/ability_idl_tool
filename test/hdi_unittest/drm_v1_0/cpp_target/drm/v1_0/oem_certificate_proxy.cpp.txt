/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/oem_certificate_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    oem_certificate_proxy

namespace OHOS {
namespace HDI {
namespace Drm {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), data.size(), &sz);
    if (ok) { return false; }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sz)) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    size_t sz;
    bool ok = __builtin_mul_overflow(sizeof(ElementType), size, &sz);
    if (ok) { return false; }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sz));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}
int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::GenerateOemKeySystemRequest(std::string& defaultUrl,
     std::vector<uint8_t>& request)
{
    return OHOS::HDI::Drm::V1_0::OemCertificateProxy::GenerateOemKeySystemRequest_(defaultUrl, request, Remote());
}

int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::ProcessOemKeySystemResponse(const std::vector<uint8_t>& response)
{
    return OHOS::HDI::Drm::V1_0::OemCertificateProxy::ProcessOemKeySystemResponse_(response, Remote());
}

int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Drm::V1_0::OemCertificateProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::GenerateOemKeySystemRequest_(std::string& defaultUrl,
     std::vector<uint8_t>& request, const sptr<IRemoteObject> remote)
{
    MessageParcel oemCertificateData;
    MessageParcel oemCertificateReply;
    MessageOption oemCertificateOption(MessageOption::TF_SYNC);

    if (!oemCertificateData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IOemCertificate::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!oemCertificateData.WriteBool(false)) {
        HDF_LOGE("%{public}s:failed to write flag of memory setting!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t oemCertificateRet = remote->SendRequest(CMD_OEM_CERTIFICATE_GENERATE_OEM_KEY_SYSTEM_REQUEST, oemCertificateData, oemCertificateReply, oemCertificateOption);
    if (oemCertificateRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, oemCertificateRet);
        return oemCertificateRet;
    }

    const char* defaultUrlCp = oemCertificateReply.ReadCString();
    if (defaultUrlCp == nullptr) {
        HDF_LOGE("%{public}s: read defaultUrl failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    defaultUrl = defaultUrlCp;

    if (!ReadPodArray(oemCertificateReply, request)) {
        HDF_LOGE("%{public}s: failed to read request", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return oemCertificateRet;
}

int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::ProcessOemKeySystemResponse_(const std::vector<uint8_t>& response,
     const sptr<IRemoteObject> remote)
{
    MessageParcel oemCertificateData;
    MessageParcel oemCertificateReply;
    MessageOption oemCertificateOption(MessageOption::TF_SYNC);

    if (!oemCertificateData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IOemCertificate::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(oemCertificateData, response)) {
        HDF_LOGE("%{public}s: failed to write response", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t oemCertificateRet = remote->SendRequest(CMD_OEM_CERTIFICATE_PROCESS_OEM_KEY_SYSTEM_RESPONSE, oemCertificateData, oemCertificateReply, oemCertificateOption);
    if (oemCertificateRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, oemCertificateRet);
        return oemCertificateRet;
    }

    return oemCertificateRet;
}

int32_t OHOS::HDI::Drm::V1_0::OemCertificateProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel oemCertificateData;
    MessageParcel oemCertificateReply;
    MessageOption oemCertificateOption(MessageOption::TF_SYNC);

    if (!oemCertificateData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IOemCertificate::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t oemCertificateRet = remote->SendRequest(CMD_OEM_CERTIFICATE_GET_VERSION, oemCertificateData, oemCertificateReply, oemCertificateOption);
    if (oemCertificateRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, oemCertificateRet);
        return oemCertificateRet;
    }

    if (!oemCertificateReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!oemCertificateReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return oemCertificateRet;
}

} // V1_0
} // Drm
} // HDI
} // OHOS
