/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/media_key_system_factory_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <object_collector.h>
#include <securec.h>
#include <string_ex.h>

#define HDF_LOG_TAG    media_key_system_factory_stub

namespace OHOS {
namespace HDI {
namespace Drm {
namespace V1_0 {


sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::Get(bool isStub)
{
    return OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::Get("media_key_system_factory_service", isStub);
}

sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "media_key_system_factory_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory *>(impl);
}


OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStub(const sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> &impl)
    : IPCObjectStub(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::~MediaKeySystemFactoryStub()
{
    HDF_LOGI("%{public}s enter", __func__);
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_MEDIA_KEY_SYSTEM_FACTORY_GET_VERSION:
            return MediaKeySystemFactoryStubGetVersion(data, reply, option);
        case CMD_MEDIA_KEY_SYSTEM_FACTORY_IS_MEDIA_KEY_SYSTEM_SUPPORTED:
            return MediaKeySystemFactoryStubIsMediaKeySystemSupported(data, reply, option);
        case CMD_MEDIA_KEY_SYSTEM_FACTORY_CREATE_MEDIA_KEY_SYSTEM:
            return MediaKeySystemFactoryStubCreateMediaKeySystem(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubIsMediaKeySystemSupported(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubIsMediaKeySystemSupported_(mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption, impl_);
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubCreateMediaKeySystem(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubCreateMediaKeySystem_(mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption, impl_);
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubGetVersion(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubGetVersion_(mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption, impl_);
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubIsMediaKeySystemSupported_(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption, sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> impl)
{
    if (mediaKeySystemFactoryData.ReadInterfaceToken() != OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    const char* nameCp = mediaKeySystemFactoryData.ReadCString();
    if (nameCp == nullptr) {
        HDF_LOGE("%{public}s: read name failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string name = nameCp;

    const char* mimeTypeCp = mediaKeySystemFactoryData.ReadCString();
    if (mimeTypeCp == nullptr) {
        HDF_LOGE("%{public}s: read mimeType failed", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    std::string mimeType = mimeTypeCp;

    OHOS::HDI::Drm::V1_0::ContentProtectionLevel level = static_cast<enum ContentProtectionLevel>(0);
    {
        uint64_t enumTmp = 0;
        if (!mediaKeySystemFactoryData.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write level failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        level = static_cast<enum ContentProtectionLevel>(enumTmp);
    }

    bool isSupported = false;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mediaKeySystemFactoryRet = impl->IsMediaKeySystemSupported(name, mimeType, level, isSupported);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    if (!mediaKeySystemFactoryReply.WriteBool(isSupported)) {
        HDF_LOGE("%{public}s: write isSupported failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubCreateMediaKeySystem_(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption, sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> impl)
{
    if (mediaKeySystemFactoryData.ReadInterfaceToken() != OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystem> mediaKeySystem;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mediaKeySystemFactoryRet = impl->CreateMediaKeySystem(mediaKeySystem);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    if (mediaKeySystem == nullptr) {
        HDF_LOGE("%{public}s: parameter mediaKeySystem is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryReply.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(mediaKeySystem, OHOS::HDI::Drm::V1_0::IMediaKeySystem::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write mediaKeySystem failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryStub::MediaKeySystemFactoryStubGetVersion_(MessageParcel& mediaKeySystemFactoryData, MessageParcel& mediaKeySystemFactoryReply, MessageOption& mediaKeySystemFactoryOption, sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> impl)
{
    if (mediaKeySystemFactoryData.ReadInterfaceToken() != OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t mediaKeySystemFactoryRet = impl->GetVersion(majorVer, minorVer);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    if (!mediaKeySystemFactoryReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}
} // V1_0
} // Drm
} // HDI
} // OHOS
