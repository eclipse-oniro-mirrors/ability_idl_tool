/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/media_key_system_factory_proxy.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>
#include "drm/v1_0/media_key_system_proxy.h"

#define HDF_LOG_TAG    media_key_system_factory_proxy

namespace OHOS {
namespace HDI {
namespace Drm {
namespace V1_0 {


sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::Get(bool isStub)
{
    return IMediaKeySystemFactory::Get("media_key_system_factory_service", isStub);
}

sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory> OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "media_key_system_factory_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy> proxy = new OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t mediaKeySystemFactoryRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::Reconnect(
    sptr<OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::IsMediaKeySystemSupported(const std::string& name,
     const std::string& mimeType, OHOS::HDI::Drm::V1_0::ContentProtectionLevel level, bool& isSupported)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::IsMediaKeySystemSupported_(name, mimeType, level, isSupported, GetCurrentRemote());
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::CreateMediaKeySystem(sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystem>& mediaKeySystem)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::CreateMediaKeySystem_(mediaKeySystem, GetCurrentRemote());
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::IsMediaKeySystemSupported_(const std::string& name,
     const std::string& mimeType, OHOS::HDI::Drm::V1_0::ContentProtectionLevel level, bool& isSupported, const sptr<IRemoteObject> remote)
{
    MessageParcel mediaKeySystemFactoryData;
    MessageParcel mediaKeySystemFactoryReply;
    MessageOption mediaKeySystemFactoryOption(MessageOption::TF_SYNC);

    if (!mediaKeySystemFactoryData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryData.WriteCString(name.c_str())) {
        HDF_LOGE("%{public}s: write name failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryData.WriteCString(mimeType.c_str())) {
        HDF_LOGE("%{public}s: write mimeType failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryData.WriteUint64(static_cast<uint64_t>(level))) {
        HDF_LOGE("%{public}s: write level failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t mediaKeySystemFactoryRet = remote->SendRequest(CMD_MEDIA_KEY_SYSTEM_FACTORY_IS_MEDIA_KEY_SYSTEM_SUPPORTED, mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    if (!mediaKeySystemFactoryReply.ReadBool(isSupported)) {
        HDF_LOGE("%{public}s: read isSupported failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::CreateMediaKeySystem_(sptr<OHOS::HDI::Drm::V1_0::IMediaKeySystem>& mediaKeySystem, const sptr<IRemoteObject> remote)
{
    MessageParcel mediaKeySystemFactoryData;
    MessageParcel mediaKeySystemFactoryReply;
    MessageOption mediaKeySystemFactoryOption(MessageOption::TF_SYNC);

    if (!mediaKeySystemFactoryData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t mediaKeySystemFactoryRet = remote->SendRequest(CMD_MEDIA_KEY_SYSTEM_FACTORY_CREATE_MEDIA_KEY_SYSTEM, mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    sptr<IRemoteObject> mediaKeySystemRemote = mediaKeySystemFactoryReply.ReadRemoteObject();
    if (mediaKeySystemRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    mediaKeySystem = new OHOS::HDI::Drm::V1_0::MediaKeySystemProxy(mediaKeySystemRemote);
    if (mediaKeySystem == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}

int32_t OHOS::HDI::Drm::V1_0::MediaKeySystemFactoryProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel mediaKeySystemFactoryData;
    MessageParcel mediaKeySystemFactoryReply;
    MessageOption mediaKeySystemFactoryOption(MessageOption::TF_SYNC);

    if (!mediaKeySystemFactoryData.WriteInterfaceToken(OHOS::HDI::Drm::V1_0::IMediaKeySystemFactory::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t mediaKeySystemFactoryRet = remote->SendRequest(CMD_MEDIA_KEY_SYSTEM_FACTORY_GET_VERSION, mediaKeySystemFactoryData, mediaKeySystemFactoryReply, mediaKeySystemFactoryOption);
    if (mediaKeySystemFactoryRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, mediaKeySystemFactoryRet);
        return mediaKeySystemFactoryRet;
    }

    if (!mediaKeySystemFactoryReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!mediaKeySystemFactoryReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return mediaKeySystemFactoryRet;
}

} // V1_0
} // Drm
} // HDI
} // OHOS
