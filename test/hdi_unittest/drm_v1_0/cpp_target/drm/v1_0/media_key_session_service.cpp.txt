/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/media_key_session_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    media_key_session_service

namespace OHOS {
namespace HDI {
namespace Drm {
namespace V1_0 {
int32_t MediaKeySessionService::GenerateMediaKeyRequest(const OHOS::HDI::Drm::V1_0::MediaKeyRequestInfo& mediaKeyRequestInfo, OHOS::HDI::Drm::V1_0::MediaKeyRequest& mediaKeyRequest)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::ProcessMediaKeyResponse(const std::vector<uint8_t>& mediaKeyResponse,
     std::vector<uint8_t>& mediaKeyId)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::CheckMediaKeyStatus(std::map<std::string, std::string>& mediaKeyStatus)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::ClearMediaKeys()
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::GetOfflineReleaseRequest(const std::vector<uint8_t>& mediaKeyId,
     std::vector<uint8_t>& releaseRequest)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::ProcessOfflineReleaseResponse(const std::vector<uint8_t>& mediaKeyId,
     const std::vector<uint8_t>& response)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::RestoreOfflineMediaKeys(const std::vector<uint8_t>& mediaKeyId)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::GetContentProtectionLevel(OHOS::HDI::Drm::V1_0::ContentProtectionLevel& level)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::RequiresSecureDecoderModule(const std::string& mimeType, bool& required)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::SetCallback(const sptr<OHOS::HDI::Drm::V1_0::IMediaKeySessionCallback>& sessionCallback)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::GetMediaDecryptModule(sptr<OHOS::HDI::Drm::V1_0::IMediaDecryptModule>& decryptModule)
{
    return HDF_SUCCESS;
}

int32_t MediaKeySessionService::Destroy()
{
    return HDF_SUCCESS;
}

} // V1_0
} // Drm
} // HDI
} // OHOS
