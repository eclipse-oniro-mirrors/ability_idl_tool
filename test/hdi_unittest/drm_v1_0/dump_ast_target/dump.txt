AST[name: IMediaKeySession file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaKeySession.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.IMediaDecryptModule;
import ohos.hdi.drm.v1_0.IMediaKeySessionCallback;
import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full] interface IMediaKeySession {
    [mini, lite, full] GenerateMediaKeyRequest(
      [in] ohos.hdi.drm.v1_0.MediaKeyRequestInfo mediaKeyRequestInfo,
      [out] ohos.hdi.drm.v1_0.MediaKeyRequest mediaKeyRequest);

    [mini, lite, full] ProcessMediaKeyResponse(
      [in] unsigned char[] mediaKeyResponse,
      [out] unsigned char[] mediaKeyId);

    [mini, lite, full] CheckMediaKeyStatus(
      [out] Map<std::string, std::string> mediaKeyStatus);

    [mini, lite, full] ClearMediaKeys();

    [mini, lite, full] GetOfflineReleaseRequest(
      [in] unsigned char[] mediaKeyId,
      [out] unsigned char[] releaseRequest);

    [mini, lite, full] ProcessOfflineReleaseResponse(
      [in] unsigned char[] mediaKeyId,
      [in] unsigned char[] response);

    [mini, lite, full] RestoreOfflineMediaKeys(
      [in] unsigned char[] mediaKeyId);

    [mini, lite, full] GetContentProtectionLevel(
      [out] ohos.hdi.drm.v1_0.ContentProtectionLevel level);

    [mini, lite, full] RequiresSecureDecoderModule(
      [in] std::string mimeType,
      [out] boolean required);

    [mini, lite, full] SetCallback(
      [in] ohos.hdi.drm.v1_0.IMediaKeySessionCallback sessionCallback);

    [mini, lite, full] GetMediaDecryptModule(
      [out] ohos.hdi.drm.v1_0.IMediaDecryptModule decryptModule);

    [mini, lite, full] Destroy();
}


AST[name: IMediaKeySystem file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaKeySystem.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.IOemCertificate;
import ohos.hdi.drm.v1_0.IMediaKeySession;
import ohos.hdi.drm.v1_0.IMediaKeySystemCallback;
import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full] interface IMediaKeySystem {
    [mini, lite, full] GetConfigurationString(
      [in] std::string name,
      [out] std::string value);

    [mini, lite, full] SetConfigurationString(
      [in] std::string name,
      [in] std::string value);

    [mini, lite, full] GetConfigurationByteArray(
      [in] std::string name,
      [out] unsigned char[] value);

    [mini, lite, full] SetConfigurationByteArray(
      [in] std::string name,
      [in] unsigned char[] value);

    [mini, lite, full] GetStatistics(
      [out] Map<std::string, std::string> statistics);

    [mini, lite, full] GetMaxContentProtectionLevel(
      [out] ohos.hdi.drm.v1_0.ContentProtectionLevel level);

    [mini, lite, full] GenerateKeySystemRequest(
      [out] std::string defaultUrl,
      [out] unsigned char[] request);

    [mini, lite, full] ProcessKeySystemResponse(
      [in] unsigned char[] response);

    [mini, lite, full] GetOemCertificateStatus(
      [out] ohos.hdi.drm.v1_0.CertificateStatus status);

    [mini, lite, full] SetCallback(
      [in] ohos.hdi.drm.v1_0.IMediaKeySystemCallback systemCallback);

    [mini, lite, full] CreateMediaKeySession(
      [in] ohos.hdi.drm.v1_0.ContentProtectionLevel level,
      [out] ohos.hdi.drm.v1_0.IMediaKeySession keySession);

    [mini, lite, full] GetOfflineMediaKeyIds(
      [out] unsigned char[][] mediaKeyIds);

    [mini, lite, full] GetOfflineMediaKeyStatus(
      [in] unsigned char[] mediaKeyId,
      [out] ohos.hdi.drm.v1_0.OfflineMediaKeyStatus mediaKeyStatus);

    [mini, lite, full] ClearOfflineMediaKeys(
      [in] unsigned char[] mediaKeyId);

    [mini, lite, full] GetOemCertificate(
      [out] ohos.hdi.drm.v1_0.IOemCertificate oemCert);

    [mini, lite, full] Destroy();
}


AST[name: IOemCertificate file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IOemCertificate.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full] interface IOemCertificate {
    [mini, lite, full] GenerateOemKeySystemRequest(
      [out] std::string defaultUrl,
      [out] unsigned char[] request);

    [mini, lite, full] ProcessOemKeySystemResponse(
      [in] unsigned char[] response);
}


AST[name: IMediaKeySessionCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaKeySessionCallback.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full, callback] interface IMediaKeySessionCallback {
    [mini, lite, full, callback] SendEvent(
      [in] ohos.hdi.drm.v1_0.EventType eventType,
      [in] int extra,
      [in] unsigned char[] data);

    [mini, lite, full, callback] SendEventKeyChange(
      [in] Map<unsigned char[], ohos.hdi.drm.v1_0.MediaKeySessionKeyStatus> keyStatus,
      [in] boolean newKeysAvailable);
}


AST[name: IMediaDecryptModule file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaDecryptModule.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full] interface IMediaDecryptModule {
    [mini, lite, full] DecryptMediaData(
      [in] boolean secure,
      [in] ohos.hdi.drm.v1_0.CryptoInfo cryptoInfo,
      [in] ohos.hdi.drm.v1_0.DrmBuffer srcBuffer,
      [in] ohos.hdi.drm.v1_0.DrmBuffer destBuffer);

    [mini, lite, full] Release();
}


AST[name: IMediaKeySystemFactory file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaKeySystemFactory.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.IMediaKeySystem;
import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full] interface IMediaKeySystemFactory {
    [mini, lite, full] IsMediaKeySystemSupported(
      [in] std::string name,
      [in] std::string mimeType,
      [in] ohos.hdi.drm.v1_0.ContentProtectionLevel level,
      [out] boolean isSupported);

    [mini, lite, full] CreateMediaKeySystem(
      [out] ohos.hdi.drm.v1_0.IMediaKeySystem mediaKeySystem);
}


AST[name: IMediaKeySystemCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/IMediaKeySystemCallback.idl]
package ohos.hdi.drm.v1_0;

import ohos.hdi.drm.v1_0.MediaKeySystemTypes;

[mini, lite, full, callback] interface IMediaKeySystemCallback {
    [mini, lite, full, callback] SendEvent(
      [in] ohos.hdi.drm.v1_0.EventType eventType,
      [in] int extra,
      [in] unsigned char[] data);
}


AST[name: MediaKeySystemTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/drm_v1_0/foo/drm/v1_0/MediaKeySystemTypes.idl]
package ohos.hdi.drm.v1_0;

[mini, lite, full] enum ContentProtectionLevel : int {
  SECURE_UNKNOWN = 0,
  SW_SECURE_CRYPTO,
  HW_SECURE_CRYPTO,
  HW_ENHANCED_SECURE_CRYPTO,
  HW_SECURE_MAX,
};

[mini, lite, full] enum MediaKeyRequestType : int {
  MEDIA_KEY_REQUEST_TYPE_UNKNOWN = 0,
  MEDIA_KEY_REQUEST_TYPE_INITIAL,
  MEDIA_KEY_REQUEST_TYPE_RENEWAL,
  MEDIA_KEY_REQUEST_TYPE_RELEASE,
  MEDIA_KEY_REQUEST_TYPE_NONE,
  MEDIA_KEY_REQUEST_TYPE_UPDATE,
};

[mini, lite, full] enum EventType : int {
  EVENTTYPE_PROVISIONREQUIRED = 0,
  EVENTTYPE_KEYREQUIRED,
  EVENTTYPE_KEYEXPIRED,
  EVENTTYPE_VENDOR_DEFINED,
  EVENTTYPE_EXPIRATIONUPDATE,
  EVENTTYPE_KEYCHANGE,
};

[mini, lite, full] enum CryptoAlgorithmType : int {
  ALGTYPE_UNENCRYPTED = 0,
  ALGTYPE_AES_CTR,
  ALGTYPE_AES_WV,
  ALGTYPE_AES_CBC,
  ALGTYPE_SM4_CBC,
  ALGTYPE_SM4_CTR,
};

[mini, lite, full] enum OfflineMediaKeyStatus : int {
  OFFLINE_MEDIA_KEY_STATUS_UNKNOWN = 0,
  OFFLINE_MEDIA_KEY_STATUS_USABLE,
  OFFLINE_MEDIA_KEY_STATUS_INACTIVE,
};

[mini, lite, full] enum MediaKeyType : int {
  MEDIA_KEY_TYPE_OFFLINE = 0,
  MEDIA_KEY_TYPE_ONLINE,
};

[mini, lite, full] enum CertificateStatus : int {
  CERT_STATUS_PROVISIONED = 0,
  CERT_STATUS_NOT_PROVISIONED,
  CERT_STATUS_EXPIRED,
  CERT_STATUS_INVALID,
  CERT_STATUS_UNAVAILABLE,
};

[mini, lite, full] enum MediaKeySessionKeyStatus : int {
  MEDIA_KEY_SESSION_KEY_STATUS_USABLE = 0,
  MEDIA_KEY_SESSION_KEY_STATUS_EXPIRED,
  MEDIA_KEY_SESSION_KEY_STATUS_OUTPUT_NOT_ALLOWED,
  MEDIA_KEY_SESSION_KEY_STATUS_PENDING,
  MEDIA_KEY_SESSION_KEY_STATUS_INTERNAL_ERROR,
  MEDIA_KEY_SESSION_KEY_STATUS_USABLE_IN_FUTURE,
};

[mini, lite, full] struct MediaKeyRequestInfo {
  ohos.hdi.drm.v1_0.MediaKeyType mediaKeyType;
  std::string mimeType;
  unsigned char[] initData;
  Map<std::string, std::string> optionalData;
};

[mini, lite, full] struct MediaKeyRequest {
  ohos.hdi.drm.v1_0.MediaKeyRequestType requestType;
  unsigned char[] data;
  std::string defaultUrl;
};

[mini, lite, full] struct Pattern {
  unsigned int encryptBlocks;
  unsigned int skipBlocks;
};

[mini, lite, full] struct SubSample {
  unsigned int clearHeaderLen;
  unsigned int payLoadLen;
};

[mini, lite, full] struct CryptoInfo {
  ohos.hdi.drm.v1_0.CryptoAlgorithmType type;
  unsigned char[] keyId;
  unsigned char[] iv;
  ohos.hdi.drm.v1_0.Pattern pattern;
  ohos.hdi.drm.v1_0.SubSample[] subSamples;
};

[mini, lite, full] struct DrmBuffer {
  unsigned int bufferType;
  FileDescriptor fd;
  unsigned int bufferLen;
  unsigned int allocLen;
  unsigned int filledLen;
  unsigned int offset;
  unsigned int sharedMemType;
};


