/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_FACE_AUTH_V1_0_FACEAUTHTYPES_H
#define OHOS_HDI_FACE_AUTH_V1_0_FACEAUTHTYPES_H

#include <cstdbool>
#include <cstdint>
#include <vector>

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
class MessageParcel;
}

namespace OHOS {
namespace HDI {
namespace FaceAuth {
namespace V1_0 {

using namespace OHOS;

enum AuthType : int32_t {
    PIN = 1,
    FACE = 2,
    FINGERPRINT = 4,
};

enum ExecutorRole : int32_t {
    COLLECTOR = 1,
    VERIFIER = 2,
    ALL_IN_ONE = 3,
};

enum ExecutorSecureLevel : int32_t {
    ESL0 = 0,
    ESL1 = 1,
    ESL2 = 2,
    ESL3 = 3,
};

enum CommandId : int32_t {
    LOCK_TEMPLATE = 1,
    UNLOCK_TEMPLATE = 2,
    VENDOR_COMMAND_BEGIN = 10000,
};

enum FaceTipsCode : int32_t {
    FACE_AUTH_TIP_TOO_BRIGHT = 1,
    FACE_AUTH_TIP_TOO_DARK = 2,
    FACE_AUTH_TIP_TOO_CLOSE = 3,
    FACE_AUTH_TIP_TOO_FAR = 4,
    FACE_AUTH_TIP_TOO_HIGH = 5,
    FACE_AUTH_TIP_TOO_LOW = 6,
    FACE_AUTH_TIP_TOO_RIGHT = 7,
    FACE_AUTH_TIP_TOO_LEFT = 8,
    FACE_AUTH_TIP_TOO_MUCH_MOTION = 9,
    FACE_AUTH_TIP_POOR_GAZE = 10,
    FACE_AUTH_TIP_NOT_DETECTED = 11,
    VENDOR_FACE_AUTH_TIP_BEGIN = 10000,
};

struct ExecutorInfo {
    uint16_t sensorId;
    uint32_t executorType;
    OHOS::HDI::FaceAuth::V1_0::ExecutorRole executorRole;
    OHOS::HDI::FaceAuth::V1_0::AuthType authType;
    OHOS::HDI::FaceAuth::V1_0::ExecutorSecureLevel esl;
    std::vector<uint8_t> publicKey;
    std::vector<uint8_t> extraInfo;
};

struct TemplateInfo {
    uint32_t executorType;
    int32_t lockoutDuration;
    int32_t remainAttempts;
    std::vector<uint8_t> extraInfo;
};

bool ExecutorInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::FaceAuth::V1_0::ExecutorInfo& dataBlock);

bool ExecutorInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::FaceAuth::V1_0::ExecutorInfo& dataBlock);

bool TemplateInfoBlockMarshalling(OHOS::MessageParcel &data, const OHOS::HDI::FaceAuth::V1_0::TemplateInfo& dataBlock);

bool TemplateInfoBlockUnmarshalling(OHOS::MessageParcel &data, OHOS::HDI::FaceAuth::V1_0::TemplateInfo& dataBlock);

} // V1_0
} // FaceAuth
} // HDI
} // OHOS

#endif // OHOS_HDI_FACE_AUTH_V1_0_FACEAUTHTYPES_H

