/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/types.h"
#include <hdf_core_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audioext {
namespace V1_0 {

template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);
template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}

bool AudioParameterBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameter& dataBlock)
{
    if (!data.WriteUint32(dataBlock.format)) {
        HDF_LOGE("%{public}s: write dataBlock.format failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.channelCount)) {
        HDF_LOGE("%{public}s: write dataBlock.channelCount failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.sampleRate)) {
        HDF_LOGE("%{public}s: write dataBlock.sampleRate failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.period)) {
        HDF_LOGE("%{public}s: write dataBlock.period failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.frameSize)) {
        HDF_LOGE("%{public}s: write dataBlock.frameSize failed!", __func__);
        return false;
    }

    if (!data.WriteUint32(dataBlock.streamUsage)) {
        HDF_LOGE("%{public}s: write dataBlock.streamUsage failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.renderFlags))) {
        HDF_LOGE("%{public}s: write dataBlock.renderFlags failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.capturerFlags))) {
        HDF_LOGE("%{public}s: write dataBlock.capturerFlags failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.ext.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.ext failed!", __func__);
        return false;
    }
    return true;
}

bool AudioParameterBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameter& dataBlock)
{
    if (!data.ReadUint32(dataBlock.format)) {
        HDF_LOGE("%{public}s: read dataBlock.format failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.channelCount)) {
        HDF_LOGE("%{public}s: read dataBlock.channelCount failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.sampleRate)) {
        HDF_LOGE("%{public}s: read dataBlock.sampleRate failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.period)) {
        HDF_LOGE("%{public}s: read dataBlock.period failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.frameSize)) {
        HDF_LOGE("%{public}s: read dataBlock.frameSize failed!", __func__);
        return false;
    }

    if (!data.ReadUint32(dataBlock.streamUsage)) {
        HDF_LOGE("%{public}s: read dataBlock.streamUsage failed!", __func__);
        return false;
    }

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.renderFlags failed!", __func__);
            return false;
        }
        dataBlock.renderFlags = static_cast<enum PortOperationMode>(enumTmp);
    }

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.capturerFlags failed!", __func__);
            return false;
        }
        dataBlock.capturerFlags = static_cast<enum PortOperationMode>(enumTmp);
    }

    const char* extCp = data.ReadCString();
    if (extCp == nullptr) {
        HDF_LOGE("%{public}s: read extCp failed", __func__);
        return false;
    }
    dataBlock.ext = extCp;
    return true;
}

bool AudioDataBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& dataBlock)
{
    if (!AudioParameterBlockMarshalling(data, dataBlock.param)) {
        HDF_LOGE("%{public}s: write dataBlock.param failed!", __func__);
        return false;
    }

    if (!WritePodArray(data, dataBlock.data)) {
        HDF_LOGE("%{public}s: failed to write dataBlock.data", __func__);
        return false;
    }
    return true;
}

bool AudioDataBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& dataBlock)
{
    if (!OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameterBlockUnmarshalling(data, dataBlock.param)) {
        HDF_LOGE("%{public}s: read dataBlock.param failed!", __func__);
        return false;
    }

    if (!ReadPodArray(data, dataBlock.data)) {
        HDF_LOGE("%{public}s: failed to read dataBlock.data", __func__);
        return false;
    }
    return true;
}

bool DAudioEventBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioEvent& dataBlock)
{
    if (!data.WriteInt32(dataBlock.type)) {
        HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.content.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.content failed!", __func__);
        return false;
    }
    return true;
}

bool DAudioEventBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioEvent& dataBlock)
{
    if (!data.ReadInt32(dataBlock.type)) {
        HDF_LOGE("%{public}s: read dataBlock.type failed!", __func__);
        return false;
    }

    const char* contentCp = data.ReadCString();
    if (contentCp == nullptr) {
        HDF_LOGE("%{public}s: read contentCp failed", __func__);
        return false;
    }
    dataBlock.content = contentCp;
    return true;
}

bool CurrentTimeBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime& dataBlock)
{
    if (!data.WriteUnpadBuffer((const void*)&dataBlock, sizeof(OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime))) {
        return false;
    }
    return true;
}

bool CurrentTimeBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime& dataBlock)
{
    const OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime *dataBlockPtr = reinterpret_cast<const OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime*>(data.ReadUnpadBuffer(sizeof(OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime)));
    if (dataBlockPtr == NULL) {
        return false;
    }

    if (memcpy_s(&dataBlock, sizeof(OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime), dataBlockPtr, sizeof(OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime)) != EOK) {
        return false;
    }
    return true;
}

} // V1_0
} // Audioext
} // DistributedAudio
} // HDI
} // OHOS
