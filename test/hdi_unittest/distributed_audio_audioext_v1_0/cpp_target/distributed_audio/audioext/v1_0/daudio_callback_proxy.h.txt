/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_DAUDIOCALLBACKPROXY_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_DAUDIOCALLBACKPROXY_H

#include "v1_0/id_audio_callback.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audioext {
namespace V1_0 {

class DAudioCallbackProxy : public IProxyBroker<OHOS::HDI::DistributedAudio::Audioext::V1_0::IDAudioCallback> {
public:
    explicit DAudioCallbackProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::DistributedAudio::Audioext::V1_0::IDAudioCallback>(remote) {
    }
    virtual ~DAudioCallbackProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t OpenDevice(const std::string& adpName, int32_t devId) override;

    int32_t CloseDevice(const std::string& adpName, int32_t devId) override;

    int32_t SetParameters(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameter& param) override;

    int32_t NotifyEvent(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioEvent& event) override;

    int32_t WriteStreamData(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data) override;

    int32_t ReadStreamData(const std::string& adpName, int32_t devId,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data) override;

    int32_t ReadMmapPosition(const std::string& adpName, int32_t devId, uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime& time) override;

    int32_t RefreshAshmemInfo(const std::string& adpName, int32_t devId, int fd, int32_t ashmemLength,
         int32_t lengthPerTrans) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t OpenDevice_(const std::string& adpName, int32_t devId, const sptr<IRemoteObject> remote);

    static int32_t CloseDevice_(const std::string& adpName, int32_t devId, const sptr<IRemoteObject> remote);

    static int32_t SetParameters_(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameter& param, const sptr<IRemoteObject> remote);

    static int32_t NotifyEvent_(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioEvent& event, const sptr<IRemoteObject> remote);

    static int32_t WriteStreamData_(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data, const sptr<IRemoteObject> remote);

    static int32_t ReadStreamData_(const std::string& adpName, int32_t devId,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data, const sptr<IRemoteObject> remote);

    static int32_t ReadMmapPosition_(const std::string& adpName, int32_t devId, uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime& time, const sptr<IRemoteObject> remote);

    static int32_t RefreshAshmemInfo_(const std::string& adpName, int32_t devId, int fd, int32_t ashmemLength,
         int32_t lengthPerTrans, const sptr<IRemoteObject> remote);

    static int32_t GetVersion_(uint32_t& majorVer, uint32_t& minorVer, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioCallbackProxy> delegator_;
};

} // V1_0
} // Audioext
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_DAUDIOCALLBACKPROXY_H

