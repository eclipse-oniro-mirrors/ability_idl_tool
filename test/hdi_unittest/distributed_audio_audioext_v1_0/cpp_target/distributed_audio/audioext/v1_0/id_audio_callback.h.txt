/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_IDAUDIOCALLBACK_H
#define OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_IDAUDIOCALLBACK_H

#include <stdint.h>
#include <string>
#include <hdf_base.h>
#include <hdi_base.h>
#include "distributed_audio/audioext/v1_0/types.h"

#ifndef HDI_BUFF_MAX_SIZE
#define HDI_BUFF_MAX_SIZE (1024 * 200)
#endif

#ifndef HDI_CHECK_VALUE_RETURN
#define HDI_CHECK_VALUE_RETURN(lv, compare, rv, ret) do { \
    if ((lv) compare (rv)) { \
        return ret; \
    } \
} while (false)
#endif

#ifndef HDI_CHECK_VALUE_RET_GOTO
#define HDI_CHECK_VALUE_RET_GOTO(lv, compare, rv, ret, value, table) do { \
    if ((lv) compare (rv)) { \
        ret = value; \
        goto table; \
    } \
} while (false)
#endif

namespace OHOS {
namespace HDI {
namespace DistributedAudio {
namespace Audioext {
namespace V1_0 {
using namespace OHOS;
using namespace OHOS::HDI;

enum {
    CMD_DAUDIO_CALLBACK_GET_VERSION = 0,
    CMD_DAUDIO_CALLBACK_OPEN_DEVICE = 1,
    CMD_DAUDIO_CALLBACK_CLOSE_DEVICE = 2,
    CMD_DAUDIO_CALLBACK_SET_PARAMETERS = 3,
    CMD_DAUDIO_CALLBACK_NOTIFY_EVENT = 4,
    CMD_DAUDIO_CALLBACK_WRITE_STREAM_DATA = 5,
    CMD_DAUDIO_CALLBACK_READ_STREAM_DATA = 6,
    CMD_DAUDIO_CALLBACK_READ_MMAP_POSITION = 7,
    CMD_DAUDIO_CALLBACK_REFRESH_ASHMEM_INFO = 8,
};

class IDAudioCallback : public HdiBase {
public:
    DECLARE_HDI_DESCRIPTOR(u"ohos.hdi.distributed_audio.audioext.v1_0.IDAudioCallback");

    virtual ~IDAudioCallback() = default;

    virtual int32_t OpenDevice(const std::string& adpName, int32_t devId) = 0;

    virtual int32_t CloseDevice(const std::string& adpName, int32_t devId) = 0;

    virtual int32_t SetParameters(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioParameter& param) = 0;

    virtual int32_t NotifyEvent(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::DAudioEvent& event) = 0;

    virtual int32_t WriteStreamData(const std::string& adpName, int32_t devId,
         const OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data) = 0;

    virtual int32_t ReadStreamData(const std::string& adpName, int32_t devId,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::AudioData& data) = 0;

    virtual int32_t ReadMmapPosition(const std::string& adpName, int32_t devId, uint64_t& frames,
         OHOS::HDI::DistributedAudio::Audioext::V1_0::CurrentTime& time) = 0;

    virtual int32_t RefreshAshmemInfo(const std::string& adpName, int32_t devId, int fd, int32_t ashmemLength,
         int32_t lengthPerTrans) = 0;

    virtual int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer)
    {
        majorVer = 1;
        minorVer = 0;
        return HDF_SUCCESS;
    }

    virtual bool IsProxy()
    {
        return false;
    }

    virtual const std::u16string GetDesc()
    {
        return metaDescriptor_;
    }
};
} // V1_0
} // Audioext
} // DistributedAudio
} // HDI
} // OHOS

#endif // OHOS_HDI_DISTRIBUTED_AUDIO_AUDIOEXT_V1_0_IDAUDIOCALLBACK_H

