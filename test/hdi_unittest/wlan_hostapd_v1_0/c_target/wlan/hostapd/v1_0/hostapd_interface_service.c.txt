/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_core_log.h>
#include <osal_mem.h>
#include <securec.h>
#include "v1_0/ihostapd_interface.h"

#define HDF_LOG_TAG    hostapd_interface_service

struct HostapdInterfaceService {
    struct IHostapdInterface interface;
};

static int32_t HostapdInterfaceStartAp(struct IHostapdInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceStopAp(struct IHostapdInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceEnableAp(struct IHostapdInterface *self, const char* ifName, int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceDisableAp(struct IHostapdInterface *self, const char* ifName, int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApPasswd(struct IHostapdInterface *self, const char* ifName, const char* pass,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApName(struct IHostapdInterface *self, const char* ifName, const char* name,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApWpaValue(struct IHostapdInterface *self, const char* ifName, int32_t securityType,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApBand(struct IHostapdInterface *self, const char* ifName, int32_t band, int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetAp80211n(struct IHostapdInterface *self, const char* ifName, int32_t value,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApWmm(struct IHostapdInterface *self, const char* ifName, int32_t value, int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApChannel(struct IHostapdInterface *self, const char* ifName, int32_t channel,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetApMaxConn(struct IHostapdInterface *self, const char* ifName, int32_t maxConn,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceSetMacFilter(struct IHostapdInterface *self, const char* ifName, const char* mac,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceDelMacFilter(struct IHostapdInterface *self, const char* ifName, const char* mac,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceGetStaInfos(struct IHostapdInterface *self, const char* ifName, char* buf,
     uint32_t bufLen, int32_t size, int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceDisassociateSta(struct IHostapdInterface *self, const char* ifName, const char* mac,
     int32_t id)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceRegisterEventCallback(struct IHostapdInterface *self, struct IHostapdCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceUnregisterEventCallback(struct IHostapdInterface *self, struct IHostapdCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceHostApdShellCmd(struct IHostapdInterface *self, const char* ifName, const char* cmd)
{
    return HDF_SUCCESS;
}

static int32_t HostapdInterfaceGetVersion(struct IHostapdInterface *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IHOSTAPD_INTERFACE_MAJOR_VERSION;
    *minorVer = IHOSTAPD_INTERFACE_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IHostapdInterface *HostapdInterfaceImplGetInstance(void)
{
    struct HostapdInterfaceService *service = (struct HostapdInterfaceService *)OsalMemCalloc(sizeof(struct HostapdInterfaceService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc HostapdInterfaceService obj failed!", __func__);
        return NULL;
    }

    service->interface.StartAp = HostapdInterfaceStartAp;
    service->interface.StopAp = HostapdInterfaceStopAp;
    service->interface.EnableAp = HostapdInterfaceEnableAp;
    service->interface.DisableAp = HostapdInterfaceDisableAp;
    service->interface.SetApPasswd = HostapdInterfaceSetApPasswd;
    service->interface.SetApName = HostapdInterfaceSetApName;
    service->interface.SetApWpaValue = HostapdInterfaceSetApWpaValue;
    service->interface.SetApBand = HostapdInterfaceSetApBand;
    service->interface.SetAp80211n = HostapdInterfaceSetAp80211n;
    service->interface.SetApWmm = HostapdInterfaceSetApWmm;
    service->interface.SetApChannel = HostapdInterfaceSetApChannel;
    service->interface.SetApMaxConn = HostapdInterfaceSetApMaxConn;
    service->interface.SetMacFilter = HostapdInterfaceSetMacFilter;
    service->interface.DelMacFilter = HostapdInterfaceDelMacFilter;
    service->interface.GetStaInfos = HostapdInterfaceGetStaInfos;
    service->interface.DisassociateSta = HostapdInterfaceDisassociateSta;
    service->interface.RegisterEventCallback = HostapdInterfaceRegisterEventCallback;
    service->interface.UnregisterEventCallback = HostapdInterfaceUnregisterEventCallback;
    service->interface.HostApdShellCmd = HostapdInterfaceHostApdShellCmd;
    service->interface.GetVersion = HostapdInterfaceGetVersion;
    return &service->interface;
}

void HostapdInterfaceImplRelease(struct IHostapdInterface *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
