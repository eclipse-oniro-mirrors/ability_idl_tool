/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/wpa_callback_service.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <osal_mem.h>
#include <securec.h>

#define HDF_LOG_TAG    wpa_callback_service

static int32_t WpaCallbackOnEventDisconnected(struct IWpaCallback *self,
     const struct HdiWpaDisconnectParam* disconnectParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventConnected(struct IWpaCallback *self, const struct HdiWpaConnectParam* connectParam,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventBssidChanged(struct IWpaCallback *self,
     const struct HdiWpaBssidChangedParam* bssidChangedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventStateChanged(struct IWpaCallback *self,
     const struct HdiWpaStateChangedParam* statechangedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventTempDisabled(struct IWpaCallback *self,
     const struct HdiWpaTempDisabledParam* tempDisabledParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventAssociateReject(struct IWpaCallback *self,
     const struct HdiWpaAssociateRejectParam* associateRejectParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventWpsOverlap(struct IWpaCallback *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventWpsTimeout(struct IWpaCallback *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventScanResult(struct IWpaCallback *self,
     const struct HdiWpaRecvScanResultParam* recvScanResultParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventDeviceFound(struct IWpaCallback *self,
     const struct HdiP2pDeviceInfoParam* deviceInfoParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventDeviceLost(struct IWpaCallback *self,
     const struct HdiP2pDeviceLostParam* deviceLostParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGoNegotiationRequest(struct IWpaCallback *self,
     const struct HdiP2pGoNegotiationRequestParam* goNegotiationRequestParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGoNegotiationCompleted(struct IWpaCallback *self,
     const struct HdiP2pGoNegotiationCompletedParam* goNegotiationCompletedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventInvitationReceived(struct IWpaCallback *self,
     const struct HdiP2pInvitationReceivedParam* invitationReceivedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventInvitationResult(struct IWpaCallback *self,
     const struct HdiP2pInvitationResultParam* invitationResultParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGroupFormationSuccess(struct IWpaCallback *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGroupFormationFailure(struct IWpaCallback *self, const char* reason,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGroupStarted(struct IWpaCallback *self,
     const struct HdiP2pGroupStartedParam* groupStartedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventGroupRemoved(struct IWpaCallback *self,
     const struct HdiP2pGroupRemovedParam* groupRemovedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventProvisionDiscoveryCompleted(struct IWpaCallback *self,
     const struct HdiP2pProvisionDiscoveryCompletedParam* provisionDiscoveryCompletedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventFindStopped(struct IWpaCallback *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventServDiscReq(struct IWpaCallback *self,
     const struct HdiP2pServDiscReqInfoParam* servDiscReqInfoParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventServDiscResp(struct IWpaCallback *self,
     const struct HdiP2pServDiscRespParam* servDiscRespParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventStaConnectState(struct IWpaCallback *self,
     const struct HdiP2pStaConnectStateParam* staConnectStateParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventIfaceCreated(struct IWpaCallback *self,
     const struct HdiP2pIfaceCreatedParam* ifaceCreatedParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventAuthReject(struct IWpaCallback *self,
     const struct HdiWpaAuthRejectParam* authRejectParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackOnEventStaNotify(struct IWpaCallback *self, const char* notifyParam, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaCallbackGetVersion(struct IWpaCallback *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IWPA_CALLBACK_MAJOR_VERSION;
    *minorVer = IWPA_CALLBACK_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IWpaCallback *WpaCallbackServiceGet(void)
{
    struct WpaCallbackService *service = (struct WpaCallbackService *)OsalMemCalloc(sizeof(struct WpaCallbackService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc WpaCallbackService obj failed!", __func__);
        return NULL;
    }

    service->interface.OnEventDisconnected = WpaCallbackOnEventDisconnected;
    service->interface.OnEventConnected = WpaCallbackOnEventConnected;
    service->interface.OnEventBssidChanged = WpaCallbackOnEventBssidChanged;
    service->interface.OnEventStateChanged = WpaCallbackOnEventStateChanged;
    service->interface.OnEventTempDisabled = WpaCallbackOnEventTempDisabled;
    service->interface.OnEventAssociateReject = WpaCallbackOnEventAssociateReject;
    service->interface.OnEventWpsOverlap = WpaCallbackOnEventWpsOverlap;
    service->interface.OnEventWpsTimeout = WpaCallbackOnEventWpsTimeout;
    service->interface.OnEventScanResult = WpaCallbackOnEventScanResult;
    service->interface.OnEventDeviceFound = WpaCallbackOnEventDeviceFound;
    service->interface.OnEventDeviceLost = WpaCallbackOnEventDeviceLost;
    service->interface.OnEventGoNegotiationRequest = WpaCallbackOnEventGoNegotiationRequest;
    service->interface.OnEventGoNegotiationCompleted = WpaCallbackOnEventGoNegotiationCompleted;
    service->interface.OnEventInvitationReceived = WpaCallbackOnEventInvitationReceived;
    service->interface.OnEventInvitationResult = WpaCallbackOnEventInvitationResult;
    service->interface.OnEventGroupFormationSuccess = WpaCallbackOnEventGroupFormationSuccess;
    service->interface.OnEventGroupFormationFailure = WpaCallbackOnEventGroupFormationFailure;
    service->interface.OnEventGroupStarted = WpaCallbackOnEventGroupStarted;
    service->interface.OnEventGroupRemoved = WpaCallbackOnEventGroupRemoved;
    service->interface.OnEventProvisionDiscoveryCompleted = WpaCallbackOnEventProvisionDiscoveryCompleted;
    service->interface.OnEventFindStopped = WpaCallbackOnEventFindStopped;
    service->interface.OnEventServDiscReq = WpaCallbackOnEventServDiscReq;
    service->interface.OnEventServDiscResp = WpaCallbackOnEventServDiscResp;
    service->interface.OnEventStaConnectState = WpaCallbackOnEventStaConnectState;
    service->interface.OnEventIfaceCreated = WpaCallbackOnEventIfaceCreated;
    service->interface.OnEventAuthReject = WpaCallbackOnEventAuthReject;
    service->interface.OnEventStaNotify = WpaCallbackOnEventStaNotify;
    service->interface.GetVersion = WpaCallbackGetVersion;
    return &service->interface;
}

void WpaCallbackServiceRelease(struct IWpaCallback *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
