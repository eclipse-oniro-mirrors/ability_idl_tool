/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hdf_base.h>
#include <hdf_log.h>
#include <osal_mem.h>
#include <securec.h>
#include "v1_0/iwpa_interface.h"

#define HDF_LOG_TAG    wpa_interface_service

struct WpaInterfaceService {
    struct IWpaInterface interface;
};

static int32_t WpaInterfaceStart(struct IWpaInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceStop(struct IWpaInterface *self)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceAddWpaIface(struct IWpaInterface *self, const char* ifName, const char* confName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceRemoveWpaIface(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceScan(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceScanResult(struct IWpaInterface *self, const char* ifName, uint8_t* resultBuf,
     uint32_t* resultBufLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceAddNetwork(struct IWpaInterface *self, const char* ifName, int32_t* networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceRemoveNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceDisableNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSetNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId,
     const char* name, const char* value)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceListNetworks(struct IWpaInterface *self, const char* ifName,
     struct HdiWifiWpaNetworkInfo* networkInfo, uint32_t* networkInfoLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSelectNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceEnableNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceReconnect(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceDisconnect(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSaveConfig(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSetPowerSave(struct IWpaInterface *self, const char* ifName, int32_t enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceAutoConnect(struct IWpaInterface *self, const char* ifName, int32_t enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceWifiStatus(struct IWpaInterface *self, const char* ifName,
     struct HdiWpaCmdStatus* wifiStatus)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceWpsPbcMode(struct IWpaInterface *self, const char* ifName,
     const struct HdiWifiWpsParam* wpsParam)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceWpsPinMode(struct IWpaInterface *self, const char* ifName,
     const struct HdiWifiWpsParam* wpsParam, int32_t* pinCode)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceWpsCancel(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetCountryCode(struct IWpaInterface *self, const char* ifName, char* countrycode,
     uint32_t countrycodeLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId,
     const char* param, char* value, uint32_t valueLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceBlocklistClear(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSetSuspendMode(struct IWpaInterface *self, const char* ifName, int32_t mode)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceRegisterEventCallback(struct IWpaInterface *self, struct IWpaCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceUnregisterEventCallback(struct IWpaInterface *self, struct IWpaCallback* cbFunc,
     const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetConnectionCapabilities(struct IWpaInterface *self, const char* ifName,
     struct ConnectionCapabilities* connectionCap)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetScanSsid(struct IWpaInterface *self, const char* ifName, int32_t* enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetPskPassphrase(struct IWpaInterface *self, const char* ifName, char* psk, uint32_t pskLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetPsk(struct IWpaInterface *self, const char* ifName, uint8_t* psk, uint32_t* pskLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetWepKey(struct IWpaInterface *self, const char* ifName, int32_t keyIdx, uint8_t* wepKey,
     uint32_t* wepKeyLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetWepTxKeyIdx(struct IWpaInterface *self, const char* ifName, int32_t* keyIdx)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetRequirePmf(struct IWpaInterface *self, const char* ifName, int32_t* enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceSetCountryCode(struct IWpaInterface *self, const char* ifName, const char* countrycode)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetSsidPostfixName(struct IWpaInterface *self, const char* ifName, const char* name)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetWpsDeviceType(struct IWpaInterface *self, const char* ifName, const char* type)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetWpsConfigMethods(struct IWpaInterface *self, const char* ifName, const char* methods)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetGroupMaxIdle(struct IWpaInterface *self, const char* ifName, int32_t time)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetWfdEnable(struct IWpaInterface *self, const char* ifName, int32_t enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetPersistentReconnect(struct IWpaInterface *self, const char* ifName, int32_t status)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetWpsSecondaryDeviceType(struct IWpaInterface *self, const char* ifName,
     const char* type)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetupWpsPbc(struct IWpaInterface *self, const char* ifName, const char* address)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetupWpsPin(struct IWpaInterface *self, const char* ifName, const char* address,
     const char* pin, char* result, uint32_t resultLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetPowerSave(struct IWpaInterface *self, const char* ifName, int32_t enable)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetDeviceName(struct IWpaInterface *self, const char* ifName, const char* name)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetWfdDeviceConfig(struct IWpaInterface *self, const char* ifName, const char* config)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetRandomMac(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pStartFind(struct IWpaInterface *self, const char* ifName, int32_t timeout)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetExtListen(struct IWpaInterface *self, const char* ifName, int32_t enable,
     int32_t period, int32_t interval)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetListenChannel(struct IWpaInterface *self, const char* ifName, int32_t channel,
     int32_t regClass)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pProvisionDiscovery(struct IWpaInterface *self, const char* ifName, const char* peerBssid,
     int32_t mode)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pAddGroup(struct IWpaInterface *self, const char* ifName, int32_t isPersistent,
     int32_t networkId, int32_t freq)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pAddService(struct IWpaInterface *self, const char* ifName,
     const struct HdiP2pServiceInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pRemoveService(struct IWpaInterface *self, const char* ifName,
     const struct HdiP2pServiceInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pStopFind(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pFlush(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pFlushService(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pRemoveNetwork(struct IWpaInterface *self, const char* ifName, int32_t networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetGroupConfig(struct IWpaInterface *self, const char* ifName, int32_t networkId,
     const char* name, const char* value)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pInvite(struct IWpaInterface *self, const char* ifName, const char* peerBssid,
     const char* goBssid)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pReinvoke(struct IWpaInterface *self, const char* ifName, int32_t networkId,
     const char* bssid)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pGetDeviceAddress(struct IWpaInterface *self, const char* ifName, char* deviceAddress,
     uint32_t deviceAddressLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pReqServiceDiscovery(struct IWpaInterface *self, const char* ifName,
     const struct HdiP2pReqService* reqService, char* replyDisc, uint32_t replyDiscLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pCancelServiceDiscovery(struct IWpaInterface *self, const char* ifName, const char* id)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pRespServerDiscovery(struct IWpaInterface *self, const char* ifName,
     const struct HdiP2pServDiscReqInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pConnect(struct IWpaInterface *self, const char* ifName,
     const struct HdiP2pConnectInfo* info, char* replyPin, uint32_t replyPinLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pHid2dConnect(struct IWpaInterface *self, const char* ifName,
     const struct HdiHid2dConnectInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSetServDiscExternal(struct IWpaInterface *self, const char* ifName, int32_t mode)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pRemoveGroup(struct IWpaInterface *self, const char* ifName, const char* groupName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pCancelConnect(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pGetGroupConfig(struct IWpaInterface *self, const char* ifName, int32_t networkId,
     const char* param, char* value, uint32_t valueLen)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pAddNetwork(struct IWpaInterface *self, const char* ifName, int32_t* networkId)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pGetPeer(struct IWpaInterface *self, const char* ifName, const char* bssid,
     struct HdiP2pDeviceInfo* info)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pGetGroupCapability(struct IWpaInterface *self, const char* ifName, const char* bssid,
     int32_t* cap)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pListNetworks(struct IWpaInterface *self, const char* ifName,
     struct HdiP2pNetworkList* infoList)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceP2pSaveConfig(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceReassociate(struct IWpaInterface *self, const char* ifName)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceStaShellCmd(struct IWpaInterface *self, const char* ifName, const char* cmd)
{
    return HDF_SUCCESS;
}

static int32_t WpaInterfaceGetVersion(struct IWpaInterface *self, uint32_t* majorVer, uint32_t* minorVer)
{
    *majorVer = IWPA_INTERFACE_MAJOR_VERSION;
    *minorVer = IWPA_INTERFACE_MINOR_VERSION;
    return HDF_SUCCESS;
}

struct IWpaInterface *WpaInterfaceImplGetInstance(void)
{
    struct WpaInterfaceService *service = (struct WpaInterfaceService *)OsalMemCalloc(sizeof(struct WpaInterfaceService));
    if (service == NULL) {
        HDF_LOGE("%{public}s: malloc WpaInterfaceService obj failed!", __func__);
        return NULL;
    }

    service->interface.Start = WpaInterfaceStart;
    service->interface.Stop = WpaInterfaceStop;
    service->interface.AddWpaIface = WpaInterfaceAddWpaIface;
    service->interface.RemoveWpaIface = WpaInterfaceRemoveWpaIface;
    service->interface.Scan = WpaInterfaceScan;
    service->interface.ScanResult = WpaInterfaceScanResult;
    service->interface.AddNetwork = WpaInterfaceAddNetwork;
    service->interface.RemoveNetwork = WpaInterfaceRemoveNetwork;
    service->interface.DisableNetwork = WpaInterfaceDisableNetwork;
    service->interface.SetNetwork = WpaInterfaceSetNetwork;
    service->interface.ListNetworks = WpaInterfaceListNetworks;
    service->interface.SelectNetwork = WpaInterfaceSelectNetwork;
    service->interface.EnableNetwork = WpaInterfaceEnableNetwork;
    service->interface.Reconnect = WpaInterfaceReconnect;
    service->interface.Disconnect = WpaInterfaceDisconnect;
    service->interface.SaveConfig = WpaInterfaceSaveConfig;
    service->interface.SetPowerSave = WpaInterfaceSetPowerSave;
    service->interface.AutoConnect = WpaInterfaceAutoConnect;
    service->interface.WifiStatus = WpaInterfaceWifiStatus;
    service->interface.WpsPbcMode = WpaInterfaceWpsPbcMode;
    service->interface.WpsPinMode = WpaInterfaceWpsPinMode;
    service->interface.WpsCancel = WpaInterfaceWpsCancel;
    service->interface.GetCountryCode = WpaInterfaceGetCountryCode;
    service->interface.GetNetwork = WpaInterfaceGetNetwork;
    service->interface.BlocklistClear = WpaInterfaceBlocklistClear;
    service->interface.SetSuspendMode = WpaInterfaceSetSuspendMode;
    service->interface.RegisterEventCallback = WpaInterfaceRegisterEventCallback;
    service->interface.UnregisterEventCallback = WpaInterfaceUnregisterEventCallback;
    service->interface.GetConnectionCapabilities = WpaInterfaceGetConnectionCapabilities;
    service->interface.GetScanSsid = WpaInterfaceGetScanSsid;
    service->interface.GetPskPassphrase = WpaInterfaceGetPskPassphrase;
    service->interface.GetPsk = WpaInterfaceGetPsk;
    service->interface.GetWepKey = WpaInterfaceGetWepKey;
    service->interface.GetWepTxKeyIdx = WpaInterfaceGetWepTxKeyIdx;
    service->interface.GetRequirePmf = WpaInterfaceGetRequirePmf;
    service->interface.SetCountryCode = WpaInterfaceSetCountryCode;
    service->interface.P2pSetSsidPostfixName = WpaInterfaceP2pSetSsidPostfixName;
    service->interface.P2pSetWpsDeviceType = WpaInterfaceP2pSetWpsDeviceType;
    service->interface.P2pSetWpsConfigMethods = WpaInterfaceP2pSetWpsConfigMethods;
    service->interface.P2pSetGroupMaxIdle = WpaInterfaceP2pSetGroupMaxIdle;
    service->interface.P2pSetWfdEnable = WpaInterfaceP2pSetWfdEnable;
    service->interface.P2pSetPersistentReconnect = WpaInterfaceP2pSetPersistentReconnect;
    service->interface.P2pSetWpsSecondaryDeviceType = WpaInterfaceP2pSetWpsSecondaryDeviceType;
    service->interface.P2pSetupWpsPbc = WpaInterfaceP2pSetupWpsPbc;
    service->interface.P2pSetupWpsPin = WpaInterfaceP2pSetupWpsPin;
    service->interface.P2pSetPowerSave = WpaInterfaceP2pSetPowerSave;
    service->interface.P2pSetDeviceName = WpaInterfaceP2pSetDeviceName;
    service->interface.P2pSetWfdDeviceConfig = WpaInterfaceP2pSetWfdDeviceConfig;
    service->interface.P2pSetRandomMac = WpaInterfaceP2pSetRandomMac;
    service->interface.P2pStartFind = WpaInterfaceP2pStartFind;
    service->interface.P2pSetExtListen = WpaInterfaceP2pSetExtListen;
    service->interface.P2pSetListenChannel = WpaInterfaceP2pSetListenChannel;
    service->interface.P2pProvisionDiscovery = WpaInterfaceP2pProvisionDiscovery;
    service->interface.P2pAddGroup = WpaInterfaceP2pAddGroup;
    service->interface.P2pAddService = WpaInterfaceP2pAddService;
    service->interface.P2pRemoveService = WpaInterfaceP2pRemoveService;
    service->interface.P2pStopFind = WpaInterfaceP2pStopFind;
    service->interface.P2pFlush = WpaInterfaceP2pFlush;
    service->interface.P2pFlushService = WpaInterfaceP2pFlushService;
    service->interface.P2pRemoveNetwork = WpaInterfaceP2pRemoveNetwork;
    service->interface.P2pSetGroupConfig = WpaInterfaceP2pSetGroupConfig;
    service->interface.P2pInvite = WpaInterfaceP2pInvite;
    service->interface.P2pReinvoke = WpaInterfaceP2pReinvoke;
    service->interface.P2pGetDeviceAddress = WpaInterfaceP2pGetDeviceAddress;
    service->interface.P2pReqServiceDiscovery = WpaInterfaceP2pReqServiceDiscovery;
    service->interface.P2pCancelServiceDiscovery = WpaInterfaceP2pCancelServiceDiscovery;
    service->interface.P2pRespServerDiscovery = WpaInterfaceP2pRespServerDiscovery;
    service->interface.P2pConnect = WpaInterfaceP2pConnect;
    service->interface.P2pHid2dConnect = WpaInterfaceP2pHid2dConnect;
    service->interface.P2pSetServDiscExternal = WpaInterfaceP2pSetServDiscExternal;
    service->interface.P2pRemoveGroup = WpaInterfaceP2pRemoveGroup;
    service->interface.P2pCancelConnect = WpaInterfaceP2pCancelConnect;
    service->interface.P2pGetGroupConfig = WpaInterfaceP2pGetGroupConfig;
    service->interface.P2pAddNetwork = WpaInterfaceP2pAddNetwork;
    service->interface.P2pGetPeer = WpaInterfaceP2pGetPeer;
    service->interface.P2pGetGroupCapability = WpaInterfaceP2pGetGroupCapability;
    service->interface.P2pListNetworks = WpaInterfaceP2pListNetworks;
    service->interface.P2pSaveConfig = WpaInterfaceP2pSaveConfig;
    service->interface.Reassociate = WpaInterfaceReassociate;
    service->interface.StaShellCmd = WpaInterfaceStaShellCmd;
    service->interface.GetVersion = WpaInterfaceGetVersion;
    return &service->interface;
}

void WpaInterfaceImplRelease(struct IWpaInterface *instance)
{
    if (instance == NULL) {
        return;
    }
    OsalMemFree(instance);
}
