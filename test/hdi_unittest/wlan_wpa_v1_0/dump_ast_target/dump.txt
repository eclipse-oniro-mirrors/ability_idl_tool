AST[name: IWpaInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_wpa_v1_0/foo/wlan/wpa/v1_0/IWpaInterface.idl]
package ohos.hdi.wlan.wpa.v1_0;

import ohos.hdi.wlan.wpa.v1_0.IWpaCallback;
import ohos.hdi.wlan.wpa.v1_0.WpaTypes;

[mini, lite, full] interface IWpaInterface {
    [mini, lite, full] Start();

    [mini, lite, full] Stop();

    [mini, lite, full] AddWpaIface(
      [in] std::string ifName,
      [in] std::string confName);

    [mini, lite, full] RemoveWpaIface(
      [in] std::string ifName);

    [mini, lite, full] Scan(
      [in] std::string ifName);

    [mini, lite, full] ScanResult(
      [in] std::string ifName,
      [out] unsigned char[] resultBuf);

    [mini, lite, full] AddNetwork(
      [in] std::string ifName,
      [out] int networkId);

    [mini, lite, full] RemoveNetwork(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] DisableNetwork(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] SetNetwork(
      [in] std::string ifName,
      [in] int networkId,
      [in] std::string name,
      [in] std::string value);

    [mini, lite, full] ListNetworks(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.wpa.v1_0.HdiWifiWpaNetworkInfo[] networkInfo);

    [mini, lite, full] SelectNetwork(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] EnableNetwork(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] Reconnect(
      [in] std::string ifName);

    [mini, lite, full] Disconnect(
      [in] std::string ifName);

    [mini, lite, full] SaveConfig(
      [in] std::string ifName);

    [mini, lite, full] SetPowerSave(
      [in] std::string ifName,
      [in] int enable);

    [mini, lite, full] AutoConnect(
      [in] std::string ifName,
      [in] int enable);

    [mini, lite, full] WifiStatus(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.wpa.v1_0.HdiWpaCmdStatus wifiStatus);

    [mini, lite, full] WpsPbcMode(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWifiWpsParam wpsParam);

    [mini, lite, full] WpsPinMode(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWifiWpsParam wpsParam,
      [out] int pinCode);

    [mini, lite, full] WpsCancel(
      [in] std::string ifName);

    [mini, lite, full] GetCountryCode(
      [in] std::string ifName,
      [out] std::string countrycode);

    [mini, lite, full] GetNetwork(
      [in] std::string ifName,
      [in] int networkId,
      [in] std::string param,
      [out] std::string value);

    [mini, lite, full] BlocklistClear(
      [in] std::string ifName);

    [mini, lite, full] SetSuspendMode(
      [in] std::string ifName,
      [in] int mode);

    [mini, lite, full] RegisterEventCallback(
      [in] ohos.hdi.wlan.wpa.v1_0.IWpaCallback cbFunc,
      [in] std::string ifName);

    [mini, lite, full] UnregisterEventCallback(
      [in] ohos.hdi.wlan.wpa.v1_0.IWpaCallback cbFunc,
      [in] std::string ifName);

    [mini, lite, full] GetConnectionCapabilities(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.wpa.v1_0.ConnectionCapabilities connectionCap);

    [mini, lite, full] GetScanSsid(
      [in] std::string ifName,
      [out] int enable);

    [mini, lite, full] GetPskPassphrase(
      [in] std::string ifName,
      [out] std::string psk);

    [mini, lite, full] GetPsk(
      [in] std::string ifName,
      [out] unsigned char[] psk);

    [mini, lite, full] GetWepKey(
      [in] std::string ifName,
      [in] int keyIdx,
      [out] unsigned char[] wepKey);

    [mini, lite, full] GetWepTxKeyIdx(
      [in] std::string ifName,
      [out] int keyIdx);

    [mini, lite, full] GetRequirePmf(
      [in] std::string ifName,
      [out] int enable);

    [mini, lite, full] SetCountryCode(
      [in] std::string ifName,
      [in] std::string countrycode);

    [mini, lite, full] P2pSetSsidPostfixName(
      [in] std::string ifName,
      [in] std::string name);

    [mini, lite, full] P2pSetWpsDeviceType(
      [in] std::string ifName,
      [in] std::string type);

    [mini, lite, full] P2pSetWpsConfigMethods(
      [in] std::string ifName,
      [in] std::string methods);

    [mini, lite, full] P2pSetGroupMaxIdle(
      [in] std::string ifName,
      [in] int time);

    [mini, lite, full] P2pSetWfdEnable(
      [in] std::string ifName,
      [in] int enable);

    [mini, lite, full] P2pSetPersistentReconnect(
      [in] std::string ifName,
      [in] int status);

    [mini, lite, full] P2pSetWpsSecondaryDeviceType(
      [in] std::string ifName,
      [in] std::string type);

    [mini, lite, full] P2pSetupWpsPbc(
      [in] std::string ifName,
      [in] std::string address);

    [mini, lite, full] P2pSetupWpsPin(
      [in] std::string ifName,
      [in] std::string address,
      [in] std::string pin,
      [out] std::string result);

    [mini, lite, full] P2pSetPowerSave(
      [in] std::string ifName,
      [in] int enable);

    [mini, lite, full] P2pSetDeviceName(
      [in] std::string ifName,
      [in] std::string name);

    [mini, lite, full] P2pSetWfdDeviceConfig(
      [in] std::string ifName,
      [in] std::string config);

    [mini, lite, full] P2pSetRandomMac(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] P2pStartFind(
      [in] std::string ifName,
      [in] int timeout);

    [mini, lite, full] P2pSetExtListen(
      [in] std::string ifName,
      [in] int enable,
      [in] int period,
      [in] int interval);

    [mini, lite, full] P2pSetListenChannel(
      [in] std::string ifName,
      [in] int channel,
      [in] int regClass);

    [mini, lite, full] P2pProvisionDiscovery(
      [in] std::string ifName,
      [in] std::string peerBssid,
      [in] int mode);

    [mini, lite, full] P2pAddGroup(
      [in] std::string ifName,
      [in] int isPersistent,
      [in] int networkId,
      [in] int freq);

    [mini, lite, full] P2pAddService(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pServiceInfo info);

    [mini, lite, full] P2pRemoveService(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pServiceInfo info);

    [mini, lite, full] P2pStopFind(
      [in] std::string ifName);

    [mini, lite, full] P2pFlush(
      [in] std::string ifName);

    [mini, lite, full] P2pFlushService(
      [in] std::string ifName);

    [mini, lite, full] P2pRemoveNetwork(
      [in] std::string ifName,
      [in] int networkId);

    [mini, lite, full] P2pSetGroupConfig(
      [in] std::string ifName,
      [in] int networkId,
      [in] std::string name,
      [in] std::string value);

    [mini, lite, full] P2pInvite(
      [in] std::string ifName,
      [in] std::string peerBssid,
      [in] std::string goBssid);

    [mini, lite, full] P2pReinvoke(
      [in] std::string ifName,
      [in] int networkId,
      [in] std::string bssid);

    [mini, lite, full] P2pGetDeviceAddress(
      [in] std::string ifName,
      [out] std::string deviceAddress);

    [mini, lite, full] P2pReqServiceDiscovery(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pReqService reqService,
      [out] std::string replyDisc);

    [mini, lite, full] P2pCancelServiceDiscovery(
      [in] std::string ifName,
      [in] std::string id);

    [mini, lite, full] P2pRespServerDiscovery(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pServDiscReqInfo info);

    [mini, lite, full] P2pConnect(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pConnectInfo info,
      [out] std::string replyPin);

    [mini, lite, full] P2pHid2dConnect(
      [in] std::string ifName,
      [in] ohos.hdi.wlan.wpa.v1_0.HdiHid2dConnectInfo info);

    [mini, lite, full] P2pSetServDiscExternal(
      [in] std::string ifName,
      [in] int mode);

    [mini, lite, full] P2pRemoveGroup(
      [in] std::string ifName,
      [in] std::string groupName);

    [mini, lite, full] P2pCancelConnect(
      [in] std::string ifName);

    [mini, lite, full] P2pGetGroupConfig(
      [in] std::string ifName,
      [in] int networkId,
      [in] std::string param,
      [out] std::string value);

    [mini, lite, full] P2pAddNetwork(
      [in] std::string ifName,
      [out] int networkId);

    [mini, lite, full] P2pGetPeer(
      [in] std::string ifName,
      [in] std::string bssid,
      [out] ohos.hdi.wlan.wpa.v1_0.HdiP2pDeviceInfo info);

    [mini, lite, full] P2pGetGroupCapability(
      [in] std::string ifName,
      [in] std::string bssid,
      [out] int cap);

    [mini, lite, full] P2pListNetworks(
      [in] std::string ifName,
      [out] ohos.hdi.wlan.wpa.v1_0.HdiP2pNetworkList infoList);

    [mini, lite, full] P2pSaveConfig(
      [in] std::string ifName);

    [mini, lite, full] Reassociate(
      [in] std::string ifName);

    [mini, lite, full] StaShellCmd(
      [in] std::string ifName,
      [in] std::string cmd);
}


AST[name: IWpaCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_wpa_v1_0/foo/wlan/wpa/v1_0/IWpaCallback.idl]
package ohos.hdi.wlan.wpa.v1_0;

import ohos.hdi.wlan.wpa.v1_0.WpaTypes;

[mini, lite, full, callback] interface IWpaCallback {
    [mini, lite, full, callback] OnEventDisconnected(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaDisconnectParam disconnectParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventConnected(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaConnectParam connectParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventBssidChanged(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaBssidChangedParam bssidChangedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventStateChanged(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaStateChangedParam statechangedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventTempDisabled(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaTempDisabledParam tempDisabledParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventAssociateReject(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaAssociateRejectParam associateRejectParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventWpsOverlap(
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventWpsTimeout(
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventScanResult(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaRecvScanResultParam recvScanResultParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventDeviceFound(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pDeviceInfoParam deviceInfoParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventDeviceLost(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pDeviceLostParam deviceLostParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGoNegotiationRequest(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pGoNegotiationRequestParam goNegotiationRequestParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGoNegotiationCompleted(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pGoNegotiationCompletedParam goNegotiationCompletedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventInvitationReceived(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pInvitationReceivedParam invitationReceivedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventInvitationResult(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pInvitationResultParam invitationResultParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGroupFormationSuccess(
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGroupFormationFailure(
      [in] std::string reason,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGroupStarted(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pGroupStartedParam groupStartedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventGroupRemoved(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pGroupRemovedParam groupRemovedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventProvisionDiscoveryCompleted(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pProvisionDiscoveryCompletedParam provisionDiscoveryCompletedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventFindStopped(
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventServDiscReq(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pServDiscReqInfoParam servDiscReqInfoParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventServDiscResp(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pServDiscRespParam servDiscRespParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventStaConnectState(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pStaConnectStateParam staConnectStateParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventIfaceCreated(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiP2pIfaceCreatedParam ifaceCreatedParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventAuthReject(
      [in] ohos.hdi.wlan.wpa.v1_0.HdiWpaAuthRejectParam authRejectParam,
      [in] std::string ifName);

    [mini, lite, full, callback] OnEventStaNotify(
      [in] std::string notifyParam,
      [in] std::string ifName);
}


AST[name: WpaTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/wlan_wpa_v1_0/foo/wlan/wpa/v1_0/WpaTypes.idl]
package ohos.hdi.wlan.wpa.v1_0;

[mini, lite, full] struct HdiFeatureInfo {
  std::string ifName;
  int type;
};

[mini, lite, full] struct HdiWifiStatus {
  unsigned char[] bssid;
  int freq;
  std::string ssid;
  int ssidLen;
  std::string keyMgmt;
  int keyMgmtLen;
  unsigned char[] address;
};

[mini, lite, full] struct HdiWifiWpaNetworkInfo {
  int id;
  unsigned char[] ssid;
  unsigned char[] bssid;
  unsigned char[] flags;
};

[mini, lite, full] struct HdiWifiWpsParam {
  int anyFlag;
  int multiAp;
  unsigned char[] bssid;
  unsigned char[] pinCode;
};

[mini, lite, full] struct HdiWpaCmdStatus {
  unsigned char[] bssid;
  int freq;
  unsigned char[] ssid;
  int id;
  unsigned char[] keyMgmt;
  unsigned char[] address;
};

[mini, lite, full] struct HdiWpaDisconnectParam {
  unsigned char[] bssid;
  int reasonCode;
  int locallyGenerated;
};

[mini, lite, full] struct HdiWpaConnectParam {
  unsigned char[] bssid;
  int networkId;
};

[mini, lite, full] struct HdiWpaBssidChangedParam {
  unsigned char[] bssid;
  unsigned char[] reason;
};

[mini, lite, full] struct HdiWpaStateChangedParam {
  int status;
  unsigned char[] bssid;
  int networkId;
  unsigned char[] ssid;
};

[mini, lite, full] struct HdiWpaTempDisabledParam {
  int networkId;
  unsigned char[] ssid;
  int authFailures;
  int duration;
  unsigned char[] reason;
};

[mini, lite, full] struct HdiWpaAssociateRejectParam {
  unsigned char[] bssid;
  int statusCode;
  int timeOut;
};

[mini, lite, full] struct HdiWpaRecvScanResultParam {
  unsigned int scanId;
};

[mini, lite, full] enum WifiTechnology : int {
  UNKNOWN_TECHNOLOGY = 0,
  LEGACY = 1,
  HT = 2,
  VHT = 3,
  HE = 4,
};

[mini, lite, full] enum WifiChannelWidthInMhz : int {
  WIDTH_20 = 0,
  WIDTH_40 = 1,
  WIDTH_80 = 2,
  WIDTH_160 = 3,
  WIDTH_80P80 = 4,
  WIDTH_5 = 5,
  WIDTH_10 = 6,
  WIDTH_INVALID = -1,
};

[mini, lite, full] enum LegacyMode : int {
  UNKNOWN_MODE = 0,
  A_MODE = 1,
  B_MODE = 2,
  G_MODE = 3,
};

[mini, lite, full] struct ConnectionCapabilities {
  ohos.hdi.wlan.wpa.v1_0.WifiTechnology technology;
  ohos.hdi.wlan.wpa.v1_0.WifiChannelWidthInMhz channelBandwidth;
  int maxNumberTxSpatialStreams;
  int maxNumberRxSpatialStreams;
  ohos.hdi.wlan.wpa.v1_0.LegacyMode legacyMode;
};

[mini, lite, full] struct HdiP2pNetworkInfo {
  int id;
  unsigned char[] ssid;
  unsigned char[] bssid;
  unsigned char[] flags;
};

[mini, lite, full] struct HdiP2pNetworkList {
  int infoNum;
  ohos.hdi.wlan.wpa.v1_0.HdiP2pNetworkInfo[] infos;
};

[mini, lite, full] struct HdiP2pDeviceInfo {
  unsigned char[] srcAddress;
  unsigned char[] p2pDeviceAddress;
  unsigned char[] primaryDeviceType;
  unsigned char[] deviceName;
  int configMethods;
  int deviceCapabilities;
  int groupCapabilities;
  unsigned char[] wfdDeviceInfo;
  unsigned int wfdLength;
  unsigned char[] operSsid;
};

[mini, lite, full] struct HdiP2pServiceInfo {
  int mode;
  int version;
  unsigned char[] name;
  unsigned char[] query;
  unsigned char[] resp;
};

[mini, lite, full] struct HdiP2pReqService {
  unsigned char[] bssid;
  unsigned char[] msg;
};

[mini, lite, full] struct HdiP2pServDiscReqInfo {
  int freq;
  int dialogToken;
  int updateIndic;
  unsigned char[] mac;
  unsigned char[] tlvs;
};

[mini, lite, full] struct HdiHid2dConnectInfo {
  unsigned char[] ssid;
  unsigned char[] bssid;
  unsigned char[] passphrase;
  int frequency;
};

[mini, lite, full] struct HdiP2pConnectInfo {
  int persistent;
  int mode;
  int goIntent;
  int provdisc;
  unsigned char[] peerDevAddr;
  unsigned char[] pin;
};

[mini, lite, full] struct HdiP2pDeviceInfoParam {
  unsigned char[] srcAddress;
  unsigned char[] p2pDeviceAddress;
  unsigned char[] primaryDeviceType;
  unsigned char[] deviceName;
  int configMethods;
  int deviceCapabilities;
  int groupCapabilities;
  unsigned char[] wfdDeviceInfo;
  unsigned int wfdLength;
  unsigned char[] operSsid;
};

[mini, lite, full] struct HdiP2pDeviceLostParam {
  unsigned char[] p2pDeviceAddress;
  int networkId;
};

[mini, lite, full] struct HdiP2pGoNegotiationRequestParam {
  unsigned char[] srcAddress;
  int passwordId;
};

[mini, lite, full] struct HdiP2pGoNegotiationCompletedParam {
  int status;
};

[mini, lite, full] struct HdiP2pInvitationReceivedParam {
  int type;
  int persistentNetworkId;
  int operatingFrequency;
  unsigned char[] srcAddress;
  unsigned char[] goDeviceAddress;
  unsigned char[] bssid;
};

[mini, lite, full] struct HdiP2pInvitationResultParam {
  int status;
  unsigned char[] bssid;
};

[mini, lite, full] struct HdiP2pGroupStartedParam {
  int isGo;
  int isPersistent;
  int frequency;
  unsigned char[] groupIfName;
  unsigned char[] ssid;
  unsigned char[] psk;
  unsigned char[] passphrase;
  unsigned char[] goDeviceAddress;
};

[mini, lite, full] struct HdiP2pGroupRemovedParam {
  int isGo;
  unsigned char[] groupIfName;
};

[mini, lite, full] struct HdiP2pProvisionDiscoveryCompletedParam {
  int isRequest;
  int provDiscStatusCode;
  int configMethods;
  unsigned char[] p2pDeviceAddress;
  unsigned char[] generatedPin;
};

[mini, lite, full] struct HdiP2pServDiscReqInfoParam {
  int freq;
  int dialogToken;
  int updateIndic;
  unsigned char[] mac;
  unsigned char[] tlvs;
};

[mini, lite, full] struct HdiP2pServDiscRespParam {
  int updateIndicator;
  unsigned char[] srcAddress;
  unsigned char[] tlvs;
};

[mini, lite, full] struct HdiP2pStaConnectStateParam {
  int state;
  unsigned char[] srcAddress;
  unsigned char[] p2pDeviceAddress;
};

[mini, lite, full] struct HdiP2pIfaceCreatedParam {
  int isGo;
};

[mini, lite, full] struct HdiWpaAuthRejectParam {
  unsigned char[] bssid;
  unsigned short authType;
  unsigned short authTransaction;
  unsigned short statusCode;
};


