/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/cellfence_interface_stub.h"
#include <hdf_base.h>
#include <hdf_core_log.h>
#include <hdi_support.h>
#include <iproxy_broker.h>
#include <securec.h>
#include <string_ex.h>
#include "location/lpfence/cellfence/v1_0/cellfence_callback_proxy.h"

#define HDF_LOG_TAG    cellfence_interface_stub

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Cellfence {
namespace V1_0 {
template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data);


template<typename ElementType>
static bool ReadPodArray(MessageParcel &parcel, std::vector<ElementType> &data)
{
    data.clear();
    uint32_t size = 0;
    if (!parcel.ReadUint32(size)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return false;
    }

    if (size == 0) {
        return true;
    }
    const ElementType *dataPtr = reinterpret_cast<const ElementType*>(parcel.ReadUnpadBuffer(sizeof(ElementType) * size));
    if (dataPtr == nullptr) {
        HDF_LOGI("%{public}s: failed to read data", __func__);
        return false;
    }
    data.assign(dataPtr, dataPtr + size);
    return true;
}

sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::Get(bool isStub)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::Get("cellfence_interface_service", isStub);
}

sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::Get(const std::string& serviceName, bool isStub)
{
    if (!isStub) {
        return nullptr;
    }
    std::string desc = Str16ToStr8(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor());
    void *impl = LoadHdiImpl(desc.c_str(), serviceName == "cellfence_interface_service" ? "service" : serviceName.c_str());
    if (impl == nullptr) {
        HDF_LOGE("failed to load hdi impl %{public}s", desc.c_str());
        return nullptr;
    }
    return reinterpret_cast<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface *>(impl);
}


OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStub(const sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> &impl)
    : IPCObjectStub(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()), impl_(impl)
{
}

OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::~CellfenceInterfaceStub()
{
    ObjectCollector::GetInstance().RemoveObject(impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::OnRemoteRequest(uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option)
{
    switch (code) {
        case CMD_CELLFENCE_INTERFACE_GET_VERSION:
            return CellfenceInterfaceStubGetVersion(data, reply, option);
        case CMD_CELLFENCE_INTERFACE_REGISTER_CELLFENCE_CALLBACK:
            return CellfenceInterfaceStubRegisterCellfenceCallback(data, reply, option);
        case CMD_CELLFENCE_INTERFACE_UNREGISTER_CELLFENCE_CALLBACK:
            return CellfenceInterfaceStubUnregisterCellfenceCallback(data, reply, option);
        case CMD_CELLFENCE_INTERFACE_ADD_CELLFENCES:
            return CellfenceInterfaceStubAddCellfences(data, reply, option);
        case CMD_CELLFENCE_INTERFACE_REMOVE_CELLFENCES:
            return CellfenceInterfaceStubRemoveCellfences(data, reply, option);
        case CMD_CELLFENCE_INTERFACE_GET_CELLFENCE_SIZE:
            return CellfenceInterfaceStubGetCellfenceSize(data, reply, option);
        default: {
            HDF_LOGE("%{public}s: cmd %{public}d is not supported", __func__, code);
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
        }
    }
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRegisterCellfenceCallback(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRegisterCellfenceCallback_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubUnregisterCellfenceCallback(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubUnregisterCellfenceCallback_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubAddCellfences(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubAddCellfences_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRemoveCellfences(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRemoveCellfences_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetCellfenceSize(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetCellfenceSize_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetVersion(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetVersion_(cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption, impl_);
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRegisterCellfenceCallback_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = cellfenceInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->RegisterCellfenceCallback(callbackObj);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubUnregisterCellfenceCallback_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback> callbackObj;
    sptr<IRemoteObject> callbackObjRemote = cellfenceInterfaceData.ReadRemoteObject();
    if (callbackObjRemote == nullptr) {
        HDF_LOGE("%{public}s: read an invalid remote object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    callbackObj = new OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceCallbackProxy(callbackObjRemote);
    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: failed to create interface object", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->UnregisterCellfenceCallback(callbackObj);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubAddCellfences_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequest> cellfence;
    uint32_t cellfenceSize = 0;
    if (!cellfenceInterfaceData.ReadUint32(cellfenceSize)) {
        HDF_LOGE("%{public}s: failed to read size", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    HDI_CHECK_VALUE_RETURN(cellfenceSize, >, HDI_BUFF_MAX_SIZE / sizeof(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequest), HDF_ERR_INVALID_PARAM);
    cellfence.clear();
    cellfence.reserve(cellfenceSize);
    for (uint32_t i0 = 0; i0 < cellfenceSize; ++i0) {
        OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequest value0;
        if (!CellfenceRequestBlockUnmarshalling(cellfenceInterfaceData, value0)) {
            HDF_LOGE("%{public}s: read value0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
        cellfence.push_back(value0);
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->AddCellfences(cellfence);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubRemoveCellfences_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    std::vector<int32_t> cellfenceId;
    if (!ReadPodArray(cellfenceInterfaceData, cellfenceId)) {
        HDF_LOGE("%{public}s: failed to read cellfenceId", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->RemoveCellfences(cellfenceId);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetCellfenceSize_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->GetCellfenceSize();
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceStub::CellfenceInterfaceStubGetVersion_(MessageParcel& cellfenceInterfaceData, MessageParcel& cellfenceInterfaceReply, MessageOption& cellfenceInterfaceOption, sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> impl)
{
    if (cellfenceInterfaceData.ReadInterfaceToken() != OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor()) {
        HDF_LOGE("%{public}s: interface token check failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    uint32_t majorVer = 0;

    uint32_t minorVer = 0;

    if (impl == nullptr) {
        HDF_LOGE("%{public}s: impl is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    int32_t cellfenceInterfaceRet = impl->GetVersion(majorVer, minorVer);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    if (!cellfenceInterfaceReply.WriteUint32(majorVer)) {
        HDF_LOGE("%{public}s: write majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellfenceInterfaceReply.WriteUint32(minorVer)) {
        HDF_LOGE("%{public}s: write minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return cellfenceInterfaceRet;
}
} // V1_0
} // Cellfence
} // Lpfence
} // Location
} // HDI
} // OHOS
