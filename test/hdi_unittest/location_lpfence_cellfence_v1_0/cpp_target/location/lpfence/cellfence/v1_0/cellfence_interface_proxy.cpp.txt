/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/cellfence_interface_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <iservmgr_hdi.h>
#include <message_option.h>
#include <message_parcel.h>
#include <object_collector.h>
#include <string_ex.h>

#define HDF_LOG_TAG    cellfence_interface_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Lpfence {
namespace Cellfence {
namespace V1_0 {

template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data);

sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::Get(bool isStub)
{
    return ICellfenceInterface::Get("cellfence_interface_service", isStub);
}

sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface> OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::Get(const std::string& serviceName, bool isStub)
{
    if (isStub) {
        std::string desc = Str16ToStr8(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor());
        void *impl = LoadHdiImpl(desc.c_str(), serviceName == "cellfence_interface_service" ? "service" : serviceName.c_str());
        if (impl == nullptr) {
            HDF_LOGE("failed to load hdi impl %{public}s", desc.data());
            return nullptr;
        }
        return reinterpret_cast<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface *>(impl);
    }

    using namespace OHOS::HDI::ServiceManager::V1_0;
    auto servMgr = IServiceManager::Get();
    if (servMgr == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return nullptr;
    }

    sptr<IRemoteObject> remote = servMgr->GetService(serviceName.c_str());
    if (remote == nullptr) {
        HDF_LOGE("%{public}s:get remote object failed!", __func__);
        return nullptr;
    }

    sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy> proxy = new OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy(remote);
    if (proxy == nullptr) {
        HDF_LOGE("%{public}s:iface_cast failed!", __func__);
        return nullptr;
    }

    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(servMgr);
    proxy->deathRecipient_ = new OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::IServiceManagerDeathRecipient(proxy);
    proxy->servMgr_->AddDeathRecipient(proxy->deathRecipient_);
    proxy->isReconnected_ = false;
    proxy->serviceName_ = serviceName;
    uint32_t serMajorVer = 0;
    uint32_t serMinorVer = 0;
    int32_t cellfenceInterfaceRet = proxy->GetVersion(serMajorVer, serMinorVer);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s:get version failed!", __func__);
        return nullptr;
    }

    if (serMajorVer != 1) {
        HDF_LOGE("%{public}s:check version failed! version of service:%u.%u, version of client:1.0", __func__, serMajorVer, serMinorVer);
        return nullptr;
    }

    return proxy;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::Reconnect(
    sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy> proxy) 
{
    if (proxy == nullptr) {
        HDF_LOGW("Reconnect failed : input proxy is null");
        return HDF_FAILURE;
    }
    using namespace OHOS::HDI::ServiceManager::V1_0;
    proxy->isReconnected_ = false;
    auto iServMgr = IServiceManager::Get();
    if (iServMgr == nullptr) {
        HDF_LOGW("Reconnect failed : iServMgr is null");
        return HDF_FAILURE;
    };
    proxy->reconnectRemote_ = iServMgr->GetService(proxy->serviceName_.c_str());
    if (proxy->reconnectRemote_ == nullptr) {
        HDF_LOGW("Reconnect failed : reconnectRemote_ is null");
        return HDF_FAILURE;
    }
    proxy->servMgr_ = OHOS::HDI::hdi_objcast<IServiceManager>(iServMgr);
    if (proxy->servMgr_ == nullptr) {
        HDF_LOGE("%{public}s:get IServiceManager failed!", __func__);
        return HDF_FAILURE;
    }
    proxy->servMgr_->AddDeathRecipient(
        new OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::IServiceManagerDeathRecipient(proxy));
    proxy->isReconnected_ = true;
    return HDF_SUCCESS;
}


template<typename ElementType>
static bool WritePodArray(MessageParcel &parcel, const std::vector<ElementType> &data)
{
    if (!parcel.WriteUint32(data.size())) {
        HDF_LOGE("%{public}s: failed to write data size", __func__);
        return false;
    }
    if (data.empty()) {
        return true;
    }
    if (!parcel.WriteUnpadBuffer((const void*)data.data(), sizeof(ElementType) * data.size())) {
        HDF_LOGE("%{public}s: failed to write array", __func__);
        return false;
    }
    return true;
}
int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RegisterCellfenceCallback(const sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback>& callbackObj)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RegisterCellfenceCallback_(callbackObj, GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::UnregisterCellfenceCallback(const sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback>& callbackObj)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::UnregisterCellfenceCallback_(callbackObj, GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::AddCellfences(const std::vector<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequest>& cellfence)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::AddCellfences_(cellfence, GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RemoveCellfences(const std::vector<int32_t>& cellfenceId)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RemoveCellfences_(cellfenceId, GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetCellfenceSize()
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetCellfenceSize_(GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetVersion(uint32_t& majorVer,
     uint32_t& minorVer)
{
    return OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetVersion_(majorVer, minorVer, GetCurrentRemote());
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RegisterCellfenceCallback_(const sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback>& callbackObj, const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: parameter callbackObj is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellfenceInterfaceData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(callbackObj, OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write callbackObj failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_REGISTER_CELLFENCE_CALLBACK, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::UnregisterCellfenceCallback_(const sptr<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback>& callbackObj, const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (callbackObj == nullptr) {
        HDF_LOGE("%{public}s: parameter callbackObj is nullptr!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellfenceInterfaceData.WriteRemoteObject(OHOS::HDI::ObjectCollector::GetInstance().GetOrNewObject(callbackObj, OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceCallback::GetDescriptor()))) {
        HDF_LOGE("%{public}s: write callbackObj failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_UNREGISTER_CELLFENCE_CALLBACK, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::AddCellfences_(const std::vector<OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequest>& cellfence, const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellfenceInterfaceData.WriteUint32(cellfence.size())) {
        HDF_LOGE("%{public}s: write cellfence size failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }
    for (const auto& it0 : cellfence) {
        if (!OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceRequestBlockMarshalling(cellfenceInterfaceData, it0)) {
            HDF_LOGE("%{public}s: write it0 failed!", __func__);
            return HDF_ERR_INVALID_PARAM;
        }
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_ADD_CELLFENCES, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::RemoveCellfences_(const std::vector<int32_t>& cellfenceId, const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!WritePodArray(cellfenceInterfaceData, cellfenceId)) {
        HDF_LOGE("%{public}s: failed to write cellfenceId", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_REMOVE_CELLFENCES, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetCellfenceSize_(const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_GET_CELLFENCE_SIZE, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    return cellfenceInterfaceRet;
}

int32_t OHOS::HDI::Location::Lpfence::Cellfence::V1_0::CellfenceInterfaceProxy::GetVersion_(uint32_t& majorVer,
     uint32_t& minorVer, const sptr<IRemoteObject> remote)
{
    MessageParcel cellfenceInterfaceData;
    MessageParcel cellfenceInterfaceReply;
    MessageOption cellfenceInterfaceOption(MessageOption::TF_SYNC);

    if (!cellfenceInterfaceData.WriteInterfaceToken(OHOS::HDI::Location::Lpfence::Cellfence::V1_0::ICellfenceInterface::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t cellfenceInterfaceRet = remote->SendRequest(CMD_CELLFENCE_INTERFACE_GET_VERSION, cellfenceInterfaceData, cellfenceInterfaceReply, cellfenceInterfaceOption);
    if (cellfenceInterfaceRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, cellfenceInterfaceRet);
        return cellfenceInterfaceRet;
    }

    if (!cellfenceInterfaceReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!cellfenceInterfaceReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return cellfenceInterfaceRet;
}

} // V1_0
} // Cellfence
} // Lpfence
} // Location
} // HDI
} // OHOS
