AST[name: ICellfenceInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_cellfence_v1_0/foo/location/lpfence/cellfence/v1_0/ICellfenceInterface.idl]
package ohos.hdi.location.lpfence.cellfence.v1_0;

import ohos.hdi.location.lpfence.cellfence.v1_0.ICellfenceCallback;
import ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceTypes;

[mini, lite, full] interface ICellfenceInterface {
    [mini, lite, full] RegisterCellfenceCallback(
      [in] ohos.hdi.location.lpfence.cellfence.v1_0.ICellfenceCallback callbackObj);

    [mini, lite, full] UnregisterCellfenceCallback(
      [in] ohos.hdi.location.lpfence.cellfence.v1_0.ICellfenceCallback callbackObj);

    [mini, lite, full] AddCellfences(
      [in] ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceRequest[] cellfence);

    [mini, lite, full] RemoveCellfences(
      [in] int[] cellfenceId);

    [mini, lite, full] GetCellfenceSize();
}


AST[name: ICellfenceCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_cellfence_v1_0/foo/location/lpfence/cellfence/v1_0/ICellfenceCallback.idl]
package ohos.hdi.location.lpfence.cellfence.v1_0;

import ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceTypes;

[mini, lite, full, callback] interface ICellfenceCallback {
    [mini, lite, full, callback] OnCellfenceChanged(
      [in] ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceStatus fences);

    [mini, lite, full, callback] OnGetCellfenceSizeCb(
      [in] ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceSize size);

    [mini, lite, full, callback] OnCellfenceReset();
}


AST[name: CellfenceTypes file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/location_lpfence_cellfence_v1_0/foo/location/lpfence/cellfence/v1_0/CellfenceTypes.idl]
package ohos.hdi.location.lpfence.cellfence.v1_0;

[mini, lite, full] enum CellfenceTransition : int {
  FENCE_ENTER = 0,
  FENCE_EXIT = 3,
};

[mini, lite, full] struct CellfenceInfo {
  unsigned int lac;
  unsigned long cellId;
};

[mini, lite, full] struct CellfenceRequest {
  int cellfenceId;
  ohos.hdi.location.lpfence.cellfence.v1_0.CellfenceInfo[] cellInfo;
};

[mini, lite, full] struct CellfenceStatus {
  int cellfenceId;
  unsigned short status;
};

[mini, lite, full] struct CellfenceSize {
  unsigned int maxNum;
  unsigned int usedNum;
};


