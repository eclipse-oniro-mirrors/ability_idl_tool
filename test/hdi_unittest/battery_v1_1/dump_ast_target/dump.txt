AST[name: IBatteryInterface file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/battery_v1_1/foo/battery/v1_1/IBatteryInterface.idl]
package ohos.hdi.battery.v1_1;

import ohos.hdi.battery.v1_1.IBatteryCallback;
import ohos.hdi.battery.v1_1.Types;

[mini, lite, full] interface IBatteryInterface {
    [mini, lite, full] Register(
      [in] ohos.hdi.battery.v1_1.IBatteryCallback event);

    [mini, lite, full] UnRegister();

    [mini, lite, full] ChangePath(
      [in] std::string path);

    [mini, lite, full] GetCapacity(
      [out] int capacity);

    [mini, lite, full] GetVoltage(
      [out] int voltage);

    [mini, lite, full] GetTemperature(
      [out] int temperature);

    [mini, lite, full] GetHealthState(
      [out] ohos.hdi.battery.v1_1.BatteryHealthState healthState);

    [mini, lite, full] GetPluggedType(
      [out] ohos.hdi.battery.v1_1.BatteryPluggedType pluggedType);

    [mini, lite, full] GetChargeState(
      [out] ohos.hdi.battery.v1_1.BatteryChargeState chargeState);

    [mini, lite, full] GetPresent(
      [out] boolean present);

    [mini, lite, full] GetTechnology(
      [out] std::string technology);

    [mini, lite, full] GetTotalEnergy(
      [out] int totalEnergy);

    [mini, lite, full] GetCurrentAverage(
      [out] int curAverage);

    [mini, lite, full] GetCurrentNow(
      [out] int curNow);

    [mini, lite, full] GetRemainEnergy(
      [out] int remainEnergy);

    [mini, lite, full] GetBatteryInfo(
      [out] ohos.hdi.battery.v1_1.BatteryInfo info);

    [mini, lite, full] SetChargingLimit(
      [in] ohos.hdi.battery.v1_1.ChargingLimit[] chargingLimit);
}


AST[name: IBatteryCallback file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/battery_v1_1/foo/battery/v1_1/IBatteryCallback.idl]
package ohos.hdi.battery.v1_1;

import ohos.hdi.battery.v1_1.Types;

[mini, lite, full, callback] interface IBatteryCallback {
    [mini, lite, full, callback] Update(
      [in] ohos.hdi.battery.v1_1.BatteryInfo event);
}


AST[name: Types file: /home/bmi/CODE/OpenHarmony/foundation/ability/idl_tool/test/hdi_unittest/battery_v1_1/foo/battery/v1_1/Types.idl]
package ohos.hdi.battery.v1_1;

[mini, lite, full] enum BatteryHealthState : int {
  BATTERY_HEALTH_UNKNOWN = 0,
  BATTERY_HEALTH_GOOD,
  BATTERY_HEALTH_OVERHEAT,
  BATTERY_HEALTH_OVERVOLTAGE,
  BATTERY_HEALTH_COLD,
  BATTERY_HEALTH_DEAD,
  BATTERY_HEALTH_RESERVED,
};

[mini, lite, full] enum BatteryChargeState : int {
  CHARGE_STATE_NONE = 0,
  CHARGE_STATE_ENABLE,
  CHARGE_STATE_DISABLE,
  CHARGE_STATE_FULL,
  CHARGE_STATE_RESERVED,
};

[mini, lite, full] enum BatteryPluggedType : int {
  PLUGGED_TYPE_NONE = 0,
  PLUGGED_TYPE_AC,
  PLUGGED_TYPE_USB,
  PLUGGED_TYPE_WIRELESS,
  PLUGGED_TYPE_BUTT,
};

[mini, lite, full] struct BatteryInfo {
  int capacity;
  int voltage;
  int temperature;
  int healthState;
  int pluggedType;
  int pluggedMaxCurrent;
  int pluggedMaxVoltage;
  int chargeState;
  int chargeCounter;
  int totalEnergy;
  int curAverage;
  int curNow;
  int remainEnergy;
  byte present;
  std::string technology;
};

[mini, lite, full] enum ChargingLimitType : int {
  TYPE_CURRENT = 0,
  TYPE_VOLTAGE,
};

[mini, lite, full] struct ChargingLimit {
  ohos.hdi.battery.v1_1.ChargingLimitType type;
  std::string protocol;
  int value;
};


