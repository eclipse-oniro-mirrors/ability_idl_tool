/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/stream_operator_service.h"
#include <hdf_base.h>

#define HDF_LOG_TAG    stream_operator_service

namespace OHOS {
namespace HDI {
namespace Camera {
namespace V1_0 {
int32_t StreamOperatorService::IsStreamsSupported(OHOS::HDI::Camera::V1_0::OperationMode mode,
     const std::vector<uint8_t>& modeSetting, const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& infos, OHOS::HDI::Camera::V1_0::StreamSupportType& type)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::CreateStreams(const std::vector<OHOS::HDI::Camera::V1_0::StreamInfo>& streamInfos)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::ReleaseStreams(const std::vector<int32_t>& streamIds)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::CommitStreams(OHOS::HDI::Camera::V1_0::OperationMode mode,
     const std::vector<uint8_t>& modeSetting)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::GetStreamAttributes(std::vector<OHOS::HDI::Camera::V1_0::StreamAttribute>& attributes)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::AttachBufferQueue(int32_t streamId,
     const sptr<OHOS::HDI::Camera::V1_0::BufferProducerSequenceable>& bufferProducer)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::DetachBufferQueue(int32_t streamId)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::Capture(int32_t captureId, const OHOS::HDI::Camera::V1_0::CaptureInfo& info,
     bool isStreaming)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::CancelCapture(int32_t captureId)
{
    return HDF_SUCCESS;
}

int32_t StreamOperatorService::ChangeToOfflineStream(const std::vector<int32_t>& streamIds,
     const sptr<OHOS::HDI::Camera::V1_0::IStreamOperatorCallback>& callbackObj, sptr<OHOS::HDI::Camera::V1_0::IOfflineStreamOperator>& offlineOperator)
{
    return HDF_SUCCESS;
}

} // V1_0
} // Camera
} // HDI
} // OHOS
