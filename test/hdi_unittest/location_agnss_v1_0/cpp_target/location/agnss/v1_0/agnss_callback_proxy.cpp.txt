/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/agnss_callback_proxy.h"
#include <hdf_base.h>
#include <hdf_log.h>
#include <hdi_support.h>
#include <message_option.h>
#include <message_parcel.h>
#include <string_ex.h>

#define HDF_LOG_TAG    agnss_callback_proxy

namespace OHOS {
namespace HDI {
namespace Location {
namespace Agnss {
namespace V1_0 {


int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSetUpAgnssDataLink(const OHOS::HDI::Location::Agnss::V1_0::AGnssDataLinkRequest& request)
{
    return OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSetUpAgnssDataLink_(request, Remote());
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSubscriberSetId(OHOS::HDI::Location::Agnss::V1_0::SubscriberSetIdType type)
{
    return OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSubscriberSetId_(type, Remote());
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestAgnssRefInfo()
{
    return OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestAgnssRefInfo_(Remote());
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::GetVersion(uint32_t& majorVer, uint32_t& minorVer)
{
    return OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::GetVersion_(majorVer, minorVer, Remote());
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSetUpAgnssDataLink_(const OHOS::HDI::Location::Agnss::V1_0::AGnssDataLinkRequest& request, const sptr<IRemoteObject> remote)
{
    MessageParcel aGnssCallbackData;
    MessageParcel aGnssCallbackReply;
    MessageOption aGnssCallbackOption(MessageOption::TF_SYNC);

    if (!aGnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Agnss::V1_0::IAGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!OHOS::HDI::Location::Agnss::V1_0::AGnssDataLinkRequestBlockMarshalling(aGnssCallbackData, request)) {
        HDF_LOGE("%{public}s: write request failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t aGnssCallbackRet = remote->SendRequest(CMD_AGNSS_CALLBACK_REQUEST_SET_UP_AGNSS_DATA_LINK, aGnssCallbackData, aGnssCallbackReply, aGnssCallbackOption);
    if (aGnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, aGnssCallbackRet);
        return aGnssCallbackRet;
    }

    return aGnssCallbackRet;
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestSubscriberSetId_(OHOS::HDI::Location::Agnss::V1_0::SubscriberSetIdType type, const sptr<IRemoteObject> remote)
{
    MessageParcel aGnssCallbackData;
    MessageParcel aGnssCallbackReply;
    MessageOption aGnssCallbackOption(MessageOption::TF_SYNC);

    if (!aGnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Agnss::V1_0::IAGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!aGnssCallbackData.WriteUint64(static_cast<uint64_t>(type))) {
        HDF_LOGE("%{public}s: write type failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t aGnssCallbackRet = remote->SendRequest(CMD_AGNSS_CALLBACK_REQUEST_SUBSCRIBER_SET_ID, aGnssCallbackData, aGnssCallbackReply, aGnssCallbackOption);
    if (aGnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, aGnssCallbackRet);
        return aGnssCallbackRet;
    }

    return aGnssCallbackRet;
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::RequestAgnssRefInfo_(const sptr<IRemoteObject> remote)
{
    MessageParcel aGnssCallbackData;
    MessageParcel aGnssCallbackReply;
    MessageOption aGnssCallbackOption(MessageOption::TF_SYNC);

    if (!aGnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Agnss::V1_0::IAGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t aGnssCallbackRet = remote->SendRequest(CMD_AGNSS_CALLBACK_REQUEST_AGNSS_REF_INFO, aGnssCallbackData, aGnssCallbackReply, aGnssCallbackOption);
    if (aGnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, aGnssCallbackRet);
        return aGnssCallbackRet;
    }

    return aGnssCallbackRet;
}

int32_t OHOS::HDI::Location::Agnss::V1_0::AGnssCallbackProxy::GetVersion_(uint32_t& majorVer, uint32_t& minorVer,
     const sptr<IRemoteObject> remote)
{
    MessageParcel aGnssCallbackData;
    MessageParcel aGnssCallbackReply;
    MessageOption aGnssCallbackOption(MessageOption::TF_SYNC);

    if (!aGnssCallbackData.WriteInterfaceToken(OHOS::HDI::Location::Agnss::V1_0::IAGnssCallback::GetDescriptor())) {
        HDF_LOGE("%{public}s: failed to write interface descriptor!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (remote == nullptr) {
        HDF_LOGE("%{public}s: invalid remote object!", __func__);
        return HDF_ERR_INVALID_OBJECT;
    }

    int32_t aGnssCallbackRet = remote->SendRequest(CMD_AGNSS_CALLBACK_GET_VERSION, aGnssCallbackData, aGnssCallbackReply, aGnssCallbackOption);
    if (aGnssCallbackRet != HDF_SUCCESS) {
        HDF_LOGE("%{public}s failed, error code is %{public}d", __func__, aGnssCallbackRet);
        return aGnssCallbackRet;
    }

    if (!aGnssCallbackReply.ReadUint32(majorVer)) {
        HDF_LOGE("%{public}s: read majorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    if (!aGnssCallbackReply.ReadUint32(minorVer)) {
        HDF_LOGE("%{public}s: read minorVer failed!", __func__);
        return HDF_ERR_INVALID_PARAM;
    }

    return aGnssCallbackRet;
}

} // V1_0
} // Agnss
} // Location
} // HDI
} // OHOS
