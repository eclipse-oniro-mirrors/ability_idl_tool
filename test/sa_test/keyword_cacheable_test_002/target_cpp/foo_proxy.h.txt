/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef IDL_OHOS_FOOPROXY_H
#define IDL_OHOS_FOOPROXY_H

#include <mutex>
#include <iremote_proxy.h>
#include "ifoo.h"
#include "api_cache_manager.h"

namespace idl {
namespace OHOS {
class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(const sptr<IRemoteObject>& remote);

    ~FooProxy() override;

    void RegisterOnRemoteDiedCallback(const OnRemoteDiedCallback& callback) override
    {
        remoteDiedCallback_ = callback;
    }

    ErrCode test001(
        int32_t param1) override;

    ErrCode test002(
        double param1) override;

    ErrCode test005(
        short param1,
        double& param2) override;

    ErrCode test005(
        int32_t param1,
        int32_t& param2) override;

private:
    class FooRecipient : public IRemoteObject::DeathRecipient {
    public:
        explicit FooRecipient(FooProxy& client) : client_(client) {}
        ~FooRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject>& remote) override
        {
            client_.OnRemoteDied(remote);
        }
    private:
        FooProxy& client_;
    };

    void RemoveDeathRecipient();
    void OnRemoteDied(const wptr<IRemoteObject>& remote);

    static inline BrokerDelegator<FooProxy> delegator_;
    sptr<IRemoteObject> remote_;
    sptr<IRemoteObject::DeathRecipient> deathRecipient_;
    OnRemoteDiedCallback remoteDiedCallback_;
    std::mutex mutex_;
};
} // namespace OHOS
} // namespace idl
#endif // IDL_OHOS_FOOPROXY_H

