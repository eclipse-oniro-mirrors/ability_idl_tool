/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {

ErrCode FooProxy::sharedptr_seq_func(
    const std::shared_ptr<myseq>& inParam,
    std::shared_ptr<myseq>& inoutParam,
    std::shared_ptr<myseq>& outParam,
    std::shared_ptr<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteParcelable(inParam.get())) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(inoutParam.get())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SHAREDPTR_SEQ_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    inoutParam = std::shared_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!inoutParam) {
        return ERR_INVALID_DATA;
    }

    outParam = std::shared_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!outParam) {
        return ERR_INVALID_DATA;
    }

    funcResult = std::shared_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!funcResult) {
        return ERR_INVALID_DATA;
    }

    return ERR_OK;
}

ErrCode FooProxy::uniqueptr_seq_func(
    const std::unique_ptr<myseq>& inParam,
    std::unique_ptr<myseq>& inoutParam,
    std::unique_ptr<myseq>& outParam,
    std::unique_ptr<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteParcelable(inParam.get())) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(inoutParam.get())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_UNIQUEPTR_SEQ_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    inoutParam = std::unique_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!inoutParam) {
        return ERR_INVALID_DATA;
    }

    outParam = std::unique_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!outParam) {
        return ERR_INVALID_DATA;
    }

    funcResult = std::unique_ptr<myseq>(reply.ReadParcelable<myseq>());
    if (!funcResult) {
        return ERR_INVALID_DATA;
    }

    return ERR_OK;
}

ErrCode FooProxy::sptr_seq_func(
    const sptr<myseq>& inParam,
    sptr<myseq>& inoutParam,
    sptr<myseq>& outParam,
    sptr<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteParcelable(inParam)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(inoutParam)) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SPTR_SEQ_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    inoutParam = sptr<myseq>(reply.ReadParcelable<myseq>());
    if (!inoutParam) {
        return ERR_INVALID_DATA;
    }

    outParam = sptr<myseq>(reply.ReadParcelable<myseq>());
    if (!outParam) {
        return ERR_INVALID_DATA;
    }

    funcResult = sptr<myseq>(reply.ReadParcelable<myseq>());
    if (!funcResult) {
        return ERR_INVALID_DATA;
    }

    return ERR_OK;
}
} // namespace test
