/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

    ErrCode sharedptr_seq_func(
        const std::shared_ptr<myseq>& inParam,
        std::shared_ptr<myseq>& inoutParam,
        std::shared_ptr<myseq>& outParam,
        std::shared_ptr<myseq>& funcResult) override;

    ErrCode uniqueptr_seq_func(
        const std::unique_ptr<myseq>& inParam,
        std::unique_ptr<myseq>& inoutParam,
        std::unique_ptr<myseq>& outParam,
        std::unique_ptr<myseq>& funcResult) override;

    ErrCode sptr_seq_func(
        const sptr<myseq>& inParam,
        sptr<myseq>& inoutParam,
        sptr<myseq>& outParam,
        sptr<myseq>& funcResult) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

