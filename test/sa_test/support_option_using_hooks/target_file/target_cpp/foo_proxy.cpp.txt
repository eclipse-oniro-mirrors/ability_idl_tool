/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {
using namespace OHOS::fcallback;

ErrCode FooProxy::void_test_func()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_VOID_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const test::myseq& inParam,
    test::myseq& outParam,
    test::myseq& inoutParam,
    test::myseq& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteParcelable(&inParam)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&inoutParam)) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SEQ_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    std::unique_ptr<test::myseq> outParamInfo(reply.ReadParcelable<test::myseq>());
    if (outParamInfo != nullptr) {
        outParam = *outParamInfo;
    }

    std::unique_ptr<test::myseq> inoutParamInfo(reply.ReadParcelable<test::myseq>());
    if (inoutParamInfo != nullptr) {
        inoutParam = *inoutParamInfo;
    }

    std::unique_ptr<test::myseq> funcResultInfo(reply.ReadParcelable<test::myseq>());
    if (funcResultInfo != nullptr) {
        funcResult = *funcResultInfo;
    }

    return ERR_OK;
}

ErrCode FooProxy::callback_test_func(
    const sptr<OHOS::fcallback::ICallback>& inParam,
    sptr<OHOS::fcallback::ICallback>& outParam,
    sptr<OHOS::fcallback::ICallback>& inoutParam,
    sptr<OHOS::fcallback::ICallback>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CALLBACK_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = iface_cast<OHOS::fcallback::ICallback>(reply.ReadRemoteObject());
    inoutParam = iface_cast<OHOS::fcallback::ICallback>(reply.ReadRemoteObject());
    funcResult = iface_cast<OHOS::fcallback::ICallback>(reply.ReadRemoteObject());
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const sptr<test::myinterface>& inParam,
    sptr<test::myinterface>& outParam,
    sptr<test::myinterface>& inoutParam,
    sptr<test::myinterface>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = iface_cast<test::myinterface>(reply.ReadRemoteObject());
    inoutParam = iface_cast<test::myinterface>(reply.ReadRemoteObject());
    funcResult = iface_cast<test::myinterface>(reply.ReadRemoteObject());
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func2(
    const sptr<test::myinterface2>& inParam,
    sptr<test::myinterface2>& outParam,
    sptr<test::myinterface2>& inoutParam,
    sptr<test::myinterface2>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC2), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = iface_cast<test::myinterface2>(reply.ReadRemoteObject());
    inoutParam = iface_cast<test::myinterface2>(reply.ReadRemoteObject());
    funcResult = iface_cast<test::myinterface2>(reply.ReadRemoteObject());
    return ERR_OK;
}
} // namespace test
