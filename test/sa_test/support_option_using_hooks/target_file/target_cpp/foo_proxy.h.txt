/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {
using namespace OHOS::fcallback;

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

    ErrCode void_test_func() override;

    ErrCode seq_test_func(
        const test::myseq& inParam,
        test::myseq& outParam,
        test::myseq& inoutParam,
        test::myseq& funcResult) override;

    ErrCode callback_test_func(
        const sptr<OHOS::fcallback::ICallback>& inParam,
        sptr<OHOS::fcallback::ICallback>& outParam,
        sptr<OHOS::fcallback::ICallback>& inoutParam,
        sptr<OHOS::fcallback::ICallback>& funcResult) override;

    ErrCode interface_test_func(
        const sptr<test::myinterface>& inParam,
        sptr<test::myinterface>& outParam,
        sptr<test::myinterface>& inoutParam,
        sptr<test::myinterface>& funcResult) override;

    ErrCode interface_test_func2(
        const sptr<test::myinterface2>& inParam,
        sptr<test::myinterface2>& outParam,
        sptr<test::myinterface2>& inoutParam,
        sptr<test::myinterface2>& funcResult) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

