/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

    ErrCode void_test_func() override;

    ErrCode bool_test_func(
        const std::map<bool, bool>& inParam,
        std::map<bool, bool>& outParam,
        std::map<bool, bool>& inoutParam,
        std::map<bool, bool>& funcResult) override;

    ErrCode byte_test_func(
        const std::map<int8_t, int8_t>& inParam,
        std::map<int8_t, int8_t>& outParam,
        std::map<int8_t, int8_t>& inoutParam,
        std::map<int8_t, int8_t>& funcResult) override;

    ErrCode short_test_func(
        const std::map<short, short>& inParam,
        std::map<short, short>& outParam,
        std::map<short, short>& inoutParam,
        std::map<short, short>& funcResult) override;

    ErrCode int_test_func(
        const std::map<int32_t, int32_t>& inParam,
        std::map<int32_t, int32_t>& outParam,
        std::map<int32_t, int32_t>& inoutParam,
        std::map<int32_t, int32_t>& funcResult) override;

    ErrCode long_test_func(
        const std::map<int64_t, int64_t>& inParam,
        std::map<int64_t, int64_t>& outParam,
        std::map<int64_t, int64_t>& inoutParam,
        std::map<int64_t, int64_t>& funcResult) override;

    ErrCode string_test_func(
        const std::map<std::string, std::string>& inParam,
        std::map<std::string, std::string>& outParam,
        std::map<std::string, std::string>& inoutParam,
        std::map<std::string, std::string>& funcResult) override;

    ErrCode float_test_func(
        const std::map<float, float>& inParam,
        std::map<float, float>& outParam,
        std::map<float, float>& inoutParam,
        std::map<float, float>& funcResult) override;

    ErrCode double_test_func(
        const std::map<double, double>& inParam,
        std::map<double, double>& outParam,
        std::map<double, double>& inoutParam,
        std::map<double, double>& funcResult) override;

    ErrCode char_test_func(
        const std::map<char, char>& inParam,
        std::map<char, char>& outParam,
        std::map<char, char>& inoutParam,
        std::map<char, char>& funcResult) override;

    ErrCode seq_test_func(
        const std::map<myseq, myseq>& inParam,
        std::map<myseq, myseq>& outParam,
        std::map<myseq, myseq>& inoutParam,
        std::map<myseq, myseq>& funcResult) override;

    ErrCode interface_test_func(
        const std::map<sptr<myinterface>, sptr<myinterface>>& inParam,
        std::map<sptr<myinterface>, sptr<myinterface>>& outParam,
        std::map<sptr<myinterface>, sptr<myinterface>>& inoutParam,
        std::map<sptr<myinterface>, sptr<myinterface>>& funcResult) override;

    ErrCode int_2_test_func(
        const std::map<int32_t, std::vector<int32_t>>& inParam,
        std::map<int32_t, std::vector<int32_t>>& outParam,
        std::map<int32_t, std::vector<int32_t>>& inoutParam,
        std::map<int32_t, std::vector<int32_t>>& funcResult) override;

    ErrCode OrderedMap_test_func(
        const std::map<int32_t, std::map<int32_t, std::vector<int32_t>>>& inParam,
        std::map<int32_t, std::map<int32_t, std::vector<int32_t>>>& outParam,
        std::map<int32_t, std::map<int32_t, std::vector<int32_t>>>& inoutParam,
        std::map<int32_t, std::map<int32_t, std::vector<int32_t>>>& funcResult) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

