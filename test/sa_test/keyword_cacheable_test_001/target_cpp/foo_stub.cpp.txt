/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace idl {
namespace OHOS {
int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (code) {
        case COMMAND_TEST001: {
            short param1 = (short)data.ReadInt32();
            int32_t result;
            ErrCode errCode = test001(param1, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(result)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_TEST002: {
            int32_t param1 = data.ReadInt32();
            ErrCode errCode = test002(param1);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case COMMAND_TEST003: {
            float param1 = data.ReadFloat();
            int32_t param2;
            ErrCode errCode = test003(param1, param2);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(param2)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_TEST004: {
            std::unordered_map<long, long> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                long key = data.ReadInt64();
                long value = data.ReadInt64();
                inParam[key] = value;
            }
            std::unordered_map<long, long> outParam;
            ErrCode errCode = test004(inParam, outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt64((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt64((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_TEST005: {
            short param1 = (short)data.ReadInt32();
            double param2;
            ErrCode errCode = test005(param1, param2);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteDouble(param2)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace OHOS
} // namespace idl
