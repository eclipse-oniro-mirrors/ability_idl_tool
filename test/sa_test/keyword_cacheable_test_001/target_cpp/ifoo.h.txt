/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef IDL_OHOS_IFOO_H
#define IDL_OHOS_IFOO_H

#include <cstdint>
#include <unordered_map>
#include <iremote_broker.h>
#include <string_ex.h>

namespace idl {
namespace OHOS {

enum class IFooIpcCode {
    COMMAND_TEST001 = MIN_TRANSACTION_ID,
    COMMAND_TEST002,
    COMMAND_TEST003,
    COMMAND_TEST004,
    COMMAND_TEST005,
};

using OnRemoteDiedCallback = std::function<void(const wptr<IRemoteObject>&)>;

class IFoo : public IRemoteBroker {
public:
    DECLARE_INTERFACE_DESCRIPTOR(u"idl.OHOS.IFoo");

    virtual void RegisterOnRemoteDiedCallback([[maybe_unused]] const OnRemoteDiedCallback& callback) {}

    virtual ErrCode test001(
        short param1,
        int32_t& funcResult) = 0;

    virtual ErrCode test002(
        int32_t param1) = 0;

    virtual ErrCode test003(
        float param1,
        int32_t& param2) = 0;

    virtual ErrCode test004(
        const std::unordered_map<int64_t, int64_t>& inParam,
        std::unordered_map<int64_t, int64_t>& outParam) = 0;

    virtual ErrCode test005(
        short param1,
        double& param2) = 0;
protected:
    const int VECTOR_MAX_SIZE = 102400;
    const int LIST_MAX_SIZE = 102400;
    const int MAP_MAX_SIZE = 102400;
};
} // namespace OHOS
} // namespace idl
#endif // IDL_OHOS_IFOO_H

