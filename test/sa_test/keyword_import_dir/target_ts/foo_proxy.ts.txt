/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {seq_test_funcCallback} from "./i_foo";
import {seq_test_func2Callback} from "./i_foo";
import {interface_test_funcCallback} from "./i_foo";
import {interface_test_func2Callback} from "./i_foo";
import IFoo from "./i_foo";
import rpc from "@ohos.rpc";
import myseq from "./myseq";
import myseq2 from "./myseq2";
import myinterface from "./myinterface";
import myinterface2 from "./myinterface2";
import myinterfaceStub from "./myinterface_stub";
import myinterface2Stub from "./myinterface2_stub";

export default class FooProxy implements IFoo {
    constructor(proxy) {
        this.proxy = proxy;
    }

    seq_test_func(inParam: myseq, inoutParam: myseq, callback: seq_test_funcCallback): void
    {
        let option = new rpc.MessageOption();
        let dataSequence = rpc.MessageSequence.create();
        let replySequence = rpc.MessageSequence.create();
        dataSequence.writeInterfaceToken(this.proxy.getDescriptor());
        dataSequence.writeParcelable(inParam);
        dataSequence.writeParcelable(inoutParam);
        this.proxy.sendMessageRequest(FooProxy.COMMAND_SEQ_TEST_FUNC, dataSequence, replySequence, option).then((result: rpc.RequestResult) => {
            if (result.errCode === 0) {
                let errCodeVar = result.reply.readInt();
                if (errCodeVar != 0) {
                    let outParamVar = undefined;
                    let inoutParamVar = undefined;
                    callback(errCodeVar,outParamVar, inoutParamVar);
                    return;
                }
                let outParamVar = new myseq();
                result.reply.readSequenceable(outParamVar);
                let inoutParamVar = new myseq();
                result.reply.readSequenceable(inoutParamVar);
                callback(errCodeVar,outParamVar, inoutParamVar);
            } else {
                console.log("sendMessageRequest failed, errCode: " + result.errCode);
            }
        }).catch((e: Error) => {
            console.log('sendMessageRequest failed, message: ' + e.message);
        }).finally(() => {
            dataSequence.reclaim();
            replySequence.reclaim();
        });
    }

    seq_test_func2(inParam: myseq2, inoutParam: myseq2, callback: seq_test_func2Callback): void
    {
        let option = new rpc.MessageOption();
        let dataSequence = rpc.MessageSequence.create();
        let replySequence = rpc.MessageSequence.create();
        dataSequence.writeInterfaceToken(this.proxy.getDescriptor());
        dataSequence.writeParcelable(inParam);
        dataSequence.writeParcelable(inoutParam);
        this.proxy.sendMessageRequest(FooProxy.COMMAND_SEQ_TEST_FUNC2, dataSequence, replySequence, option).then((result: rpc.RequestResult) => {
            if (result.errCode === 0) {
                let errCodeVar = result.reply.readInt();
                if (errCodeVar != 0) {
                    let outParamVar = undefined;
                    let inoutParamVar = undefined;
                    callback(errCodeVar,outParamVar, inoutParamVar);
                    return;
                }
                let outParamVar = new myseq2();
                result.reply.readSequenceable(outParamVar);
                let inoutParamVar = new myseq2();
                result.reply.readSequenceable(inoutParamVar);
                callback(errCodeVar,outParamVar, inoutParamVar);
            } else {
                console.log("sendMessageRequest failed, errCode: " + result.errCode);
            }
        }).catch((e: Error) => {
            console.log('sendMessageRequest failed, message: ' + e.message);
        }).finally(() => {
            dataSequence.reclaim();
            replySequence.reclaim();
        });
    }

    interface_test_func(inParam: myinterface2, inoutParam: myinterface2, callback: interface_test_funcCallback): void
    {
        let option = new rpc.MessageOption();
        let dataSequence = rpc.MessageSequence.create();
        let replySequence = rpc.MessageSequence.create();
        dataSequence.writeInterfaceToken(this.proxy.getDescriptor());
        dataSequence.writeRemoteObject(inParam as myinterface2Stub);
        dataSequence.writeRemoteObject(inoutParam as myinterface2Stub);
        this.proxy.sendMessageRequest(FooProxy.COMMAND_INTERFACE_TEST_FUNC, dataSequence, replySequence, option).then((result: rpc.RequestResult) => {
            if (result.errCode === 0) {
                let errCodeVar = result.reply.readInt();
                if (errCodeVar != 0) {
                    let outParamVar = undefined;
                    let inoutParamVar = undefined;
                    callback(errCodeVar,outParamVar, inoutParamVar);
                    return;
                }
                let outParamVar = result.reply.readRemoteObject();
                let inoutParamVar = result.reply.readRemoteObject();
                callback(errCodeVar,outParamVar, inoutParamVar);
            } else {
                console.log("sendMessageRequest failed, errCode: " + result.errCode);
            }
        }).catch((e: Error) => {
            console.log('sendMessageRequest failed, message: ' + e.message);
        }).finally(() => {
            dataSequence.reclaim();
            replySequence.reclaim();
        });
    }

    interface_test_func2(inParam: myinterface2, inoutParam: myinterface2, callback: interface_test_func2Callback): void
    {
        let option = new rpc.MessageOption();
        let dataSequence = rpc.MessageSequence.create();
        let replySequence = rpc.MessageSequence.create();
        dataSequence.writeInterfaceToken(this.proxy.getDescriptor());
        dataSequence.writeRemoteObject(inParam as myinterface2Stub);
        dataSequence.writeRemoteObject(inoutParam as myinterface2Stub);
        this.proxy.sendMessageRequest(FooProxy.COMMAND_INTERFACE_TEST_FUNC2, dataSequence, replySequence, option).then((result: rpc.RequestResult) => {
            if (result.errCode === 0) {
                let errCodeVar = result.reply.readInt();
                if (errCodeVar != 0) {
                    let outParamVar = undefined;
                    let inoutParamVar = undefined;
                    callback(errCodeVar,outParamVar, inoutParamVar);
                    return;
                }
                let outParamVar = result.reply.readRemoteObject();
                let inoutParamVar = result.reply.readRemoteObject();
                callback(errCodeVar,outParamVar, inoutParamVar);
            } else {
                console.log("sendMessageRequest failed, errCode: " + result.errCode);
            }
        }).catch((e: Error) => {
            console.log('sendMessageRequest failed, message: ' + e.message);
        }).finally(() => {
            dataSequence.reclaim();
            replySequence.reclaim();
        });
    }

    static readonly COMMAND_SEQ_TEST_FUNC = 1;
    static readonly COMMAND_SEQ_TEST_FUNC2 = 2;
    static readonly COMMAND_INTERFACE_TEST_FUNC = 3;
    static readonly COMMAND_INTERFACE_TEST_FUNC2 = 4;
    private proxy
}

