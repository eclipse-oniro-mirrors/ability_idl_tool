/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC: {
            std::unique_ptr<myseq> inParam(data.ReadParcelable<myseq>());
            if (!inParam) {
                return ERR_INVALID_DATA;
            }

            myseq outParam;
            std::unique_ptr<myseq> inoutParam(data.ReadParcelable<myseq>());
            if (!inoutParam) {
                return ERR_INVALID_DATA;
            }

            ErrCode errCode = seq_test_func(*inParam, outParam, *inoutParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&outParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteParcelable(inoutParam.get())) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC2: {
            std::unique_ptr<myseq2> inParam(data.ReadParcelable<myseq2>());
            if (!inParam) {
                return ERR_INVALID_DATA;
            }

            myseq2 outParam;
            std::unique_ptr<myseq2> inoutParam(data.ReadParcelable<myseq2>());
            if (!inoutParam) {
                return ERR_INVALID_DATA;
            }

            ErrCode errCode = seq_test_func2(*inParam, outParam, *inoutParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&outParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteParcelable(inoutParam.get())) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC: {
            sptr<myinterface2> inParam = iface_cast<myinterface2>(data.ReadRemoteObject());
            if (inParam == nullptr) {
                return ERR_INVALID_DATA;
            }

            sptr<myinterface2> outParam;
            sptr<myinterface2> inoutParam = iface_cast<myinterface2>(data.ReadRemoteObject());
            if (inoutParam == nullptr) {
                return ERR_INVALID_DATA;
            }

            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam == nullptr) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRemoteObject(outParam->AsObject())) {
                    return ERR_INVALID_DATA;
                }
                if (inoutParam == nullptr) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRemoteObject(inoutParam->AsObject())) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC2: {
            sptr<myinterface2> inParam = iface_cast<myinterface2>(data.ReadRemoteObject());
            if (inParam == nullptr) {
                return ERR_INVALID_DATA;
            }

            sptr<myinterface2> outParam;
            sptr<myinterface2> inoutParam = iface_cast<myinterface2>(data.ReadRemoteObject());
            if (inoutParam == nullptr) {
                return ERR_INVALID_DATA;
            }

            ErrCode errCode = interface_test_func2(inParam, outParam, inoutParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam == nullptr) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRemoteObject(outParam->AsObject())) {
                    return ERR_INVALID_DATA;
                }
                if (inoutParam == nullptr) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRemoteObject(inoutParam->AsObject())) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
