/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "esim_service_stub.h"

namespace OHOS {
namespace Telephony {
int32_t EsimServiceStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (code) {
        case COMMAND_GET_EID: {
            int32_t slotId = data.ReadInt32();
            std::string eId;
            ErrCode errCode = GetEid(slotId, eId);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteString16(Str8ToStr16(eId))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_OSU_STATUS: {
            int32_t slotId = data.ReadInt32();
            int32_t osuStatus;
            ErrCode errCode = GetOsuStatus(slotId, osuStatus);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(osuStatus)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_START_OSU: {
            int32_t slotId = data.ReadInt32();
            int32_t startOsuResult;
            ErrCode errCode = StartOsu(slotId, startOsuResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(startOsuResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_DOWNLOADABLE_PROFILE_METADATA: {
            int32_t slotId = data.ReadInt32();
            int32_t portIndex = data.ReadInt32();
            std::unique_ptr<DownloadableProfile> profile(data.ReadParcelable<DownloadableProfile>());
            if (!profile) {
                return ERR_INVALID_DATA;
            }

            bool forceDisableProfile = data.ReadInt32() == 1 ? true : false;
            GetDownloadableProfileMetadataResult profileMetadataResult;
            ErrCode errCode = GetDownloadableProfileMetadata(slotId, portIndex, *profile, forceDisableProfile, profileMetadataResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&profileMetadataResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_DOWNLOADABLE_PROFILES: {
            int32_t slotId = data.ReadInt32();
            int32_t portIndex = data.ReadInt32();
            bool forceDisableProfile = data.ReadInt32() == 1 ? true : false;
            GetDownloadableProfilesResult profileListResult;
            ErrCode errCode = GetDownloadableProfiles(slotId, portIndex, forceDisableProfile, profileListResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&profileListResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_DOWNLOAD_PROFILE: {
            int32_t slotId = data.ReadInt32();
            std::unique_ptr<DownloadProfileConfigInfo> configInfo(data.ReadParcelable<DownloadProfileConfigInfo>());
            if (!configInfo) {
                return ERR_INVALID_DATA;
            }

            std::unique_ptr<DownloadableProfile> profile(data.ReadParcelable<DownloadableProfile>());
            if (!profile) {
                return ERR_INVALID_DATA;
            }

            DownloadProfileResult downloadProfileResult;
            ErrCode errCode = DownloadProfile(slotId, *configInfo, *profile, downloadProfileResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&downloadProfileResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_EUICC_PROFILE_INFO_LIST: {
            int32_t slotId = data.ReadInt32();
            GetEuiccProfileInfoListResult euiccProfileInfoList;
            ErrCode errCode = GetEuiccProfileInfoList(slotId, euiccProfileInfoList);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&euiccProfileInfoList)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_EUICC_INFO: {
            int32_t slotId = data.ReadInt32();
            EuiccInfo eUiccInfo;
            ErrCode errCode = GetEuiccInfo(slotId, eUiccInfo);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&eUiccInfo)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_DELETE_PROFILE: {
            int32_t slotId = data.ReadInt32();
            std::string iccId = Str16ToStr8(data.ReadString16());
            int32_t deleteProfileResult;
            ErrCode errCode = DeleteProfile(slotId, iccId, deleteProfileResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(deleteProfileResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SWITCH_TO_PROFILE: {
            int32_t slotId = data.ReadInt32();
            int32_t portIndex = data.ReadInt32();
            std::string iccId = Str16ToStr8(data.ReadString16());
            bool forceDisableProfile = data.ReadInt32() == 1 ? true : false;
            int32_t switchToProfileResult;
            ErrCode errCode = SwitchToProfile(slotId, portIndex, iccId, forceDisableProfile, switchToProfileResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(switchToProfileResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SET_PROFILE_NICKNAME: {
            int32_t slotId = data.ReadInt32();
            std::string iccId = Str16ToStr8(data.ReadString16());
            std::string nickname = Str16ToStr8(data.ReadString16());
            int32_t setProfileNicknameResult;
            ErrCode errCode = SetProfileNickname(slotId, iccId, nickname, setProfileNicknameResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(setProfileNicknameResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_RESET_MEMORY: {
            int32_t slotId = data.ReadInt32();
            int32_t resetOption = data.ReadInt32();
            int32_t resetMemoryResult;
            ErrCode errCode = ResetMemory(slotId, resetOption, resetMemoryResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(resetMemoryResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_RESERVE_PROFILES_FOR_FACTORY_RESTORE: {
            int32_t slotId = data.ReadInt32();
            int32_t restoreResult;
            ErrCode errCode = ReserveProfilesForFactoryRestore(slotId, restoreResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(restoreResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SET_DEFAULT_SMDP_ADDRESS: {
            int32_t slotId = data.ReadInt32();
            std::string defaultSmdpAddress = Str16ToStr8(data.ReadString16());
            int32_t setDefaultSmdpAddressResult;
            ErrCode errCode = SetDefaultSmdpAddress(slotId, defaultSmdpAddress, setDefaultSmdpAddressResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(setDefaultSmdpAddressResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_GET_DEFAULT_SMDP_ADDRESS: {
            int32_t slotId = data.ReadInt32();
            std::string defaultSmdpAddress;
            ErrCode errCode = GetDefaultSmdpAddress(slotId, defaultSmdpAddress);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteString16(Str8ToStr16(defaultSmdpAddress))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_CANCEL_SESSION: {
            int32_t slotId = data.ReadInt32();
            std::string transactionId = Str16ToStr8(data.ReadString16());
            int32_t cancelReason = data.ReadInt32();
            ResponseEsimResult responseResult;
            ErrCode errCode = CancelSession(slotId, transactionId, cancelReason, responseResult);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteParcelable(&responseResult)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case COMMAND_IS_ESIM_SUPPORTED: {
            int32_t slotId = data.ReadInt32();
            ErrCode errCode = IsEsimSupported(slotId);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace Telephony
} // namespace OHOS
