/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "test_server_interface_stub.h"

namespace OHOS {
namespace testserver {

int32_t TestServerInterfaceStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<ITestServerInterfaceIpcCode>(code)) {
        case ITestServerInterfaceIpcCode::COMMAND_CREATE_SESSION: {
            std::unique_ptr<SessionToken> sessionTokenInfo(data.ReadParcelable<SessionToken>());
            if (!sessionTokenInfo) {
                return ERR_INVALID_DATA;
            }
            SessionToken sessionToken(*sessionTokenInfo);

            ErrCode errCode = CreateSession(sessionToken);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case ITestServerInterfaceIpcCode::COMMAND_SET_PASTE_DATA: {
            std::string text = Str16ToStr8(data.ReadString16());
            ErrCode errCode = SetPasteData(text);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case ITestServerInterfaceIpcCode::COMMAND_PUBLISH_COMMON_EVENT: {
            std::unique_ptr<CommonEventData> eventInfo(data.ReadParcelable<CommonEventData>());
            if (!eventInfo) {
                return ERR_INVALID_DATA;
            }
            CommonEventData event(*eventInfo);

            bool re;
            ErrCode errCode = PublishCommonEvent(event, re);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(re ? 1 : 0)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace testserver
} // namespace OHOS
