/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_AAFWK_IQUICKFIXMANAGER_H
#define OHOS_AAFWK_IQUICKFIXMANAGER_H

#include <cstdint>
#include <vector>
#include <iremote_broker.h>
#include <string_ex.h>
#include "quick_fix_info.h"

using OHOS::AAFwk::ApplicationQuickFixInfo;

namespace OHOS {
namespace AAFwk {

enum class IQuickFixManagerIpcCode {
    COMMAND_APPLY_QUICK_FIX = MIN_TRANSACTION_ID,
    COMMAND_GET_APPLYED_QUICK_FIX_INFO,
    COMMAND_REVOKE_QUICK_FIX,
};

using OnRemoteDiedCallback = std::function<void(const wptr<IRemoteObject>&)>;

class IQuickFixManager : public IRemoteBroker {
public:
    DECLARE_INTERFACE_DESCRIPTOR(u"OHOS.AAFwk.IQuickFixManager");

    virtual void RegisterOnRemoteDiedCallback([[maybe_unused]] const OnRemoteDiedCallback& callback) {}

    virtual ErrCode ApplyQuickFix(
        const std::vector<std::string>& quickFixFiles,
        bool isDebug) = 0;

    virtual ErrCode GetApplyedQuickFixInfo(
        const std::string& bundleName,
        ApplicationQuickFixInfo& quickFixInfo) = 0;

    virtual ErrCode RevokeQuickFix(
        const std::string& bundleName) = 0;
protected:
    const int VECTOR_MAX_SIZE = 102400;
    const int LIST_MAX_SIZE = 102400;
    const int MAP_MAX_SIZE = 102400;
};
} // namespace AAFwk
} // namespace OHOS
#endif // OHOS_AAFWK_IQUICKFIXMANAGER_H

