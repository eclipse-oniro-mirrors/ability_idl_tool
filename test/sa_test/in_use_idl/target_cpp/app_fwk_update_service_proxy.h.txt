/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_NWEB_APPFWKUPDATESERVICEPROXY_H
#define OHOS_NWEB_APPFWKUPDATESERVICEPROXY_H

#include <mutex>
#include <iremote_proxy.h>
#include "iapp_fwk_update_service.h"

namespace OHOS {
namespace NWeb {
class AppFwkUpdateServiceProxy : public IRemoteProxy<IAppFwkUpdateService> {
public:
    explicit AppFwkUpdateServiceProxy(const sptr<IRemoteObject>& remote);

    ~AppFwkUpdateServiceProxy() override;

    void RegisterOnRemoteDiedCallback(const OnRemoteDiedCallback& callback) override
    {
        remoteDiedCallback_ = callback;
    }

    ErrCode VerifyPackageInstall(
        const std::string& bundleName,
        const std::string& hapPath,
        int32_t& success) override;

private:
    class AppFwkUpdateServiceRecipient : public IRemoteObject::DeathRecipient {
    public:
        explicit AppFwkUpdateServiceRecipient(AppFwkUpdateServiceProxy& client) : client_(client) {}
        ~AppFwkUpdateServiceRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject>& remote) override
        {
            client_.OnRemoteDied(remote);
        }
    private:
        AppFwkUpdateServiceProxy& client_;
    };

    void RemoveDeathRecipient();
    void OnRemoteDied(const wptr<IRemoteObject>& remote);

    static inline BrokerDelegator<AppFwkUpdateServiceProxy> delegator_;
    sptr<IRemoteObject> remote_;
    sptr<IRemoteObject::DeathRecipient> deathRecipient_;
    OnRemoteDiedCallback remoteDiedCallback_;
    std::mutex mutex_;
};
} // namespace NWeb
} // namespace OHOS
#endif // OHOS_NWEB_APPFWKUPDATESERVICEPROXY_H

