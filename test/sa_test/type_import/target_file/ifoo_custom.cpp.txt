/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ifoo_custom.h"

namespace OHOS {
namespace custom {
namespace idlFile {

ErrCode FooStructBlockMarshalling(OHOS::MessageParcel& data, const FooStruct& dataBlock)
{
    if (!data.WriteInt32(dataBlock.id)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString16(Str8ToStr16(dataBlock.name))) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type))) {
        return ERR_INVALID_DATA;
    }
    return ERR_NONE;
}

ErrCode FooStructBlockUnmarshalling(OHOS::MessageParcel& data, FooStruct& dataBlock)
{
    dataBlock.id = data.ReadInt32();

    std::string nameCp = Str16ToStr8(data.ReadString16());
    dataBlock.name = nameCp;

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            return ERR_INVALID_DATA;
        }
        dataBlock.type = static_cast<FooEnum>(enumTmp);
    }
    return ERR_NONE;
}

} // namespace idlFile
} // namespace custom
} // namespace OHOS
