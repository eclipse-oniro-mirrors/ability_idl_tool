/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ifoo_custom.h"

namespace OHOS {
namespace custom {
namespace idlFile {

ErrCode FooStructBlockMarshalling(OHOS::MessageParcel& data, const FooStruct& dataBlock)
{
    if (!data.WriteInt32(dataBlock.id)) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteString16(Str8ToStr16(dataBlock.name))) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type))) {
        return ERR_INVALID_DATA;
    }

    if (!data.WriteRemoteObject(dataBlock.caption)) {
        return ERR_INVALID_DATA;
    }
    return ERR_NONE;
}

ErrCode FooStructBlockUnmarshalling(OHOS::MessageParcel& data, FooStruct& dataBlock)
{
    dataBlock.id = data.ReadInt32();

    std::string nameCp = Str16ToStr8(data.ReadString16());
    dataBlock.name = nameCp;

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            return ERR_INVALID_DATA;
        }
        dataBlock.type = static_cast<FooEnum>(enumTmp);
    }

    dataBlock.caption = data.ReadRemoteObject();

    return ERR_NONE;
}

ErrCode RequestInfoBlockMarshalling(OHOS::MessageParcel& data, const RequestInfo& dataBlock)
{
    if (dataBlock.initData.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(dataBlock.initData.size());
    for (auto it7 = dataBlock.initData.begin(); it7 != dataBlock.initData.end(); ++it7) {
        if (!data.WriteUint8((*it7))) {
            return ERR_INVALID_DATA;
        }
    }

    if (dataBlock.optionalData.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(dataBlock.optionalData.size());
    for (auto it8 = dataBlock.optionalData.begin(); it8 != dataBlock.optionalData.end(); ++it8) {
        if (!data.WriteString16(Str8ToStr16((it8->first)))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteString16(Str8ToStr16((it8->second)))) {
            return ERR_INVALID_DATA;
        }
    }
    return ERR_NONE;
}

ErrCode RequestInfoBlockUnmarshalling(OHOS::MessageParcel& data, RequestInfo& dataBlock)
{
    int32_t initDataSize = data.ReadInt32();
    if (initDataSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i9 = 0; i9 < initDataSize; ++i9) {
        uint8_t value9 = data.ReadUint8();
        dataBlock.initData.push_back(value9);
    }

    int32_t optionalDataSize = data.ReadInt32();
    for (int32_t i10 = 0; i10 < optionalDataSize; ++i10) {
        std::string key10 = Str16ToStr8(data.ReadString16());
        std::string value10 = Str16ToStr8(data.ReadString16());
        dataBlock.optionalData[key10] = value10;
    }
    return ERR_NONE;
}
} // namespace idlFile
} // namespace custom
} // namespace OHOS
