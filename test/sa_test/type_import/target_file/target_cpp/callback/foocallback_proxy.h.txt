/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_CALLBACK_FOOCALLBACKPROXY_H
#define OHOS_CALLBACK_FOOCALLBACKPROXY_H

#include <iremote_proxy.h>
#include <securec.h>
#include "ifoocallback.h"

namespace OHOS {
namespace callback {
using namespace OHOS::callback::customtype;

class FoocallbackProxy : public IRemoteProxy<IFoocallback> {
public:
    explicit FoocallbackProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoocallback>(remote)
    {}

    virtual ~FoocallbackProxy()
    {}

    ErrCode void_test_func() override;

    ErrCode enum_test_func(
        FEnum inParam,
        FEnum& outParam,
        FEnum& inoutParam,
        FEnum& funcResult) override;

    ErrCode struct_test_func(
        const FStruct& inParam,
        FStruct& outParam,
        FStruct& inoutParam,
        FStruct& funcResult) override;

    ErrCode union_test_func(
        const FUnion& inParam,
        FUnion& outParam,
        FUnion& inoutParam,
        FUnion& funcResult) override;

    ErrCode union_test_func2(
        const FUnion& inParam,
        FUnion& outParam,
        FUnion& inoutParam,
        FUnionCopy& funcResult) override;

private:
    static inline BrokerDelegator<FoocallbackProxy> delegator_;
};
} // namespace callback
} // namespace OHOS
#endif // OHOS_CALLBACK_FOOCALLBACKPROXY_H

