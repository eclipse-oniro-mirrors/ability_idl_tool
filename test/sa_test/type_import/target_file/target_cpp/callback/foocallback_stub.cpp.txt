/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foocallback_stub.h"

namespace OHOS {
namespace callback {
using namespace OHOS::callback::customtype;

int32_t FoocallbackStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFoocallbackIpcCode>(code)) {
        case IFoocallbackIpcCode::COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFoocallbackIpcCode::COMMAND_ENUM_TEST_FUNC: {
            FEnum inParam;
            {
                int32_t enumTmp = 0;
                if (!data.ReadInt32(enumTmp)) {
                    return ERR_INVALID_DATA;
                }
                inParam = static_cast<FEnum>(enumTmp);
            }
            FEnum outParam;
            FEnum inoutParam;
            {
                int32_t enumTmp = 0;
                if (!data.ReadInt32(enumTmp)) {
                    return ERR_INVALID_DATA;
                }
                inoutParam = static_cast<FEnum>(enumTmp);
            }
            FEnum result;
            ErrCode errCode = enum_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteInt32(static_cast<int32_t>(outParam))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteInt32(static_cast<int32_t>(inoutParam))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteInt32(static_cast<int32_t>(result))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFoocallbackIpcCode::COMMAND_STRUCT_TEST_FUNC: {
            FStruct inParam;
            if (FStructBlockUnmarshalling(data, inParam) != ERR_NONE) {
                return ERR_INVALID_DATA;
            }
            FStruct outParam;
            FStruct inoutParam;
            if (FStructBlockUnmarshalling(data, inoutParam) != ERR_NONE) {
                return ERR_INVALID_DATA;
            }
            FStruct result;
            ErrCode errCode = struct_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (FStructBlockMarshalling(reply, outParam) != ERR_NONE) {
                    return ERR_INVALID_DATA;
                }
                if (FStructBlockMarshalling(reply, inoutParam) != ERR_NONE) {
                    return ERR_INVALID_DATA;
                }
                if (FStructBlockMarshalling(reply, result) != ERR_NONE) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFoocallbackIpcCode::COMMAND_UNION_TEST_FUNC: {
            FUnion inParam;
            const FUnion *inParamCp = reinterpret_cast<const FUnion *>(data.ReadUnpadBuffer(sizeof(FUnion)));
            if (inParamCp == nullptr) {
                return ERR_INVALID_DATA;
            }

            if (memcpy_s(&inParam, sizeof(FUnion), inParamCp, sizeof(FUnion)) != EOK) {
                return ERR_INVALID_DATA;
            }
            FUnion outParam;
            FUnion inoutParam;
            const FUnion *inoutParamCp = reinterpret_cast<const FUnion *>(data.ReadUnpadBuffer(sizeof(FUnion)));
            if (inoutParamCp == nullptr) {
                return ERR_INVALID_DATA;
            }

            if (memcpy_s(&inoutParam, sizeof(FUnion), inoutParamCp, sizeof(FUnion)) != EOK) {
                return ERR_INVALID_DATA;
            }
            FUnion result;
            ErrCode errCode = union_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteUnpadBuffer(&outParam, sizeof(FUnion))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUnpadBuffer(&inoutParam, sizeof(FUnion))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUnpadBuffer(&result, sizeof(FUnion))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFoocallbackIpcCode::COMMAND_UNION_TEST_FUNC2: {
            FUnion inParam;
            const FUnion *inParamCp = reinterpret_cast<const FUnion *>(data.ReadUnpadBuffer(sizeof(FUnion)));
            if (inParamCp == nullptr) {
                return ERR_INVALID_DATA;
            }

            if (memcpy_s(&inParam, sizeof(FUnion), inParamCp, sizeof(FUnion)) != EOK) {
                return ERR_INVALID_DATA;
            }
            FUnion outParam;
            FUnion inoutParam;
            const FUnion *inoutParamCp = reinterpret_cast<const FUnion *>(data.ReadUnpadBuffer(sizeof(FUnion)));
            if (inoutParamCp == nullptr) {
                return ERR_INVALID_DATA;
            }

            if (memcpy_s(&inoutParam, sizeof(FUnion), inoutParamCp, sizeof(FUnion)) != EOK) {
                return ERR_INVALID_DATA;
            }
            FUnionCopy result;
            ErrCode errCode = union_test_func2(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteUnpadBuffer(&outParam, sizeof(FUnion))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUnpadBuffer(&inoutParam, sizeof(FUnion))) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUnpadBuffer(&result, sizeof(FUnionCopy))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace callback
} // namespace OHOS
