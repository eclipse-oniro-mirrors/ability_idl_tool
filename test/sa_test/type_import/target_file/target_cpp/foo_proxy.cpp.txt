/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace OHOS {
namespace test {
using namespace OHOS::callback;
using namespace OHOS::fcallback;
using namespace OHOS::custom::idlFile;

ErrCode FooProxy::enum_test_func(
    FooEnum inParam,
    FooEnum& outParam,
    FooEnum& inoutParam,
    FooEnum& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(inParam))) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteUint64(static_cast<uint64_t>(inoutParam))) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_ENUM_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    {
        uint64_t enumTmp = 0;
        if (!reply.ReadUint64(enumTmp)) {
            return ERR_INVALID_DATA;
        }
        outParam = static_cast<FooEnum>(enumTmp);
    }
    {
        uint64_t enumTmp = 0;
        if (!reply.ReadUint64(enumTmp)) {
            return ERR_INVALID_DATA;
        }
        inoutParam = static_cast<FooEnum>(enumTmp);
    }
    {
        uint64_t enumTmp = 0;
        if (!reply.ReadUint64(enumTmp)) {
            return ERR_INVALID_DATA;
        }
        funcResult = static_cast<FooEnum>(enumTmp);
    }
    return ERR_OK;
}

ErrCode FooProxy::struct_test_func(
    const FooStruct& inParam,
    FooStruct& outParam,
    FooStruct& inoutParam,
    FooStruct& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (FooStructBlockMarshalling(reply, inParam) != ERR_NONE) {
        return ERR_INVALID_DATA;
    }
    if (FooStructBlockMarshalling(reply, inoutParam) != ERR_NONE) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_STRUCT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    if (FooStructBlockUnmarshalling(data, outParam) != ERR_NONE) {
        return ERR_INVALID_DATA;
    }
    if (FooStructBlockUnmarshalling(data, inoutParam) != ERR_NONE) {
        return ERR_INVALID_DATA;
    }
    if (FooStructBlockUnmarshalling(data, funcResult) != ERR_NONE) {
        return ERR_INVALID_DATA;
    }
    return ERR_OK;
}

ErrCode FooProxy::union_test_func(
    const FooUnion& inParam,
    FooUnion& outParam,
    FooUnion& inoutParam,
    FooUnion& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteUnpadBuffer(&inParam, sizeof(FooUnion))) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteUnpadBuffer(&inoutParam, sizeof(FooUnion))) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_UNION_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    const auto *outParamCp = reply.ReadUnpadBuffer(sizeof(FooUnion));
    if (outParamCp == nullptr) {
        return ERR_INVALID_DATA;
    }

    if (memcpy_s(&outParam, sizeof(FooUnion), outParamCp, sizeof(FooUnion)) != EOK) {
        return ERR_INVALID_DATA;
    }

    const auto *inoutParamCp = reply.ReadUnpadBuffer(sizeof(FooUnion));
    if (inoutParamCp == nullptr) {
        return ERR_INVALID_DATA;
    }

    if (memcpy_s(&inoutParam, sizeof(FooUnion), inoutParamCp, sizeof(FooUnion)) != EOK) {
        return ERR_INVALID_DATA;
    }

    const auto *funcResultCp = reply.ReadUnpadBuffer(sizeof(FooUnion));
    if (funcResultCp == nullptr) {
        return ERR_INVALID_DATA;
    }

    if (memcpy_s(&funcResult, sizeof(FooUnion), funcResultCp, sizeof(FooUnion)) != EOK) {
        return ERR_INVALID_DATA;
    }

    return ERR_OK;
}

ErrCode FooProxy::callback_test_func(
    const sptr<IFoocallback>& inParam,
    sptr<IFoocallback>& outParam,
    sptr<IFoocallback>& inoutParam,
    sptr<IFoocallback>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CALLBACK_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = iface_cast<IFoocallback>(reply.ReadRemoteObject());
    inoutParam = iface_cast<IFoocallback>(reply.ReadRemoteObject());
    funcResult = iface_cast<IFoocallback>(reply.ReadRemoteObject());
    return ERR_OK;
}

ErrCode FooProxy::callback_test_func2(
    const sptr<ICallback>& inParam,
    sptr<ICallback>& outParam,
    sptr<ICallback>& inoutParam,
    sptr<ICallback>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CALLBACK_TEST_FUNC2), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = iface_cast<ICallback>(reply.ReadRemoteObject());
    inoutParam = iface_cast<ICallback>(reply.ReadRemoteObject());
    funcResult = iface_cast<ICallback>(reply.ReadRemoteObject());
    return ERR_OK;
}
} // namespace test
} // namespace OHOS
