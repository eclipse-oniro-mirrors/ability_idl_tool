/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_TEST_FOOPROXY_H
#define OHOS_TEST_FOOPROXY_H

#include <iremote_proxy.h>
#include <securec.h>
#include "ifoo.h"

namespace OHOS {
namespace test {
using namespace OHOS::callback;
using namespace OHOS::fcallback;
using namespace OHOS::custom::idlFile;

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy() override
    {}

    ErrCode enum_test_func(
        FooEnum inParam,
        FooEnum& outParam,
        FooEnum& inoutParam,
        FooEnum& funcResult) override;

    ErrCode struct_test_func(
        const FooStruct& inParam,
        FooStruct& outParam,
        RequestInfo& inoutParam,
        FooStruct& funcResult) override;

    ErrCode union_test_func(
        const FooUnion& inParam,
        FooUnion& outParam,
        FooUnion& inoutParam,
        FooUnion& funcResult) override;

    ErrCode callback_test_func(
        const sptr<IFoocallback>& inParam,
        sptr<IFoocallback>& outParam,
        sptr<IFoocallback>& inoutParam,
        sptr<IFoocallback>& funcResult) override;

    ErrCode callback_test_func2(
        const sptr<ICallback>& inParam,
        sptr<ICallback>& outParam,
        sptr<ICallback>& inoutParam,
        sptr<ICallback>& funcResult) override;

    ErrCode ApplyQuickFix(
        const std::vector<std::string>& quickFixFiles,
        bool isDebug) override;

    ErrCode GetAllAppSuspendState(
        const std::unordered_map<int32_t, FooStruct>& inApp,
        std::unordered_map<int32_t, FooStruct>& outApp) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
} // namespace OHOS
#endif // OHOS_TEST_FOOPROXY_H

