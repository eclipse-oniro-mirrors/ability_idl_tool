sequenceable test.myseq;

interface test.myinterface;

interface test.IFoo {
  void void_test_func();

  boolean bool_test_func(
      [in] boolean inParam,
      [out] boolean outParam,
      [in, out] boolean inoutParam);

  byte byte_test_func(
      [in] byte inParam,
      [out] byte outParam,
      [in, out] byte inoutParam);

  short short_test_func(
      [in] short inParam,
      [out] short outParam,
      [in, out] short inoutParam);

  int int_test_func(
      [in] int inParam,
      [out] int outParam,
      [in, out] int inoutParam);

  long long_test_func(
      [in] long inParam,
      [out] long outParam,
      [in, out] long inoutParam);

  String string_test_func(
      [in] String inParam,
      [out] String outParam,
      [in, out] String inoutParam);

  float float_test_func(
      [in] float inParam,
      [out] float outParam,
      [in, out] float inoutParam);

  double double_test_func(
      [in] double inParam,
      [out] double outParam,
      [in, out] double inoutParam);

  char char_test_func(
      [in] char inParam,
      [out] char outParam,
      [in, out] char inoutParam);

  myseq seq_test_func(
      [in] myseq inParam,
      [out] myseq outParam,
      [in, out] myseq inoutParam);

  myinterface interface_test_func(
      [in] myinterface inParam,
      [out] myinterface outParam,
      [in, out] myinterface inoutParam);

  Map<boolean, boolean> map_bool_test_func(
      [in] Map<boolean, boolean> inParam,
      [out] Map<boolean, boolean> outParam,
      [in, out] Map<boolean, boolean> inoutParam);

  Map<byte, byte> map_byte_test_func(
      [in] Map<byte, byte> inParam,
      [out] Map<byte, byte> outParam,
      [in, out] Map<byte, byte> inoutParam);

  Map<short, short> map_short_test_func(
      [in] Map<short, short> inParam,
      [out] Map<short, short> outParam,
      [in, out] Map<short, short> inoutParam);

  Map<int, int> map_int_test_func(
      [in] Map<int, int> inParam,
      [out] Map<int, int> outParam,
      [in, out] Map<int, int> inoutParam);

  Map<long, long> map_long_test_func(
      [in] Map<long, long> inParam,
      [out] Map<long, long> outParam,
      [in, out] Map<long, long> inoutParam);

  Map<String, String> map_string_test_func(
      [in] Map<String, String> inParam,
      [out] Map<String, String> outParam,
      [in, out] Map<String, String> inoutParam);

  Map<float, float> map_float_test_func(
      [in] Map<float, float> inParam,
      [out] Map<float, float> outParam,
      [in, out] Map<float, float> inoutParam);

  Map<double, double> map_double_test_func(
      [in] Map<double, double> inParam,
      [out] Map<double, double> outParam,
      [in, out] Map<double, double> inoutParam);

  Map<char, char> map_char_test_func(
      [in] Map<char, char> inParam,
      [out] Map<char, char> outParam,
      [in, out] Map<char, char> inoutParam);

  Map<myseq, myseq> map_seq_test_func(
      [in] Map<myseq, myseq> inParam,
      [out] Map<myseq, myseq> outParam,
      [in, out] Map<myseq, myseq> inoutParam);

  Map<myinterface, myinterface> map_interface_test_func(
      [in] Map<myinterface, myinterface> inParam,
      [out] Map<myinterface, myinterface> outParam,
      [in, out] Map<myinterface, myinterface> inoutParam);

  List<boolean> list_bool_test_func(
      [in] List<boolean> inParam,
      [out] List<boolean> outParam,
      [in, out] List<boolean> inoutParam);

  List<boolean> list_byte_test_func(
      [in] List<boolean> inParam,
      [out] List<boolean> outParam,
      [in, out] List<boolean> inoutParam);

  List<short> list_short_test_func(
      [in] List<short> inParam,
      [out] List<short> outParam,
      [in, out] List<short> inoutParam);

  List<int> list_int_test_func(
      [in] List<int> inParam,
      [out] List<int> outParam,
      [in, out] List<int> inoutParam);

  List<long> list_long_test_func(
      [in] List<long> inParam,
      [out] List<long> outParam,
      [in, out] List<long> inoutParam);

  List<String> list_string_test_func(
      [in] List<String> inParam,
      [out] List<String> outParam,
      [in, out] List<String> inoutParam);

  List<float> list_float_test_func(
      [in] List<float> inParam,
      [out] List<float> outParam,
      [in, out] List<float> inoutParam);

  List<double> list_double_test_func(
      [in] List<double> inParam,
      [out] List<double> outParam,
      [in, out] List<double> inoutParam);

  List<char> list_char_test_func(
      [in] List<char> inParam,
      [out] List<char> outParam,
      [in, out] List<char> inoutParam);

  List<myseq> list_seq_test_func(
      [in] List<myseq> inParam,
      [out] List<myseq> outParam,
      [in, out] List<myseq> inoutParam);

  List<myinterface> list_interface_test_func(
      [in] List<myinterface> inParam,
      [out] List<myinterface> outParam,
      [in, out] List<myinterface> inoutParam);

  boolean[] array_bool_test_func(
      [in] boolean[] inParam,
      [out] boolean[] outParam,
      [in, out] boolean[] inoutParam);

  byte[] array_byte_test_func(
      [in] byte[] inParam,
      [out] byte[] outParam,
      [in, out] byte[] inoutParam);

  short[] array_short_test_func(
      [in] short[] inParam,
      [out] short[] outParam,
      [in, out] short[] inoutParam);

  int[] array_int_test_func(
      [in] int[] inParam,
      [out] int[] outParam,
      [in, out] int[] inoutParam);

  long[] array_long_test_func(
      [in] long[] inParam,
      [out] long[] outParam,
      [in, out] long[] inoutParam);

  String[] array_string_test_func(
      [in] String[] inParam,
      [out] String[] outParam,
      [in, out] String[] inoutParam);

  float[] array_float_test_func(
      [in] float[] inParam,
      [out] float[] outParam,
      [in, out] float[] inoutParam);

  double[] array_double_test_func(
      [in] double[] inParam,
      [out] double[] outParam,
      [in, out] double[] inoutParam);

  char[] array_char_test_func(
      [in] char[] inParam,
      [out] char[] outParam,
      [in, out] char[] inoutParam);

  myseq[] array_seq_test_func(
      [in] myseq[] inParam,
      [out] myseq[] outParam,
      [in, out] myseq[] inoutParam);

  myinterface[] array_interface_test_func(
      [in] myinterface[] inParam,
      [out] myinterface[] outParam,
      [in, out] myinterface[] inoutParam);
}
