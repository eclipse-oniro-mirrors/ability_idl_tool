/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"
#include "hilog/log.h"

using OHOS::HiviewDFX::HiLog;

namespace test {
ErrCode FooProxy::void_test_func()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_VOID_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    return ERR_OK;
}

ErrCode FooProxy::bool_test_func(
    bool inParam,
    bool& outParam,
    bool inoutParam,
    bool& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(inParam ? 1 : 0)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(inoutParam ? 1 : 0)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_BOOL_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = reply.ReadInt32() == 1 ? true : false;
    inoutParam = reply.ReadInt32() == 1 ? true : false;
    result = reply.ReadInt32() == 1 ? true : false;
    return ERR_OK;
}

ErrCode FooProxy::byte_test_func(
    int8_t inParam,
    int8_t& outParam,
    int8_t inoutParam,
    int8_t& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_BYTE_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = (int8_t)reply.ReadInt32();
    inoutParam = (int8_t)reply.ReadInt32();
    result = (int8_t)reply.ReadInt32();
    return ERR_OK;
}

ErrCode FooProxy::short_test_func(
    short inParam,
    short& outParam,
    short inoutParam,
    short& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_SHORT_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = (short)reply.ReadInt32();
    inoutParam = (short)reply.ReadInt32();
    result = (short)reply.ReadInt32();
    return ERR_OK;
}

ErrCode FooProxy::int_test_func(
    int32_t inParam,
    int32_t& outParam,
    int32_t inoutParam,
    int32_t& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_INT_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = reply.ReadInt32();
    inoutParam = reply.ReadInt32();
    result = reply.ReadInt32();
    return ERR_OK;
}

ErrCode FooProxy::long_test_func(
    int64_t inParam,
    int64_t& outParam,
    int64_t inoutParam,
    int64_t& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt64(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt64(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_LONG_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = reply.ReadInt64();
    inoutParam = reply.ReadInt64();
    result = reply.ReadInt64();
    return ERR_OK;
}

ErrCode FooProxy::string_test_func(
    const std::string& inParam,
    std::string& outParam,
    const std::string& inoutParam,
    std::string& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteString16(Str8ToStr16(inParam))) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString16(Str8ToStr16(inoutParam))) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_STRING_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = Str16ToStr8(reply.ReadString16());
    inoutParam = Str16ToStr8(reply.ReadString16());
    result = Str16ToStr8(reply.ReadString16());
    return ERR_OK;
}

ErrCode FooProxy::float_test_func(
    float inParam,
    float& outParam,
    float inoutParam,
    float& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteFloat(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteFloat(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_FLOAT_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = reply.ReadFloat();
    inoutParam = reply.ReadFloat();
    result = reply.ReadFloat();
    return ERR_OK;
}

ErrCode FooProxy::double_test_func(
    double inParam,
    double& outParam,
    double inoutParam,
    double& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteDouble(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteDouble(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_DOUBLE_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = reply.ReadDouble();
    inoutParam = reply.ReadDouble();
    result = reply.ReadDouble();
    return ERR_OK;
}

ErrCode FooProxy::char_test_func(
    zchar inParam,
    zchar& outParam,
    zchar inoutParam,
    zchar& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteInt32(inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteInt32(inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_CHAR_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = (zchar)reply.ReadInt32();
    inoutParam = (zchar)reply.ReadInt32();
    result = (zchar)reply.ReadInt32();
    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const myseq& inParam,
    myseq& outParam,
    myseq* inoutParam,
    myseq& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteParcelable(&inParam)) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteParcelable(&inoutParam)) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_SEQ_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    std::unique_ptr<myseq> info(reply.ReadParcelable<myseq>());
    if (info != nullptr) {
        outParam = *info;
    }

    std::unique_ptr<myseq> info(reply.ReadParcelable<myseq>());
    if (info != nullptr) {
        inoutParam = *info;
    }

    std::unique_ptr<myseq> info(reply.ReadParcelable<myseq>());
    if (info != nullptr) {
        result = *info;
    }

    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const sptr<myinterface>& inParam,
    sptr<myinterface>& outParam,
    const sptr<myinterface>& inoutParam,
    sptr<myinterface>& result)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        HiLog::Error(LABEL, "Write interface token failed!");
        return ERR_INVALID_VALUE;
    }

    if (inParam == nullptr) {
        HiLog::Error(LABEL, "inParam is nullptr!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inParam->AsObject())) {
        HiLog::Error(LABEL, "Write [inParam] failed!");
        return ERR_INVALID_DATA;
    }
    if (inoutParam == nullptr) {
        HiLog::Error(LABEL, "inoutParam is nullptr!");
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRemoteObject(inoutParam->AsObject())) {
        HiLog::Error(LABEL, "Write [inoutParam] failed!");
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        HiLog::Error(LABEL, "Remote is nullptr!");
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(COMMAND_INTERFACE_TEST_FUNC, data, reply, option);
    if (FAILED(result)) {
        HiLog::Error(LABEL, "Send request failed!");
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        HiLog::Error(LABEL, "Read Int32 failed!");
        return errCode;
    }

    outParam = iface_cast<myinterface>(reply.ReadRemoteObject());
    inoutParam = iface_cast<myinterface>(reply.ReadRemoteObject());
    result = iface_cast<myinterface>(reply.ReadRemoteObject());
    return ERR_OK;
}
} // namespace test
