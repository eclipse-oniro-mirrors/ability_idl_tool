/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <mutex>
#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {
class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(const sptr<IRemoteObject>& remote);

    ~FooProxy() override;

    void RegisterOnRemoteDiedCallback(const OnRemoteDiedCallback& callback) override
    {
        remoteDiedCallback_ = callback;
    }

    ErrCode bool_test_func(
        const std::vector<bool>& inParam,
        std::vector<bool>& outParam,
        std::vector<bool>& inoutParam,
        std::vector<bool>& funcResult) override;

    ErrCode byte_test_func(
        const std::vector<bool>& inParam,
        std::vector<bool>& outParam,
        std::vector<bool>& inoutParam,
        std::vector<bool>& funcResult) override;

    ErrCode short_test_func(
        const std::vector<short>& inParam,
        std::vector<short>& outParam,
        std::vector<short>& inoutParam,
        std::vector<short>& funcResult) override;

    ErrCode int_test_func(
        const std::vector<int32_t>& inParam,
        std::vector<int32_t>& outParam,
        std::vector<int32_t>& inoutParam,
        std::vector<int32_t>& funcResult) override;

    ErrCode long_test_func(
        const std::vector<int64_t>& inParam,
        std::vector<int64_t>& outParam,
        std::vector<int64_t>& inoutParam,
        std::vector<int64_t>& funcResult) override;

    ErrCode string_test_func(
        const std::vector<std::string>& inParam,
        std::vector<std::string>& outParam,
        std::vector<std::string>& inoutParam,
        std::vector<std::string>& funcResult) override;

    ErrCode float_test_func(
        const std::vector<float>& inParam,
        std::vector<float>& outParam,
        std::vector<float>& inoutParam,
        std::vector<float>& funcResult) override;

    ErrCode double_test_func(
        const std::vector<double>& inParam,
        std::vector<double>& outParam,
        std::vector<double>& inoutParam,
        std::vector<double>& funcResult) override;

    ErrCode char_test_func(
        const std::vector<zchar>& inParam,
        std::vector<zchar>& outParam,
        std::vector<zchar>& inoutParam,
        std::vector<zchar>& funcResult) override;

    ErrCode seq_test_func(
        const std::vector<myseq>& inParam,
        std::vector<myseq>& outParam,
        std::vector<myseq>& inoutParam,
        std::vector<myseq>& funcResult) override;

    ErrCode interface_test_func(
        const std::vector<sptr<myinterface>>& inParam,
        std::vector<sptr<myinterface>>& outParam,
        std::vector<sptr<myinterface>>& inoutParam,
        std::vector<sptr<myinterface>>& funcResult) override;

private:
    class FooRecipient : public IRemoteObject::DeathRecipient {
    public:
        explicit FooRecipient(FooProxy& client) : client_(client) {}
        ~FooRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject>& remote) override
        {
            client_.OnRemoteDied(remote);
        }
    private:
        FooProxy& client_;
    };

    void RemoveDeathRecipient();
    void OnRemoteDied(const wptr<IRemoteObject>& remote);

    static inline BrokerDelegator<FooProxy> delegator_;
    sptr<IRemoteObject> remote_;
    sptr<IRemoteObject::DeathRecipient> deathRecipient_;
    OnRemoteDiedCallback remoteDiedCallback_;
    std::mutex mutex_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

