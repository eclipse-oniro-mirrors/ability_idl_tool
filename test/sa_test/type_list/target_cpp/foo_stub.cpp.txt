/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
        case IFooIpcCode::COMMAND_BOOL_TEST_FUNC: {
            std::vector<bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i96 = 0; i96 < inParamSize; ++i96) {
                bool value96 = data.ReadInt32() == 1 ? true : false;
                inParam.push_back(value96);
            }
            std::vector<bool> outParam;
            std::vector<bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i97 = 0; i97 < inoutParamSize; ++i97) {
                bool value97 = data.ReadInt32() == 1 ? true : false;
                inoutParam.push_back(value97);
            }
            std::vector<bool> result;
            ErrCode errCode = bool_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it98 = outParam.begin(); it98 != outParam.end(); ++it98) {
                    if (!reply.WriteInt32((*it98) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it99 = inoutParam.begin(); it99 != inoutParam.end(); ++it99) {
                    if (!reply.WriteInt32((*it99) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it100 = result.begin(); it100 != result.end(); ++it100) {
                    if (!reply.WriteInt32((*it100) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BYTE_TEST_FUNC: {
            std::vector<bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i101 = 0; i101 < inParamSize; ++i101) {
                bool value101 = data.ReadInt32() == 1 ? true : false;
                inParam.push_back(value101);
            }
            std::vector<bool> outParam;
            std::vector<bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i102 = 0; i102 < inoutParamSize; ++i102) {
                bool value102 = data.ReadInt32() == 1 ? true : false;
                inoutParam.push_back(value102);
            }
            std::vector<bool> result;
            ErrCode errCode = byte_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it103 = outParam.begin(); it103 != outParam.end(); ++it103) {
                    if (!reply.WriteInt32((*it103) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it104 = inoutParam.begin(); it104 != inoutParam.end(); ++it104) {
                    if (!reply.WriteInt32((*it104) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it105 = result.begin(); it105 != result.end(); ++it105) {
                    if (!reply.WriteInt32((*it105) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SHORT_TEST_FUNC: {
            std::vector<short> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i106 = 0; i106 < inParamSize; ++i106) {
                short value106 = (short)data.ReadInt32();
                inParam.push_back(value106);
            }
            std::vector<short> outParam;
            std::vector<short> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i107 = 0; i107 < inoutParamSize; ++i107) {
                short value107 = (short)data.ReadInt32();
                inoutParam.push_back(value107);
            }
            std::vector<short> result;
            ErrCode errCode = short_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it108 = outParam.begin(); it108 != outParam.end(); ++it108) {
                    if (!reply.WriteInt32((*it108))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it109 = inoutParam.begin(); it109 != inoutParam.end(); ++it109) {
                    if (!reply.WriteInt32((*it109))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it110 = result.begin(); it110 != result.end(); ++it110) {
                    if (!reply.WriteInt32((*it110))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_TEST_FUNC: {
            std::vector<int32_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i111 = 0; i111 < inParamSize; ++i111) {
                int32_t value111 = data.ReadInt32();
                inParam.push_back(value111);
            }
            std::vector<int32_t> outParam;
            std::vector<int32_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i112 = 0; i112 < inoutParamSize; ++i112) {
                int32_t value112 = data.ReadInt32();
                inoutParam.push_back(value112);
            }
            std::vector<int32_t> result;
            ErrCode errCode = int_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it113 = outParam.begin(); it113 != outParam.end(); ++it113) {
                    if (!reply.WriteInt32((*it113))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it114 = inoutParam.begin(); it114 != inoutParam.end(); ++it114) {
                    if (!reply.WriteInt32((*it114))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it115 = result.begin(); it115 != result.end(); ++it115) {
                    if (!reply.WriteInt32((*it115))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_2_TEST_FUNC: {
            std::vector<std::vector<int32_t>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i116 = 0; i116 < inParamSize; ++i116) {
                std::vector<int32_t> value116;
                int32_t value116Size = data.ReadInt32();
                if (value116Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i117 = 0; i117 < value116Size; ++i117) {
                    int32_t value117 = data.ReadInt32();
                    value116.push_back(value117);
                }
                inParam.push_back(value116);
            }
            std::vector<std::vector<int32_t>> outParam;
            std::vector<std::vector<int32_t>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i118 = 0; i118 < inoutParamSize; ++i118) {
                std::vector<int32_t> value118;
                int32_t value118Size = data.ReadInt32();
                if (value118Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i119 = 0; i119 < value118Size; ++i119) {
                    int32_t value119 = data.ReadInt32();
                    value118.push_back(value119);
                }
                inoutParam.push_back(value118);
            }
            std::vector<std::vector<int32_t>> result;
            ErrCode errCode = int_2_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it120 = outParam.begin(); it120 != outParam.end(); ++it120) {
                    if ((*it120).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it120).size());
                    for (auto it121 = (*it120).begin(); it121 != (*it120).end(); ++it121) {
                        if (!reply.WriteInt32((*it121))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it122 = inoutParam.begin(); it122 != inoutParam.end(); ++it122) {
                    if ((*it122).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it122).size());
                    for (auto it123 = (*it122).begin(); it123 != (*it122).end(); ++it123) {
                        if (!reply.WriteInt32((*it123))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it124 = result.begin(); it124 != result.end(); ++it124) {
                    if ((*it124).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it124).size());
                    for (auto it125 = (*it124).begin(); it125 != (*it124).end(); ++it125) {
                        if (!reply.WriteInt32((*it125))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_3_TEST_FUNC: {
            std::vector<std::vector<std::vector<int32_t>>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i126 = 0; i126 < inParamSize; ++i126) {
                std::vector<std::vector<int32_t>> value126;
                int32_t value126Size = data.ReadInt32();
                if (value126Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i127 = 0; i127 < value126Size; ++i127) {
                    std::vector<int32_t> value127;
                    int32_t value127Size = data.ReadInt32();
                    if (value127Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i128 = 0; i128 < value127Size; ++i128) {
                        int32_t value128 = data.ReadInt32();
                        value127.push_back(value128);
                    }
                    value126.push_back(value127);
                }
                inParam.push_back(value126);
            }
            std::vector<std::vector<std::vector<int32_t>>> outParam;
            std::vector<std::vector<std::vector<int32_t>>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i129 = 0; i129 < inoutParamSize; ++i129) {
                std::vector<std::vector<int32_t>> value129;
                int32_t value129Size = data.ReadInt32();
                if (value129Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i130 = 0; i130 < value129Size; ++i130) {
                    std::vector<int32_t> value130;
                    int32_t value130Size = data.ReadInt32();
                    if (value130Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i131 = 0; i131 < value130Size; ++i131) {
                        int32_t value131 = data.ReadInt32();
                        value130.push_back(value131);
                    }
                    value129.push_back(value130);
                }
                inoutParam.push_back(value129);
            }
            std::vector<std::vector<std::vector<int32_t>>> result;
            ErrCode errCode = int_3_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it132 = outParam.begin(); it132 != outParam.end(); ++it132) {
                    if ((*it132).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it132).size());
                    for (auto it133 = (*it132).begin(); it133 != (*it132).end(); ++it133) {
                        if ((*it133).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it133).size());
                        for (auto it134 = (*it133).begin(); it134 != (*it133).end(); ++it134) {
                            if (!reply.WriteInt32((*it134))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it135 = inoutParam.begin(); it135 != inoutParam.end(); ++it135) {
                    if ((*it135).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it135).size());
                    for (auto it136 = (*it135).begin(); it136 != (*it135).end(); ++it136) {
                        if ((*it136).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it136).size());
                        for (auto it137 = (*it136).begin(); it137 != (*it136).end(); ++it137) {
                            if (!reply.WriteInt32((*it137))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it138 = result.begin(); it138 != result.end(); ++it138) {
                    if ((*it138).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it138).size());
                    for (auto it139 = (*it138).begin(); it139 != (*it138).end(); ++it139) {
                        if ((*it139).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it139).size());
                        for (auto it140 = (*it139).begin(); it140 != (*it139).end(); ++it140) {
                            if (!reply.WriteInt32((*it140))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_LONG_TEST_FUNC: {
            std::vector<int64_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i141 = 0; i141 < inParamSize; ++i141) {
                int64_t value141 = data.ReadInt64();
                inParam.push_back(value141);
            }
            std::vector<int64_t> outParam;
            std::vector<int64_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i142 = 0; i142 < inoutParamSize; ++i142) {
                int64_t value142 = data.ReadInt64();
                inoutParam.push_back(value142);
            }
            std::vector<int64_t> result;
            ErrCode errCode = long_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it143 = outParam.begin(); it143 != outParam.end(); ++it143) {
                    if (!reply.WriteInt64((*it143))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it144 = inoutParam.begin(); it144 != inoutParam.end(); ++it144) {
                    if (!reply.WriteInt64((*it144))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it145 = result.begin(); it145 != result.end(); ++it145) {
                    if (!reply.WriteInt64((*it145))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_STRING_TEST_FUNC: {
            std::vector<std::string> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i146 = 0; i146 < inParamSize; ++i146) {
                std::string value146 = Str16ToStr8(data.ReadString16());
                inParam.push_back(value146);
            }
            std::vector<std::string> outParam;
            std::vector<std::string> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i147 = 0; i147 < inoutParamSize; ++i147) {
                std::string value147 = Str16ToStr8(data.ReadString16());
                inoutParam.push_back(value147);
            }
            std::vector<std::string> result;
            ErrCode errCode = string_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it148 = outParam.begin(); it148 != outParam.end(); ++it148) {
                    if (!reply.WriteString16(Str8ToStr16((*it148)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it149 = inoutParam.begin(); it149 != inoutParam.end(); ++it149) {
                    if (!reply.WriteString16(Str8ToStr16((*it149)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it150 = result.begin(); it150 != result.end(); ++it150) {
                    if (!reply.WriteString16(Str8ToStr16((*it150)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_FLOAT_TEST_FUNC: {
            std::vector<float> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i151 = 0; i151 < inParamSize; ++i151) {
                float value151 = data.ReadFloat();
                inParam.push_back(value151);
            }
            std::vector<float> outParam;
            std::vector<float> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i152 = 0; i152 < inoutParamSize; ++i152) {
                float value152 = data.ReadFloat();
                inoutParam.push_back(value152);
            }
            std::vector<float> result;
            ErrCode errCode = float_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it153 = outParam.begin(); it153 != outParam.end(); ++it153) {
                    if (!reply.WriteFloat((*it153))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it154 = inoutParam.begin(); it154 != inoutParam.end(); ++it154) {
                    if (!reply.WriteFloat((*it154))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it155 = result.begin(); it155 != result.end(); ++it155) {
                    if (!reply.WriteFloat((*it155))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC: {
            std::vector<double> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i156 = 0; i156 < inParamSize; ++i156) {
                double value156 = data.ReadDouble();
                inParam.push_back(value156);
            }
            std::vector<double> outParam;
            std::vector<double> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i157 = 0; i157 < inoutParamSize; ++i157) {
                double value157 = data.ReadDouble();
                inoutParam.push_back(value157);
            }
            std::vector<double> result;
            ErrCode errCode = double_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it158 = outParam.begin(); it158 != outParam.end(); ++it158) {
                    if (!reply.WriteDouble((*it158))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it159 = inoutParam.begin(); it159 != inoutParam.end(); ++it159) {
                    if (!reply.WriteDouble((*it159))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it160 = result.begin(); it160 != result.end(); ++it160) {
                    if (!reply.WriteDouble((*it160))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_CHAR_TEST_FUNC: {
            std::vector<char> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i161 = 0; i161 < inParamSize; ++i161) {
                char value161 = (char)data.ReadInt32();
                inParam.push_back(value161);
            }
            std::vector<char> outParam;
            std::vector<char> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i162 = 0; i162 < inoutParamSize; ++i162) {
                char value162 = (char)data.ReadInt32();
                inoutParam.push_back(value162);
            }
            std::vector<char> result;
            ErrCode errCode = char_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it163 = outParam.begin(); it163 != outParam.end(); ++it163) {
                    if (!reply.WriteInt32((*it163))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it164 = inoutParam.begin(); it164 != inoutParam.end(); ++it164) {
                    if (!reply.WriteInt32((*it164))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it165 = result.begin(); it165 != result.end(); ++it165) {
                    if (!reply.WriteInt32((*it165))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_MAP_TEST_FUNC: {
            std::vector<std::unordered_map<int32_t, std::vector<int32_t>>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i166 = 0; i166 < inParamSize; ++i166) {
                std::unordered_map<int32_t, std::vector<int32_t>> value166;
                int32_t value166Size = data.ReadInt32();
                for (int32_t i167 = 0; i167 < value166Size; ++i167) {
                    int32_t key167 = data.ReadInt32();
                    std::vector<int32_t> value167;
                    int32_t value167Size = data.ReadInt32();
                    if (value167Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i168 = 0; i168 < value167Size; ++i168) {
                        int32_t value168 = data.ReadInt32();
                        value167.push_back(value168);
                    }
                    value166[key167] = value167;
                }
                inParam.push_back(value166);
            }
            std::vector<std::unordered_map<int32_t, std::vector<int32_t>>> outParam;
            std::vector<std::unordered_map<int32_t, std::vector<int32_t>>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i169 = 0; i169 < inoutParamSize; ++i169) {
                std::unordered_map<int32_t, std::vector<int32_t>> value169;
                int32_t value169Size = data.ReadInt32();
                for (int32_t i170 = 0; i170 < value169Size; ++i170) {
                    int32_t key170 = data.ReadInt32();
                    std::vector<int32_t> value170;
                    int32_t value170Size = data.ReadInt32();
                    if (value170Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i171 = 0; i171 < value170Size; ++i171) {
                        int32_t value171 = data.ReadInt32();
                        value170.push_back(value171);
                    }
                    value169[key170] = value170;
                }
                inoutParam.push_back(value169);
            }
            std::vector<std::unordered_map<int32_t, std::vector<int32_t>>> result;
            ErrCode errCode = map_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it172 = outParam.begin(); it172 != outParam.end(); ++it172) {
                    if ((*it172).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it172).size());
                    for (auto it173 = (*it172).begin(); it173 != (*it172).end(); ++it173) {
                        if (!reply.WriteInt32((it173->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if ((it173->second).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((it173->second).size());
                        for (auto it174 = (it173->second).begin(); it174 != (it173->second).end(); ++it174) {
                            if (!reply.WriteInt32((*it174))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it175 = inoutParam.begin(); it175 != inoutParam.end(); ++it175) {
                    if ((*it175).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it175).size());
                    for (auto it176 = (*it175).begin(); it176 != (*it175).end(); ++it176) {
                        if (!reply.WriteInt32((it176->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if ((it176->second).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((it176->second).size());
                        for (auto it177 = (it176->second).begin(); it177 != (it176->second).end(); ++it177) {
                            if (!reply.WriteInt32((*it177))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it178 = result.begin(); it178 != result.end(); ++it178) {
                    if ((*it178).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it178).size());
                    for (auto it179 = (*it178).begin(); it179 != (*it178).end(); ++it179) {
                        if (!reply.WriteInt32((it179->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if ((it179->second).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((it179->second).size());
                        for (auto it180 = (it179->second).begin(); it180 != (it179->second).end(); ++it180) {
                            if (!reply.WriteInt32((*it180))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC: {
            std::vector<myseq> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i181 = 0; i181 < inParamSize; ++i181) {
                std::unique_ptr<myseq> value181(data.ReadParcelable<myseq>());
                if (!value181) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(*value181);
            }
            std::vector<myseq> outParam;
            std::vector<myseq> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i182 = 0; i182 < inoutParamSize; ++i182) {
                std::unique_ptr<myseq> value182(data.ReadParcelable<myseq>());
                if (!value182) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(*value182);
            }
            std::vector<myseq> result;
            ErrCode errCode = seq_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it183 = outParam.begin(); it183 != outParam.end(); ++it183) {
                    if (!reply.WriteParcelable(&(*it183))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it184 = inoutParam.begin(); it184 != inoutParam.end(); ++it184) {
                    if (!reply.WriteParcelable(&(*it184))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it185 = result.begin(); it185 != result.end(); ++it185) {
                    if (!reply.WriteParcelable(&(*it185))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC: {
            std::vector<sptr<myinterface>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i186 = 0; i186 < inParamSize; ++i186) {
                sptr<myinterface> value186 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value186 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(value186);
            }
            std::vector<sptr<myinterface>> outParam;
            std::vector<sptr<myinterface>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i187 = 0; i187 < inoutParamSize; ++i187) {
                sptr<myinterface> value187 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value187 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(value187);
            }
            std::vector<sptr<myinterface>> result;
            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it188 = outParam.begin(); it188 != outParam.end(); ++it188) {
                    if ((*it188) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it188)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it189 = inoutParam.begin(); it189 != inoutParam.end(); ++it189) {
                    if ((*it189) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it189)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it190 = result.begin(); it190 != result.end(); ++it190) {
                    if ((*it190) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it190)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
