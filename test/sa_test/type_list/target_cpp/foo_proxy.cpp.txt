/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {

ErrCode FooProxy::bool_test_func(
    const std::vector<bool>& inParam,
    std::vector<bool>& outParam,
    std::vector<bool>& inoutParam,
    std::vector<bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it1 = inParam.begin(); it1 != inParam.end(); ++it1) {
        if (!data.WriteInt32((*it1) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it2 = inoutParam.begin(); it2 != inoutParam.end(); ++it2) {
        if (!data.WriteInt32((*it2) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BOOL_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i3 = 0; i3 < outParamSize; ++i3) {
        bool value3 = reply.ReadInt32() == 1 ? true : false;
        outParam.push_back(value3);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i4 = 0; i4 < inoutParamSize; ++i4) {
        bool value4 = reply.ReadInt32() == 1 ? true : false;
        inoutParam.push_back(value4);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i5 = 0; i5 < funcResultSize; ++i5) {
        bool value5 = reply.ReadInt32() == 1 ? true : false;
        funcResult.push_back(value5);
    }
    return ERR_OK;
}

ErrCode FooProxy::byte_test_func(
    const std::vector<bool>& inParam,
    std::vector<bool>& outParam,
    std::vector<bool>& inoutParam,
    std::vector<bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it6 = inParam.begin(); it6 != inParam.end(); ++it6) {
        if (!data.WriteInt32((*it6) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it7 = inoutParam.begin(); it7 != inoutParam.end(); ++it7) {
        if (!data.WriteInt32((*it7) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BYTE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i8 = 0; i8 < outParamSize; ++i8) {
        bool value8 = reply.ReadInt32() == 1 ? true : false;
        outParam.push_back(value8);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i9 = 0; i9 < inoutParamSize; ++i9) {
        bool value9 = reply.ReadInt32() == 1 ? true : false;
        inoutParam.push_back(value9);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i10 = 0; i10 < funcResultSize; ++i10) {
        bool value10 = reply.ReadInt32() == 1 ? true : false;
        funcResult.push_back(value10);
    }
    return ERR_OK;
}

ErrCode FooProxy::short_test_func(
    const std::vector<short>& inParam,
    std::vector<short>& outParam,
    std::vector<short>& inoutParam,
    std::vector<short>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it11 = inParam.begin(); it11 != inParam.end(); ++it11) {
        if (!data.WriteInt32((*it11))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it12 = inoutParam.begin(); it12 != inoutParam.end(); ++it12) {
        if (!data.WriteInt32((*it12))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SHORT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i13 = 0; i13 < outParamSize; ++i13) {
        short value13 = (short)reply.ReadInt32();
        outParam.push_back(value13);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i14 = 0; i14 < inoutParamSize; ++i14) {
        short value14 = (short)reply.ReadInt32();
        inoutParam.push_back(value14);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i15 = 0; i15 < funcResultSize; ++i15) {
        short value15 = (short)reply.ReadInt32();
        funcResult.push_back(value15);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_test_func(
    const std::vector<int32_t>& inParam,
    std::vector<int32_t>& outParam,
    std::vector<int32_t>& inoutParam,
    std::vector<int32_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it16 = inParam.begin(); it16 != inParam.end(); ++it16) {
        if (!data.WriteInt32((*it16))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it17 = inoutParam.begin(); it17 != inoutParam.end(); ++it17) {
        if (!data.WriteInt32((*it17))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i18 = 0; i18 < outParamSize; ++i18) {
        int32_t value18 = reply.ReadInt32();
        outParam.push_back(value18);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i19 = 0; i19 < inoutParamSize; ++i19) {
        int32_t value19 = reply.ReadInt32();
        inoutParam.push_back(value19);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i20 = 0; i20 < funcResultSize; ++i20) {
        int32_t value20 = reply.ReadInt32();
        funcResult.push_back(value20);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_2_test_func(
    const std::vector<std::vector<int32_t>>& inParam,
    std::vector<std::vector<int32_t>>& outParam,
    std::vector<std::vector<int32_t>>& inoutParam,
    std::vector<std::vector<int32_t>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it21 = inParam.begin(); it21 != inParam.end(); ++it21) {
        if ((*it21).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it21).size());
        for (auto it22 = (*it21).begin(); it22 != (*it21).end(); ++it22) {
            if (!data.WriteInt32((*it22))) {
                return ERR_INVALID_DATA;
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it23 = inoutParam.begin(); it23 != inoutParam.end(); ++it23) {
        if ((*it23).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it23).size());
        for (auto it24 = (*it23).begin(); it24 != (*it23).end(); ++it24) {
            if (!data.WriteInt32((*it24))) {
                return ERR_INVALID_DATA;
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_2_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i25 = 0; i25 < outParamSize; ++i25) {
        std::vector<int32_t> value25;
        int32_t value25Size = reply.ReadInt32();
        if (value25Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i26 = 0; i26 < value25Size; ++i26) {
            int32_t value26 = reply.ReadInt32();
            value25.push_back(value26);
        }
        outParam.push_back(value25);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i27 = 0; i27 < inoutParamSize; ++i27) {
        std::vector<int32_t> value27;
        int32_t value27Size = reply.ReadInt32();
        if (value27Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i28 = 0; i28 < value27Size; ++i28) {
            int32_t value28 = reply.ReadInt32();
            value27.push_back(value28);
        }
        inoutParam.push_back(value27);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i29 = 0; i29 < funcResultSize; ++i29) {
        std::vector<int32_t> value29;
        int32_t value29Size = reply.ReadInt32();
        if (value29Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i30 = 0; i30 < value29Size; ++i30) {
            int32_t value30 = reply.ReadInt32();
            value29.push_back(value30);
        }
        funcResult.push_back(value29);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_3_test_func(
    const std::vector<std::vector<std::vector<int32_t>>>& inParam,
    std::vector<std::vector<std::vector<int32_t>>>& outParam,
    std::vector<std::vector<std::vector<int32_t>>>& inoutParam,
    std::vector<std::vector<std::vector<int32_t>>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it31 = inParam.begin(); it31 != inParam.end(); ++it31) {
        if ((*it31).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it31).size());
        for (auto it32 = (*it31).begin(); it32 != (*it31).end(); ++it32) {
            if ((*it32).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((*it32).size());
            for (auto it33 = (*it32).begin(); it33 != (*it32).end(); ++it33) {
                if (!data.WriteInt32((*it33))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it34 = inoutParam.begin(); it34 != inoutParam.end(); ++it34) {
        if ((*it34).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it34).size());
        for (auto it35 = (*it34).begin(); it35 != (*it34).end(); ++it35) {
            if ((*it35).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((*it35).size());
            for (auto it36 = (*it35).begin(); it36 != (*it35).end(); ++it36) {
                if (!data.WriteInt32((*it36))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_3_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i37 = 0; i37 < outParamSize; ++i37) {
        std::vector<std::vector<int32_t>> value37;
        int32_t value37Size = reply.ReadInt32();
        if (value37Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i38 = 0; i38 < value37Size; ++i38) {
            std::vector<int32_t> value38;
            int32_t value38Size = reply.ReadInt32();
            if (value38Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i39 = 0; i39 < value38Size; ++i39) {
                int32_t value39 = reply.ReadInt32();
                value38.push_back(value39);
            }
            value37.push_back(value38);
        }
        outParam.push_back(value37);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i40 = 0; i40 < inoutParamSize; ++i40) {
        std::vector<std::vector<int32_t>> value40;
        int32_t value40Size = reply.ReadInt32();
        if (value40Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i41 = 0; i41 < value40Size; ++i41) {
            std::vector<int32_t> value41;
            int32_t value41Size = reply.ReadInt32();
            if (value41Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i42 = 0; i42 < value41Size; ++i42) {
                int32_t value42 = reply.ReadInt32();
                value41.push_back(value42);
            }
            value40.push_back(value41);
        }
        inoutParam.push_back(value40);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i43 = 0; i43 < funcResultSize; ++i43) {
        std::vector<std::vector<int32_t>> value43;
        int32_t value43Size = reply.ReadInt32();
        if (value43Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i44 = 0; i44 < value43Size; ++i44) {
            std::vector<int32_t> value44;
            int32_t value44Size = reply.ReadInt32();
            if (value44Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i45 = 0; i45 < value44Size; ++i45) {
                int32_t value45 = reply.ReadInt32();
                value44.push_back(value45);
            }
            value43.push_back(value44);
        }
        funcResult.push_back(value43);
    }
    return ERR_OK;
}

ErrCode FooProxy::long_test_func(
    const std::vector<int64_t>& inParam,
    std::vector<int64_t>& outParam,
    std::vector<int64_t>& inoutParam,
    std::vector<int64_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it46 = inParam.begin(); it46 != inParam.end(); ++it46) {
        if (!data.WriteInt64((*it46))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it47 = inoutParam.begin(); it47 != inoutParam.end(); ++it47) {
        if (!data.WriteInt64((*it47))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_LONG_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i48 = 0; i48 < outParamSize; ++i48) {
        int64_t value48 = reply.ReadInt64();
        outParam.push_back(value48);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i49 = 0; i49 < inoutParamSize; ++i49) {
        int64_t value49 = reply.ReadInt64();
        inoutParam.push_back(value49);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i50 = 0; i50 < funcResultSize; ++i50) {
        int64_t value50 = reply.ReadInt64();
        funcResult.push_back(value50);
    }
    return ERR_OK;
}

ErrCode FooProxy::string_test_func(
    const std::vector<std::string>& inParam,
    std::vector<std::string>& outParam,
    std::vector<std::string>& inoutParam,
    std::vector<std::string>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it51 = inParam.begin(); it51 != inParam.end(); ++it51) {
        if (!data.WriteString16(Str8ToStr16((*it51)))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it52 = inoutParam.begin(); it52 != inoutParam.end(); ++it52) {
        if (!data.WriteString16(Str8ToStr16((*it52)))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_STRING_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i53 = 0; i53 < outParamSize; ++i53) {
        std::string value53 = Str16ToStr8(reply.ReadString16());
        outParam.push_back(value53);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i54 = 0; i54 < inoutParamSize; ++i54) {
        std::string value54 = Str16ToStr8(reply.ReadString16());
        inoutParam.push_back(value54);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i55 = 0; i55 < funcResultSize; ++i55) {
        std::string value55 = Str16ToStr8(reply.ReadString16());
        funcResult.push_back(value55);
    }
    return ERR_OK;
}

ErrCode FooProxy::float_test_func(
    const std::vector<float>& inParam,
    std::vector<float>& outParam,
    std::vector<float>& inoutParam,
    std::vector<float>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it56 = inParam.begin(); it56 != inParam.end(); ++it56) {
        if (!data.WriteFloat((*it56))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it57 = inoutParam.begin(); it57 != inoutParam.end(); ++it57) {
        if (!data.WriteFloat((*it57))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_FLOAT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i58 = 0; i58 < outParamSize; ++i58) {
        float value58 = reply.ReadFloat();
        outParam.push_back(value58);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i59 = 0; i59 < inoutParamSize; ++i59) {
        float value59 = reply.ReadFloat();
        inoutParam.push_back(value59);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i60 = 0; i60 < funcResultSize; ++i60) {
        float value60 = reply.ReadFloat();
        funcResult.push_back(value60);
    }
    return ERR_OK;
}

ErrCode FooProxy::double_test_func(
    const std::vector<double>& inParam,
    std::vector<double>& outParam,
    std::vector<double>& inoutParam,
    std::vector<double>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it61 = inParam.begin(); it61 != inParam.end(); ++it61) {
        if (!data.WriteDouble((*it61))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it62 = inoutParam.begin(); it62 != inoutParam.end(); ++it62) {
        if (!data.WriteDouble((*it62))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i63 = 0; i63 < outParamSize; ++i63) {
        double value63 = reply.ReadDouble();
        outParam.push_back(value63);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i64 = 0; i64 < inoutParamSize; ++i64) {
        double value64 = reply.ReadDouble();
        inoutParam.push_back(value64);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i65 = 0; i65 < funcResultSize; ++i65) {
        double value65 = reply.ReadDouble();
        funcResult.push_back(value65);
    }
    return ERR_OK;
}

ErrCode FooProxy::char_test_func(
    const std::vector<char>& inParam,
    std::vector<char>& outParam,
    std::vector<char>& inoutParam,
    std::vector<char>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it66 = inParam.begin(); it66 != inParam.end(); ++it66) {
        if (!data.WriteInt32((*it66))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it67 = inoutParam.begin(); it67 != inoutParam.end(); ++it67) {
        if (!data.WriteInt32((*it67))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CHAR_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i68 = 0; i68 < outParamSize; ++i68) {
        char value68 = (char)reply.ReadInt32();
        outParam.push_back(value68);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i69 = 0; i69 < inoutParamSize; ++i69) {
        char value69 = (char)reply.ReadInt32();
        inoutParam.push_back(value69);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i70 = 0; i70 < funcResultSize; ++i70) {
        char value70 = (char)reply.ReadInt32();
        funcResult.push_back(value70);
    }
    return ERR_OK;
}

ErrCode FooProxy::map_test_func(
    const std::vector<std::unordered_map<int32_t, std::vector<int32_t>>>& inParam,
    std::vector<std::unordered_map<int32_t, std::vector<int32_t>>>& outParam,
    std::vector<std::unordered_map<int32_t, std::vector<int32_t>>>& inoutParam,
    std::vector<std::unordered_map<int32_t, std::vector<int32_t>>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it71 = inParam.begin(); it71 != inParam.end(); ++it71) {
        if ((*it71).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }

        data.WriteInt32((*it71).size());
        for (auto it72 = (*it71).begin(); it72 != (*it71).end(); ++it72) {
            if (!data.WriteInt32((it72->first))) {
                return ERR_INVALID_DATA;
            }
            if ((it72->second).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((it72->second).size());
            for (auto it73 = (it72->second).begin(); it73 != (it72->second).end(); ++it73) {
                if (!data.WriteInt32((*it73))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it74 = inoutParam.begin(); it74 != inoutParam.end(); ++it74) {
        if ((*it74).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }

        data.WriteInt32((*it74).size());
        for (auto it75 = (*it74).begin(); it75 != (*it74).end(); ++it75) {
            if (!data.WriteInt32((it75->first))) {
                return ERR_INVALID_DATA;
            }
            if ((it75->second).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((it75->second).size());
            for (auto it76 = (it75->second).begin(); it76 != (it75->second).end(); ++it76) {
                if (!data.WriteInt32((*it76))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_MAP_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i77 = 0; i77 < outParamSize; ++i77) {
        std::unordered_map<int32_t, std::vector<int32_t>> value77;
        int32_t value77Size = reply.ReadInt32();
        for (int32_t i78 = 0; i78 < value77Size; ++i78) {
            int32_t key78 = reply.ReadInt32();
            std::vector<int32_t> value78;
            int32_t value78Size = reply.ReadInt32();
            if (value78Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i79 = 0; i79 < value78Size; ++i79) {
                int32_t value79 = reply.ReadInt32();
                value78.push_back(value79);
            }
            value77[key78] = value78;
        }
        outParam.push_back(value77);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i80 = 0; i80 < inoutParamSize; ++i80) {
        std::unordered_map<int32_t, std::vector<int32_t>> value80;
        int32_t value80Size = reply.ReadInt32();
        for (int32_t i81 = 0; i81 < value80Size; ++i81) {
            int32_t key81 = reply.ReadInt32();
            std::vector<int32_t> value81;
            int32_t value81Size = reply.ReadInt32();
            if (value81Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i82 = 0; i82 < value81Size; ++i82) {
                int32_t value82 = reply.ReadInt32();
                value81.push_back(value82);
            }
            value80[key81] = value81;
        }
        inoutParam.push_back(value80);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i83 = 0; i83 < funcResultSize; ++i83) {
        std::unordered_map<int32_t, std::vector<int32_t>> value83;
        int32_t value83Size = reply.ReadInt32();
        for (int32_t i84 = 0; i84 < value83Size; ++i84) {
            int32_t key84 = reply.ReadInt32();
            std::vector<int32_t> value84;
            int32_t value84Size = reply.ReadInt32();
            if (value84Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i85 = 0; i85 < value84Size; ++i85) {
                int32_t value85 = reply.ReadInt32();
                value84.push_back(value85);
            }
            value83[key84] = value84;
        }
        funcResult.push_back(value83);
    }
    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const std::vector<myseq>& inParam,
    std::vector<myseq>& outParam,
    std::vector<myseq>& inoutParam,
    std::vector<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it86 = inParam.begin(); it86 != inParam.end(); ++it86) {
        if (!data.WriteParcelable(&(*it86))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it87 = inoutParam.begin(); it87 != inoutParam.end(); ++it87) {
        if (!data.WriteParcelable(&(*it87))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SEQ_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i88 = 0; i88 < outParamSize; ++i88) {
        std::unique_ptr<myseq> value88(reply.ReadParcelable<myseq>());
        if (!value88) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(*value88);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i89 = 0; i89 < inoutParamSize; ++i89) {
        std::unique_ptr<myseq> value89(reply.ReadParcelable<myseq>());
        if (!value89) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(*value89);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i90 = 0; i90 < funcResultSize; ++i90) {
        std::unique_ptr<myseq> value90(reply.ReadParcelable<myseq>());
        if (!value90) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(*value90);
    }
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const std::vector<sptr<myinterface>>& inParam,
    std::vector<sptr<myinterface>>& outParam,
    std::vector<sptr<myinterface>>& inoutParam,
    std::vector<sptr<myinterface>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it91 = inParam.begin(); it91 != inParam.end(); ++it91) {
        if ((*it91) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it91)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it92 = inoutParam.begin(); it92 != inoutParam.end(); ++it92) {
        if ((*it92) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it92)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i93 = 0; i93 < outParamSize; ++i93) {
        sptr<myinterface> value93 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value93 == nullptr) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(value93);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i94 = 0; i94 < inoutParamSize; ++i94) {
        sptr<myinterface> value94 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value94 == nullptr) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(value94);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i95 = 0; i95 < funcResultSize; ++i95) {
        sptr<myinterface> value95 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value95 == nullptr) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(value95);
    }
    return ERR_OK;
}
} // namespace test
