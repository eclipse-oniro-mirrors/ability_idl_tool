/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {
ErrCode FooProxy::bool_test_func(
    const std::vector<bool>& inParam,
    std::vector<bool>& outParam,
    std::vector<bool>& inoutParam,
    std::vector<bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((*it) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((*it) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_BOOL_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i1 = 0; i1 < outParamSize; ++i1) {
        bool value1 = reply.ReadInt32() == 1 ? true : false;
        outParam.push_back(value1);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i2 = 0; i2 < inoutParamSize; ++i2) {
        bool value2 = reply.ReadInt32() == 1 ? true : false;
        inoutParam.push_back(value2);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i3 = 0; i3 < funcResultSize; ++i3) {
        bool value3 = reply.ReadInt32() == 1 ? true : false;
        funcResult.push_back(value3);
    }
    return ERR_OK;
}

ErrCode FooProxy::byte_test_func(
    const std::vector<bool>& inParam,
    std::vector<bool>& outParam,
    std::vector<bool>& inoutParam,
    std::vector<bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((*it) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((*it) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_BYTE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i4 = 0; i4 < outParamSize; ++i4) {
        bool value4 = reply.ReadInt32() == 1 ? true : false;
        outParam.push_back(value4);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i5 = 0; i5 < inoutParamSize; ++i5) {
        bool value5 = reply.ReadInt32() == 1 ? true : false;
        inoutParam.push_back(value5);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i6 = 0; i6 < funcResultSize; ++i6) {
        bool value6 = reply.ReadInt32() == 1 ? true : false;
        funcResult.push_back(value6);
    }
    return ERR_OK;
}

ErrCode FooProxy::short_test_func(
    const std::vector<short>& inParam,
    std::vector<short>& outParam,
    std::vector<short>& inoutParam,
    std::vector<short>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_SHORT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i7 = 0; i7 < outParamSize; ++i7) {
        short value7 = (short)reply.ReadInt32();
        outParam.push_back(value7);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i8 = 0; i8 < inoutParamSize; ++i8) {
        short value8 = (short)reply.ReadInt32();
        inoutParam.push_back(value8);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i9 = 0; i9 < funcResultSize; ++i9) {
        short value9 = (short)reply.ReadInt32();
        funcResult.push_back(value9);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_test_func(
    const std::vector<int32_t>& inParam,
    std::vector<int32_t>& outParam,
    std::vector<int32_t>& inoutParam,
    std::vector<int32_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i10 = 0; i10 < outParamSize; ++i10) {
        int32_t value10 = reply.ReadInt32();
        outParam.push_back(value10);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i11 = 0; i11 < inoutParamSize; ++i11) {
        int32_t value11 = reply.ReadInt32();
        inoutParam.push_back(value11);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i12 = 0; i12 < funcResultSize; ++i12) {
        int32_t value12 = reply.ReadInt32();
        funcResult.push_back(value12);
    }
    return ERR_OK;
}

ErrCode FooProxy::long_test_func(
    const std::vector<int64_t>& inParam,
    std::vector<int64_t>& outParam,
    std::vector<int64_t>& inoutParam,
    std::vector<int64_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt64((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt64((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_LONG_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i13 = 0; i13 < outParamSize; ++i13) {
        int64_t value13 = reply.ReadInt64();
        outParam.push_back(value13);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i14 = 0; i14 < inoutParamSize; ++i14) {
        int64_t value14 = reply.ReadInt64();
        inoutParam.push_back(value14);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i15 = 0; i15 < funcResultSize; ++i15) {
        int64_t value15 = reply.ReadInt64();
        funcResult.push_back(value15);
    }
    return ERR_OK;
}

ErrCode FooProxy::string_test_func(
    const std::vector<std::string>& inParam,
    std::vector<std::string>& outParam,
    std::vector<std::string>& inoutParam,
    std::vector<std::string>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteString16(Str8ToStr16((*it)))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteString16(Str8ToStr16((*it)))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_STRING_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i16 = 0; i16 < outParamSize; ++i16) {
        std::string value16 = Str16ToStr8(reply.ReadString16());
        outParam.push_back(value16);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i17 = 0; i17 < inoutParamSize; ++i17) {
        std::string value17 = Str16ToStr8(reply.ReadString16());
        inoutParam.push_back(value17);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i18 = 0; i18 < funcResultSize; ++i18) {
        std::string value18 = Str16ToStr8(reply.ReadString16());
        funcResult.push_back(value18);
    }
    return ERR_OK;
}

ErrCode FooProxy::float_test_func(
    const std::vector<float>& inParam,
    std::vector<float>& outParam,
    std::vector<float>& inoutParam,
    std::vector<float>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteFloat((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteFloat((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_FLOAT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i19 = 0; i19 < outParamSize; ++i19) {
        float value19 = reply.ReadFloat();
        outParam.push_back(value19);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i20 = 0; i20 < inoutParamSize; ++i20) {
        float value20 = reply.ReadFloat();
        inoutParam.push_back(value20);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i21 = 0; i21 < funcResultSize; ++i21) {
        float value21 = reply.ReadFloat();
        funcResult.push_back(value21);
    }
    return ERR_OK;
}

ErrCode FooProxy::double_test_func(
    const std::vector<double>& inParam,
    std::vector<double>& outParam,
    std::vector<double>& inoutParam,
    std::vector<double>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteDouble((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteDouble((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i22 = 0; i22 < outParamSize; ++i22) {
        double value22 = reply.ReadDouble();
        outParam.push_back(value22);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i23 = 0; i23 < inoutParamSize; ++i23) {
        double value23 = reply.ReadDouble();
        inoutParam.push_back(value23);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i24 = 0; i24 < funcResultSize; ++i24) {
        double value24 = reply.ReadDouble();
        funcResult.push_back(value24);
    }
    return ERR_OK;
}

ErrCode FooProxy::char_test_func(
    const std::vector<zchar>& inParam,
    std::vector<zchar>& outParam,
    std::vector<zchar>& inoutParam,
    std::vector<zchar>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_CHAR_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i25 = 0; i25 < outParamSize; ++i25) {
        zchar value25 = (zchar)reply.ReadInt32();
        outParam.push_back(value25);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i26 = 0; i26 < inoutParamSize; ++i26) {
        zchar value26 = (zchar)reply.ReadInt32();
        inoutParam.push_back(value26);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i27 = 0; i27 < funcResultSize; ++i27) {
        zchar value27 = (zchar)reply.ReadInt32();
        funcResult.push_back(value27);
    }
    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const std::vector<myseq>& inParam,
    std::vector<myseq>& outParam,
    std::vector<myseq>& inoutParam,
    std::vector<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteParcelable(&(*it))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteParcelable(&(*it))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_SEQ_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i28 = 0; i28 < outParamSize; ++i28) {
        std::unique_ptr<myseq> value28(reply.ReadParcelable<myseq>());
        if (!value28) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(*value28);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i29 = 0; i29 < inoutParamSize; ++i29) {
        std::unique_ptr<myseq> value29(reply.ReadParcelable<myseq>());
        if (!value29) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(*value29);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i30 = 0; i30 < funcResultSize; ++i30) {
        std::unique_ptr<myseq> value30(reply.ReadParcelable<myseq>());
        if (!value30) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(*value30);
    }
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const std::vector<sptr<myinterface>>& inParam,
    std::vector<sptr<myinterface>>& outParam,
    std::vector<sptr<myinterface>>& inoutParam,
    std::vector<sptr<myinterface>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if ((*it) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if ((*it) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (remote == nullptr) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i31 = 0; i31 < outParamSize; ++i31) {
        sptr<myinterface> value31 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value31 == nullptr) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(value31);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i32 = 0; i32 < inoutParamSize; ++i32) {
        sptr<myinterface> value32 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value32 == nullptr) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(value32);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i33 = 0; i33 < funcResultSize; ++i33) {
        sptr<myinterface> value33 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value33 == nullptr) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(value33);
    }
    return ERR_OK;
}
} // namespace test
