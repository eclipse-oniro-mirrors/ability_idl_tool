/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <mutex>
#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {
class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(const sptr<IRemoteObject>& remote);

    ~FooProxy() override;

    void RegisterOnRemoteDiedCallback(const OnRemoteDiedCallback& callback) override
    {
        remoteDiedCallback_ = callback;
    }

    ErrCode bool_test_func(
        bool inParam,
        bool& outParam,
        bool inoutParam,
        bool& funcResult) override;

    ErrCode byte_test_func(
        int8_t inParam,
        int8_t& outParam,
        int8_t inoutParam,
        int8_t& funcResult) override;

    ErrCode short_test_func(
        short inParam,
        short& outParam,
        short inoutParam,
        short& funcResult) override;

    ErrCode char_test_func(
        zchar inParam,
        zchar& outParam,
        zchar inoutParam,
        zchar& funcResult) override;

    ErrCode int_test_func(
        int32_t inParam,
        int32_t& funcResult) override;

    ErrCode long_test_func(
        int64_t inParam,
        int64_t& outParam,
        int64_t inoutParam) override;

    ErrCode string_test_func(
        const std::string& inParam,
        const std::string& outParam,
        const std::string& inoutParam) override;

    ErrCode float_test_func(
        float inParam,
        float outParam,
        float inoutParam) override;

    ErrCode fd_test_func(
        int inParam,
        int& outParam,
        int inoutParam,
        int& funcResult) override;

    ErrCode double_test_func(
        double inParam) override;

private:
    class FooRecipient : public IRemoteObject::DeathRecipient {
    public:
        explicit FooRecipient(FooProxy& client) : client_(client) {}
        ~FooRecipient() override = default;
        void OnRemoteDied(const wptr<IRemoteObject>& remote) override
        {
            client_.OnRemoteDied(remote);
        }
    private:
        FooProxy& client_;
    };

    void RemoveDeathRecipient();
    void OnRemoteDied(const wptr<IRemoteObject>& remote);

    static inline BrokerDelegator<FooProxy> delegator_;
    sptr<IRemoteObject> remote_;
    sptr<IRemoteObject::DeathRecipient> deathRecipient_;
    OnRemoteDiedCallback remoteDiedCallback_;
    std::mutex mutex_;
    static constexpr size_t CAPACITY_BOOL_TEST_FUNC_1 = 1 << 10;
    static constexpr size_t CAPACITY_SHORT_TEST_FUNC_3 = 131071 << 10;
    static constexpr size_t CAPACITY_CHAR_TEST_FUNC_4 = 131071 << 10;
    static constexpr size_t CAPACITY_INT_TEST_FUNC_10 = 1 << 10;
    static constexpr size_t CAPACITY_LONG_TEST_FUNC_11 = 1 << 10;
    static constexpr size_t CAPACITY_FLOAT_TEST_FUNC_13 = 131071 << 10;
    static constexpr size_t CAPACITY_FD_TEST_FUNC_14 = 131071 << 10;
    static constexpr size_t CAPACITY_DOUBLE_TEST_FUNC_16777215 = 1 << 10;
};
} // namespace test
#endif // TEST_FOOPROXY_H

