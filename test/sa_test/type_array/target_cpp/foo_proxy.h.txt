/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include "ifoo.h"
#include <iremote_proxy.h>

namespace test {
class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

    ErrCode void_test_func() override;

    ErrCode bool_test_func(
        const std::vector<bool>& inParam,
        std::vector<bool>& outParam,
        std::vector<bool>& inoutParam,
        std::vector<bool>& result) override;

    ErrCode byte_test_func(
        const std::vector<int8_t>& inParam,
        std::vector<int8_t>& outParam,
        std::vector<int8_t>& inoutParam,
        std::vector<int8_t>& result) override;

    ErrCode short_test_func(
        const std::vector<short>& inParam,
        std::vector<short>& outParam,
        std::vector<short>& inoutParam,
        std::vector<short>& result) override;

    ErrCode int_test_func(
        const std::vector<int32_t>& inParam,
        std::vector<int32_t>& outParam,
        std::vector<int32_t>& inoutParam,
        std::vector<int32_t>& result) override;

    ErrCode long_test_func(
        const std::vector<int64_t>& inParam,
        std::vector<int64_t>& outParam,
        std::vector<int64_t>& inoutParam,
        std::vector<int64_t>& result) override;

    ErrCode string_test_func(
        const std::vector<std::string>& inParam,
        std::vector<std::string>& outParam,
        std::vector<std::string>& inoutParam,
        std::vector<std::string>& result) override;

    ErrCode float_test_func(
        const std::vector<float>& inParam,
        std::vector<float>& outParam,
        std::vector<float>& inoutParam,
        std::vector<float>& result) override;

    ErrCode double_test_func(
        const std::vector<double>& inParam,
        std::vector<double>& outParam,
        std::vector<double>& inoutParam,
        std::vector<double>& result) override;

    ErrCode char_test_func(
        const std::vector<zchar>& inParam,
        std::vector<zchar>& outParam,
        std::vector<zchar>& inoutParam,
        std::vector<zchar>& result) override;

    ErrCode seq_test_func(
        const std::vector<myseq>& inParam,
        std::vector<myseq>& outParam,
        std::vector<myseq>& inoutParam,
        std::vector<myseq>& result) override;

    ErrCode interface_test_func(
        const std::vector<sptr<myinterface>>& inParam,
        std::vector<sptr<myinterface>>& outParam,
        std::vector<sptr<myinterface>>& inoutParam,
        std::vector<sptr<myinterface>>& result) override;

private:
    static constexpr int32_t COMMAND_VOID_TEST_FUNC = MIN_TRANSACTION_ID + 0;
    static constexpr int32_t COMMAND_BOOL_TEST_FUNC = MIN_TRANSACTION_ID + 1;
    static constexpr int32_t COMMAND_BYTE_TEST_FUNC = MIN_TRANSACTION_ID + 2;
    static constexpr int32_t COMMAND_SHORT_TEST_FUNC = MIN_TRANSACTION_ID + 3;
    static constexpr int32_t COMMAND_INT_TEST_FUNC = MIN_TRANSACTION_ID + 4;
    static constexpr int32_t COMMAND_LONG_TEST_FUNC = MIN_TRANSACTION_ID + 5;
    static constexpr int32_t COMMAND_STRING_TEST_FUNC = MIN_TRANSACTION_ID + 6;
    static constexpr int32_t COMMAND_FLOAT_TEST_FUNC = MIN_TRANSACTION_ID + 7;
    static constexpr int32_t COMMAND_DOUBLE_TEST_FUNC = MIN_TRANSACTION_ID + 8;
    static constexpr int32_t COMMAND_CHAR_TEST_FUNC = MIN_TRANSACTION_ID + 9;
    static constexpr int32_t COMMAND_SEQ_TEST_FUNC = MIN_TRANSACTION_ID + 10;
    static constexpr int32_t COMMAND_INTERFACE_TEST_FUNC = MIN_TRANSACTION_ID + 11;

    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

