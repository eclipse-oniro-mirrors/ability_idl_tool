/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
        case IFooIpcCode::COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BOOL_TEST_FUNC: {
            std::vector<bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i91 = 0; i91 < inParamSize; ++i91) {
                bool value91 = data.ReadInt32() == 1 ? true : false;
                inParam.push_back(value91);
            }
            std::vector<bool> outParam;
            std::vector<bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i92 = 0; i92 < inoutParamSize; ++i92) {
                bool value92 = data.ReadInt32() == 1 ? true : false;
                inoutParam.push_back(value92);
            }
            std::vector<bool> result;
            ErrCode errCode = bool_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it93 = outParam.begin(); it93 != outParam.end(); ++it93) {
                    if (!reply.WriteInt32((*it93) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it94 = inoutParam.begin(); it94 != inoutParam.end(); ++it94) {
                    if (!reply.WriteInt32((*it94) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it95 = result.begin(); it95 != result.end(); ++it95) {
                    if (!reply.WriteInt32((*it95) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BYTE_TEST_FUNC: {
            std::vector<int8_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i96 = 0; i96 < inParamSize; ++i96) {
                int8_t value96 = (int8_t)data.ReadInt32();
                inParam.push_back(value96);
            }
            std::vector<int8_t> outParam;
            std::vector<int8_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i97 = 0; i97 < inoutParamSize; ++i97) {
                int8_t value97 = (int8_t)data.ReadInt32();
                inoutParam.push_back(value97);
            }
            std::vector<int8_t> result;
            ErrCode errCode = byte_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it98 = outParam.begin(); it98 != outParam.end(); ++it98) {
                    if (!reply.WriteInt32((*it98))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it99 = inoutParam.begin(); it99 != inoutParam.end(); ++it99) {
                    if (!reply.WriteInt32((*it99))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it100 = result.begin(); it100 != result.end(); ++it100) {
                    if (!reply.WriteInt32((*it100))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SHORT_TEST_FUNC: {
            std::vector<short> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i101 = 0; i101 < inParamSize; ++i101) {
                short value101 = (short)data.ReadInt32();
                inParam.push_back(value101);
            }
            std::vector<short> outParam;
            std::vector<short> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i102 = 0; i102 < inoutParamSize; ++i102) {
                short value102 = (short)data.ReadInt32();
                inoutParam.push_back(value102);
            }
            std::vector<short> result;
            ErrCode errCode = short_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it103 = outParam.begin(); it103 != outParam.end(); ++it103) {
                    if (!reply.WriteInt32((*it103))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it104 = inoutParam.begin(); it104 != inoutParam.end(); ++it104) {
                    if (!reply.WriteInt32((*it104))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it105 = result.begin(); it105 != result.end(); ++it105) {
                    if (!reply.WriteInt32((*it105))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_TEST_FUNC: {
            std::vector<int32_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i106 = 0; i106 < inParamSize; ++i106) {
                int32_t value106 = data.ReadInt32();
                inParam.push_back(value106);
            }
            std::vector<int32_t> outParam;
            std::vector<int32_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i107 = 0; i107 < inoutParamSize; ++i107) {
                int32_t value107 = data.ReadInt32();
                inoutParam.push_back(value107);
            }
            std::vector<int32_t> result;
            ErrCode errCode = int_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it108 = outParam.begin(); it108 != outParam.end(); ++it108) {
                    if (!reply.WriteInt32((*it108))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it109 = inoutParam.begin(); it109 != inoutParam.end(); ++it109) {
                    if (!reply.WriteInt32((*it109))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it110 = result.begin(); it110 != result.end(); ++it110) {
                    if (!reply.WriteInt32((*it110))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_2_TEST_FUNC: {
            std::vector<std::vector<int32_t>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i111 = 0; i111 < inParamSize; ++i111) {
                std::vector<int32_t> value111;
                int32_t value111Size = data.ReadInt32();
                if (value111Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i112 = 0; i112 < value111Size; ++i112) {
                    int32_t value112 = data.ReadInt32();
                    value111.push_back(value112);
                }
                inParam.push_back(value111);
            }
            std::vector<std::vector<int32_t>> outParam;
            std::vector<std::vector<int32_t>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i113 = 0; i113 < inoutParamSize; ++i113) {
                std::vector<int32_t> value113;
                int32_t value113Size = data.ReadInt32();
                if (value113Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i114 = 0; i114 < value113Size; ++i114) {
                    int32_t value114 = data.ReadInt32();
                    value113.push_back(value114);
                }
                inoutParam.push_back(value113);
            }
            std::vector<std::vector<int32_t>> result;
            ErrCode errCode = int_2_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it115 = outParam.begin(); it115 != outParam.end(); ++it115) {
                    if ((*it115).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it115).size());
                    for (auto it116 = (*it115).begin(); it116 != (*it115).end(); ++it116) {
                        if (!reply.WriteInt32((*it116))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it117 = inoutParam.begin(); it117 != inoutParam.end(); ++it117) {
                    if ((*it117).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it117).size());
                    for (auto it118 = (*it117).begin(); it118 != (*it117).end(); ++it118) {
                        if (!reply.WriteInt32((*it118))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it119 = result.begin(); it119 != result.end(); ++it119) {
                    if ((*it119).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it119).size());
                    for (auto it120 = (*it119).begin(); it120 != (*it119).end(); ++it120) {
                        if (!reply.WriteInt32((*it120))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_3_TEST_FUNC: {
            std::vector<std::vector<std::vector<int32_t>>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i121 = 0; i121 < inParamSize; ++i121) {
                std::vector<std::vector<int32_t>> value121;
                int32_t value121Size = data.ReadInt32();
                if (value121Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i122 = 0; i122 < value121Size; ++i122) {
                    std::vector<int32_t> value122;
                    int32_t value122Size = data.ReadInt32();
                    if (value122Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i123 = 0; i123 < value122Size; ++i123) {
                        int32_t value123 = data.ReadInt32();
                        value122.push_back(value123);
                    }
                    value121.push_back(value122);
                }
                inParam.push_back(value121);
            }
            std::vector<std::vector<std::vector<int32_t>>> outParam;
            std::vector<std::vector<std::vector<int32_t>>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i124 = 0; i124 < inoutParamSize; ++i124) {
                std::vector<std::vector<int32_t>> value124;
                int32_t value124Size = data.ReadInt32();
                if (value124Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i125 = 0; i125 < value124Size; ++i125) {
                    std::vector<int32_t> value125;
                    int32_t value125Size = data.ReadInt32();
                    if (value125Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i126 = 0; i126 < value125Size; ++i126) {
                        int32_t value126 = data.ReadInt32();
                        value125.push_back(value126);
                    }
                    value124.push_back(value125);
                }
                inoutParam.push_back(value124);
            }
            std::vector<std::vector<std::vector<int32_t>>> result;
            ErrCode errCode = int_3_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it127 = outParam.begin(); it127 != outParam.end(); ++it127) {
                    if ((*it127).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it127).size());
                    for (auto it128 = (*it127).begin(); it128 != (*it127).end(); ++it128) {
                        if ((*it128).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it128).size());
                        for (auto it129 = (*it128).begin(); it129 != (*it128).end(); ++it129) {
                            if (!reply.WriteInt32((*it129))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it130 = inoutParam.begin(); it130 != inoutParam.end(); ++it130) {
                    if ((*it130).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it130).size());
                    for (auto it131 = (*it130).begin(); it131 != (*it130).end(); ++it131) {
                        if ((*it131).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it131).size());
                        for (auto it132 = (*it131).begin(); it132 != (*it131).end(); ++it132) {
                            if (!reply.WriteInt32((*it132))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it133 = result.begin(); it133 != result.end(); ++it133) {
                    if ((*it133).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it133).size());
                    for (auto it134 = (*it133).begin(); it134 != (*it133).end(); ++it134) {
                        if ((*it134).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it134).size());
                        for (auto it135 = (*it134).begin(); it135 != (*it134).end(); ++it135) {
                            if (!reply.WriteInt32((*it135))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_MAP_TEST_FUNC: {
            std::vector<std::unordered_map<int32_t, int32_t>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i136 = 0; i136 < inParamSize; ++i136) {
                std::unordered_map<int32_t, int32_t> value136;
                int32_t value136Size = data.ReadInt32();
                for (int32_t i137 = 0; i137 < value136Size; ++i137) {
                    int32_t key137 = data.ReadInt32();
                    int32_t value137 = data.ReadInt32();
                    value136[key137] = value137;
                }
                inParam.push_back(value136);
            }
            std::vector<std::unordered_map<int32_t, int32_t>> outParam;
            std::vector<std::unordered_map<int32_t, int32_t>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i138 = 0; i138 < inoutParamSize; ++i138) {
                std::unordered_map<int32_t, int32_t> value138;
                int32_t value138Size = data.ReadInt32();
                for (int32_t i139 = 0; i139 < value138Size; ++i139) {
                    int32_t key139 = data.ReadInt32();
                    int32_t value139 = data.ReadInt32();
                    value138[key139] = value139;
                }
                inoutParam.push_back(value138);
            }
            std::vector<std::unordered_map<int32_t, int32_t>> result;
            ErrCode errCode = map_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it140 = outParam.begin(); it140 != outParam.end(); ++it140) {
                    if ((*it140).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it140).size());
                    for (auto it141 = (*it140).begin(); it141 != (*it140).end(); ++it141) {
                        if (!reply.WriteInt32((it141->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it141->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it142 = inoutParam.begin(); it142 != inoutParam.end(); ++it142) {
                    if ((*it142).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it142).size());
                    for (auto it143 = (*it142).begin(); it143 != (*it142).end(); ++it143) {
                        if (!reply.WriteInt32((it143->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it143->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it144 = result.begin(); it144 != result.end(); ++it144) {
                    if ((*it144).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it144).size());
                    for (auto it145 = (*it144).begin(); it145 != (*it144).end(); ++it145) {
                        if (!reply.WriteInt32((it145->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it145->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_LONG_TEST_FUNC: {
            std::vector<int64_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i146 = 0; i146 < inParamSize; ++i146) {
                int64_t value146 = data.ReadInt64();
                inParam.push_back(value146);
            }
            std::vector<int64_t> outParam;
            std::vector<int64_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i147 = 0; i147 < inoutParamSize; ++i147) {
                int64_t value147 = data.ReadInt64();
                inoutParam.push_back(value147);
            }
            std::vector<int64_t> result;
            ErrCode errCode = long_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it148 = outParam.begin(); it148 != outParam.end(); ++it148) {
                    if (!reply.WriteInt64((*it148))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it149 = inoutParam.begin(); it149 != inoutParam.end(); ++it149) {
                    if (!reply.WriteInt64((*it149))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it150 = result.begin(); it150 != result.end(); ++it150) {
                    if (!reply.WriteInt64((*it150))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_STRING_TEST_FUNC: {
            std::vector<std::string> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i151 = 0; i151 < inParamSize; ++i151) {
                std::string value151 = Str16ToStr8(data.ReadString16());
                inParam.push_back(value151);
            }
            std::vector<std::string> outParam;
            std::vector<std::string> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i152 = 0; i152 < inoutParamSize; ++i152) {
                std::string value152 = Str16ToStr8(data.ReadString16());
                inoutParam.push_back(value152);
            }
            std::vector<std::string> result;
            ErrCode errCode = string_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it153 = outParam.begin(); it153 != outParam.end(); ++it153) {
                    if (!reply.WriteString16(Str8ToStr16((*it153)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it154 = inoutParam.begin(); it154 != inoutParam.end(); ++it154) {
                    if (!reply.WriteString16(Str8ToStr16((*it154)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it155 = result.begin(); it155 != result.end(); ++it155) {
                    if (!reply.WriteString16(Str8ToStr16((*it155)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_FLOAT_TEST_FUNC: {
            std::vector<float> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i156 = 0; i156 < inParamSize; ++i156) {
                float value156 = data.ReadFloat();
                inParam.push_back(value156);
            }
            std::vector<float> outParam;
            std::vector<float> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i157 = 0; i157 < inoutParamSize; ++i157) {
                float value157 = data.ReadFloat();
                inoutParam.push_back(value157);
            }
            std::vector<float> result;
            ErrCode errCode = float_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it158 = outParam.begin(); it158 != outParam.end(); ++it158) {
                    if (!reply.WriteFloat((*it158))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it159 = inoutParam.begin(); it159 != inoutParam.end(); ++it159) {
                    if (!reply.WriteFloat((*it159))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it160 = result.begin(); it160 != result.end(); ++it160) {
                    if (!reply.WriteFloat((*it160))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC: {
            std::vector<double> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i161 = 0; i161 < inParamSize; ++i161) {
                double value161 = data.ReadDouble();
                inParam.push_back(value161);
            }
            std::vector<double> outParam;
            std::vector<double> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i162 = 0; i162 < inoutParamSize; ++i162) {
                double value162 = data.ReadDouble();
                inoutParam.push_back(value162);
            }
            std::vector<double> result;
            ErrCode errCode = double_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it163 = outParam.begin(); it163 != outParam.end(); ++it163) {
                    if (!reply.WriteDouble((*it163))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it164 = inoutParam.begin(); it164 != inoutParam.end(); ++it164) {
                    if (!reply.WriteDouble((*it164))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it165 = result.begin(); it165 != result.end(); ++it165) {
                    if (!reply.WriteDouble((*it165))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_CHAR_TEST_FUNC: {
            std::vector<char> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i166 = 0; i166 < inParamSize; ++i166) {
                char value166 = (char)data.ReadInt32();
                inParam.push_back(value166);
            }
            std::vector<char> outParam;
            std::vector<char> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i167 = 0; i167 < inoutParamSize; ++i167) {
                char value167 = (char)data.ReadInt32();
                inoutParam.push_back(value167);
            }
            std::vector<char> result;
            ErrCode errCode = char_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it168 = outParam.begin(); it168 != outParam.end(); ++it168) {
                    if (!reply.WriteInt32((*it168))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it169 = inoutParam.begin(); it169 != inoutParam.end(); ++it169) {
                    if (!reply.WriteInt32((*it169))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it170 = result.begin(); it170 != result.end(); ++it170) {
                    if (!reply.WriteInt32((*it170))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC: {
            std::vector<myseq> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i171 = 0; i171 < inParamSize; ++i171) {
                std::unique_ptr<myseq> value171(data.ReadParcelable<myseq>());
                if (!value171) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(*value171);
            }
            std::vector<myseq> outParam;
            std::vector<myseq> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i172 = 0; i172 < inoutParamSize; ++i172) {
                std::unique_ptr<myseq> value172(data.ReadParcelable<myseq>());
                if (!value172) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(*value172);
            }
            std::vector<myseq> result;
            ErrCode errCode = seq_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it173 = outParam.begin(); it173 != outParam.end(); ++it173) {
                    if (!reply.WriteParcelable(&(*it173))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it174 = inoutParam.begin(); it174 != inoutParam.end(); ++it174) {
                    if (!reply.WriteParcelable(&(*it174))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it175 = result.begin(); it175 != result.end(); ++it175) {
                    if (!reply.WriteParcelable(&(*it175))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC: {
            std::vector<sptr<myinterface>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i176 = 0; i176 < inParamSize; ++i176) {
                sptr<myinterface> value176 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value176 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(value176);
            }
            std::vector<sptr<myinterface>> outParam;
            std::vector<sptr<myinterface>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i177 = 0; i177 < inoutParamSize; ++i177) {
                sptr<myinterface> value177 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value177 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(value177);
            }
            std::vector<sptr<myinterface>> result;
            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it178 = outParam.begin(); it178 != outParam.end(); ++it178) {
                    if ((*it178) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it178)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it179 = inoutParam.begin(); it179 != inoutParam.end(); ++it179) {
                    if ((*it179) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it179)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it180 = result.begin(); it180 != result.end(); ++it180) {
                    if ((*it180) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it180)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
