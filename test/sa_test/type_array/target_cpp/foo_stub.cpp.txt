/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
        case IFooIpcCode::COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BOOL_TEST_FUNC: {
            std::vector<bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i1 = 0; i1 < inParamSize; ++i1) {
                bool value1 = data.ReadInt32() == 1 ? true : false;
                inParam.push_back(value1);
            }
            std::vector<bool> outParam;
            std::vector<bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i2 = 0; i2 < inoutParamSize; ++i2) {
                bool value2 = data.ReadInt32() == 1 ? true : false;
                inoutParam.push_back(value2);
            }
            std::vector<bool> result;
            ErrCode errCode = bool_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it3 = outParam.begin(); it3 != outParam.end(); ++it3) {
                    if (!reply.WriteInt32((*it3) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it4 = inoutParam.begin(); it4 != inoutParam.end(); ++it4) {
                    if (!reply.WriteInt32((*it4) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it5 = result.begin(); it5 != result.end(); ++it5) {
                    if (!reply.WriteInt32((*it5) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BYTE_TEST_FUNC: {
            std::vector<int8_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i6 = 0; i6 < inParamSize; ++i6) {
                int8_t value6 = (int8_t)data.ReadInt32();
                inParam.push_back(value6);
            }
            std::vector<int8_t> outParam;
            std::vector<int8_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i7 = 0; i7 < inoutParamSize; ++i7) {
                int8_t value7 = (int8_t)data.ReadInt32();
                inoutParam.push_back(value7);
            }
            std::vector<int8_t> result;
            ErrCode errCode = byte_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it8 = outParam.begin(); it8 != outParam.end(); ++it8) {
                    if (!reply.WriteInt32((*it8))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it9 = inoutParam.begin(); it9 != inoutParam.end(); ++it9) {
                    if (!reply.WriteInt32((*it9))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it10 = result.begin(); it10 != result.end(); ++it10) {
                    if (!reply.WriteInt32((*it10))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SHORT_TEST_FUNC: {
            std::vector<short> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i11 = 0; i11 < inParamSize; ++i11) {
                short value11 = (short)data.ReadInt32();
                inParam.push_back(value11);
            }
            std::vector<short> outParam;
            std::vector<short> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i12 = 0; i12 < inoutParamSize; ++i12) {
                short value12 = (short)data.ReadInt32();
                inoutParam.push_back(value12);
            }
            std::vector<short> result;
            ErrCode errCode = short_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it13 = outParam.begin(); it13 != outParam.end(); ++it13) {
                    if (!reply.WriteInt32((*it13))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it14 = inoutParam.begin(); it14 != inoutParam.end(); ++it14) {
                    if (!reply.WriteInt32((*it14))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it15 = result.begin(); it15 != result.end(); ++it15) {
                    if (!reply.WriteInt32((*it15))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_TEST_FUNC: {
            std::vector<int32_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i16 = 0; i16 < inParamSize; ++i16) {
                int32_t value16 = data.ReadInt32();
                inParam.push_back(value16);
            }
            std::vector<int32_t> outParam;
            std::vector<int32_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i17 = 0; i17 < inoutParamSize; ++i17) {
                int32_t value17 = data.ReadInt32();
                inoutParam.push_back(value17);
            }
            std::vector<int32_t> result;
            ErrCode errCode = int_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it18 = outParam.begin(); it18 != outParam.end(); ++it18) {
                    if (!reply.WriteInt32((*it18))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it19 = inoutParam.begin(); it19 != inoutParam.end(); ++it19) {
                    if (!reply.WriteInt32((*it19))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it20 = result.begin(); it20 != result.end(); ++it20) {
                    if (!reply.WriteInt32((*it20))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_2_TEST_FUNC: {
            std::vector<std::vector<int32_t>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i21 = 0; i21 < inParamSize; ++i21) {
                std::vector<int32_t> value21;
                int32_t value21Size = data.ReadInt32();
                if (value21Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i22 = 0; i22 < value21Size; ++i22) {
                    int32_t value22 = data.ReadInt32();
                    value21.push_back(value22);
                }
                inParam.push_back(value21);
            }
            std::vector<std::vector<int32_t>> outParam;
            std::vector<std::vector<int32_t>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i23 = 0; i23 < inoutParamSize; ++i23) {
                std::vector<int32_t> value23;
                int32_t value23Size = data.ReadInt32();
                if (value23Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i24 = 0; i24 < value23Size; ++i24) {
                    int32_t value24 = data.ReadInt32();
                    value23.push_back(value24);
                }
                inoutParam.push_back(value23);
            }
            std::vector<std::vector<int32_t>> result;
            ErrCode errCode = int_2_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it25 = outParam.begin(); it25 != outParam.end(); ++it25) {
                    if ((*it25).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it25).size());
                    for (auto it26 = (*it25).begin(); it26 != (*it25).end(); ++it26) {
                        if (!reply.WriteInt32((*it26))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it27 = inoutParam.begin(); it27 != inoutParam.end(); ++it27) {
                    if ((*it27).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it27).size());
                    for (auto it28 = (*it27).begin(); it28 != (*it27).end(); ++it28) {
                        if (!reply.WriteInt32((*it28))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it29 = result.begin(); it29 != result.end(); ++it29) {
                    if ((*it29).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it29).size());
                    for (auto it30 = (*it29).begin(); it30 != (*it29).end(); ++it30) {
                        if (!reply.WriteInt32((*it30))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_3_TEST_FUNC: {
            std::vector<std::vector<std::vector<int32_t>>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i31 = 0; i31 < inParamSize; ++i31) {
                std::vector<std::vector<int32_t>> value31;
                int32_t value31Size = data.ReadInt32();
                if (value31Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i32 = 0; i32 < value31Size; ++i32) {
                    std::vector<int32_t> value32;
                    int32_t value32Size = data.ReadInt32();
                    if (value32Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i33 = 0; i33 < value32Size; ++i33) {
                        int32_t value33 = data.ReadInt32();
                        value32.push_back(value33);
                    }
                    value31.push_back(value32);
                }
                inParam.push_back(value31);
            }
            std::vector<std::vector<std::vector<int32_t>>> outParam;
            std::vector<std::vector<std::vector<int32_t>>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i34 = 0; i34 < inoutParamSize; ++i34) {
                std::vector<std::vector<int32_t>> value34;
                int32_t value34Size = data.ReadInt32();
                if (value34Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i35 = 0; i35 < value34Size; ++i35) {
                    std::vector<int32_t> value35;
                    int32_t value35Size = data.ReadInt32();
                    if (value35Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    for (int32_t i36 = 0; i36 < value35Size; ++i36) {
                        int32_t value36 = data.ReadInt32();
                        value35.push_back(value36);
                    }
                    value34.push_back(value35);
                }
                inoutParam.push_back(value34);
            }
            std::vector<std::vector<std::vector<int32_t>>> result;
            ErrCode errCode = int_3_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it37 = outParam.begin(); it37 != outParam.end(); ++it37) {
                    if ((*it37).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it37).size());
                    for (auto it38 = (*it37).begin(); it38 != (*it37).end(); ++it38) {
                        if ((*it38).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it38).size());
                        for (auto it39 = (*it38).begin(); it39 != (*it38).end(); ++it39) {
                            if (!reply.WriteInt32((*it39))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it40 = inoutParam.begin(); it40 != inoutParam.end(); ++it40) {
                    if ((*it40).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it40).size());
                    for (auto it41 = (*it40).begin(); it41 != (*it40).end(); ++it41) {
                        if ((*it41).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it41).size());
                        for (auto it42 = (*it41).begin(); it42 != (*it41).end(); ++it42) {
                            if (!reply.WriteInt32((*it42))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it43 = result.begin(); it43 != result.end(); ++it43) {
                    if ((*it43).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }
                    reply.WriteInt32((*it43).size());
                    for (auto it44 = (*it43).begin(); it44 != (*it43).end(); ++it44) {
                        if ((*it44).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                            return ERR_INVALID_DATA;
                        }
                        reply.WriteInt32((*it44).size());
                        for (auto it45 = (*it44).begin(); it45 != (*it44).end(); ++it45) {
                            if (!reply.WriteInt32((*it45))) {
                                return ERR_INVALID_DATA;
                            }
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_MAP_TEST_FUNC: {
            std::vector<std::unordered_map<int32_t, int32_t>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i46 = 0; i46 < inParamSize; ++i46) {
                std::unordered_map<int32_t, int32_t> value46;
                int32_t value46Size = data.ReadInt32();
                if (value46Size > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i47 = 0; i47 < value46Size; ++i47) {
                    int32_t key47 = data.ReadInt32();
                    int32_t value47 = data.ReadInt32();
                    value46[key47] = value47;
                }
                inParam.push_back(value46);
            }
            std::vector<std::unordered_map<int32_t, int32_t>> outParam;
            std::vector<std::unordered_map<int32_t, int32_t>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i48 = 0; i48 < inoutParamSize; ++i48) {
                std::unordered_map<int32_t, int32_t> value48;
                int32_t value48Size = data.ReadInt32();
                if (value48Size > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                for (int32_t i49 = 0; i49 < value48Size; ++i49) {
                    int32_t key49 = data.ReadInt32();
                    int32_t value49 = data.ReadInt32();
                    value48[key49] = value49;
                }
                inoutParam.push_back(value48);
            }
            std::vector<std::unordered_map<int32_t, int32_t>> result;
            ErrCode errCode = map_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it50 = outParam.begin(); it50 != outParam.end(); ++it50) {
                    if ((*it50).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it50).size());
                    for (auto it51 = (*it50).begin(); it51 != (*it50).end(); ++it51) {
                        if (!reply.WriteInt32((it51->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it51->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it52 = inoutParam.begin(); it52 != inoutParam.end(); ++it52) {
                    if ((*it52).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it52).size());
                    for (auto it53 = (*it52).begin(); it53 != (*it52).end(); ++it53) {
                        if (!reply.WriteInt32((it53->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it53->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it54 = result.begin(); it54 != result.end(); ++it54) {
                    if ((*it54).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it54).size());
                    for (auto it55 = (*it54).begin(); it55 != (*it54).end(); ++it55) {
                        if (!reply.WriteInt32((it55->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteInt32((it55->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_LONG_TEST_FUNC: {
            std::vector<int64_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i56 = 0; i56 < inParamSize; ++i56) {
                int64_t value56 = data.ReadInt64();
                inParam.push_back(value56);
            }
            std::vector<int64_t> outParam;
            std::vector<int64_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i57 = 0; i57 < inoutParamSize; ++i57) {
                int64_t value57 = data.ReadInt64();
                inoutParam.push_back(value57);
            }
            std::vector<int64_t> result;
            ErrCode errCode = long_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it58 = outParam.begin(); it58 != outParam.end(); ++it58) {
                    if (!reply.WriteInt64((*it58))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it59 = inoutParam.begin(); it59 != inoutParam.end(); ++it59) {
                    if (!reply.WriteInt64((*it59))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it60 = result.begin(); it60 != result.end(); ++it60) {
                    if (!reply.WriteInt64((*it60))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_STRING_TEST_FUNC: {
            std::vector<std::string> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i61 = 0; i61 < inParamSize; ++i61) {
                std::string value61 = Str16ToStr8(data.ReadString16());
                inParam.push_back(value61);
            }
            std::vector<std::string> outParam;
            std::vector<std::string> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i62 = 0; i62 < inoutParamSize; ++i62) {
                std::string value62 = Str16ToStr8(data.ReadString16());
                inoutParam.push_back(value62);
            }
            std::vector<std::string> result;
            ErrCode errCode = string_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it63 = outParam.begin(); it63 != outParam.end(); ++it63) {
                    if (!reply.WriteString16(Str8ToStr16((*it63)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it64 = inoutParam.begin(); it64 != inoutParam.end(); ++it64) {
                    if (!reply.WriteString16(Str8ToStr16((*it64)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it65 = result.begin(); it65 != result.end(); ++it65) {
                    if (!reply.WriteString16(Str8ToStr16((*it65)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_FLOAT_TEST_FUNC: {
            std::vector<float> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i66 = 0; i66 < inParamSize; ++i66) {
                float value66 = data.ReadFloat();
                inParam.push_back(value66);
            }
            std::vector<float> outParam;
            std::vector<float> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i67 = 0; i67 < inoutParamSize; ++i67) {
                float value67 = data.ReadFloat();
                inoutParam.push_back(value67);
            }
            std::vector<float> result;
            ErrCode errCode = float_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it68 = outParam.begin(); it68 != outParam.end(); ++it68) {
                    if (!reply.WriteFloat((*it68))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it69 = inoutParam.begin(); it69 != inoutParam.end(); ++it69) {
                    if (!reply.WriteFloat((*it69))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it70 = result.begin(); it70 != result.end(); ++it70) {
                    if (!reply.WriteFloat((*it70))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC: {
            std::vector<double> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i71 = 0; i71 < inParamSize; ++i71) {
                double value71 = data.ReadDouble();
                inParam.push_back(value71);
            }
            std::vector<double> outParam;
            std::vector<double> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i72 = 0; i72 < inoutParamSize; ++i72) {
                double value72 = data.ReadDouble();
                inoutParam.push_back(value72);
            }
            std::vector<double> result;
            ErrCode errCode = double_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it73 = outParam.begin(); it73 != outParam.end(); ++it73) {
                    if (!reply.WriteDouble((*it73))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it74 = inoutParam.begin(); it74 != inoutParam.end(); ++it74) {
                    if (!reply.WriteDouble((*it74))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it75 = result.begin(); it75 != result.end(); ++it75) {
                    if (!reply.WriteDouble((*it75))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_CHAR_TEST_FUNC: {
            std::vector<char> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i76 = 0; i76 < inParamSize; ++i76) {
                char value76 = (char)data.ReadInt32();
                inParam.push_back(value76);
            }
            std::vector<char> outParam;
            std::vector<char> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i77 = 0; i77 < inoutParamSize; ++i77) {
                char value77 = (char)data.ReadInt32();
                inoutParam.push_back(value77);
            }
            std::vector<char> result;
            ErrCode errCode = char_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it78 = outParam.begin(); it78 != outParam.end(); ++it78) {
                    if (!reply.WriteInt32((*it78))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it79 = inoutParam.begin(); it79 != inoutParam.end(); ++it79) {
                    if (!reply.WriteInt32((*it79))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it80 = result.begin(); it80 != result.end(); ++it80) {
                    if (!reply.WriteInt32((*it80))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC: {
            std::vector<myseq> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i81 = 0; i81 < inParamSize; ++i81) {
                std::unique_ptr<myseq> value81(data.ReadParcelable<myseq>());
                if (!value81) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(*value81);
            }
            std::vector<myseq> outParam;
            std::vector<myseq> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i82 = 0; i82 < inoutParamSize; ++i82) {
                std::unique_ptr<myseq> value82(data.ReadParcelable<myseq>());
                if (!value82) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(*value82);
            }
            std::vector<myseq> result;
            ErrCode errCode = seq_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it83 = outParam.begin(); it83 != outParam.end(); ++it83) {
                    if (!reply.WriteParcelable(&(*it83))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it84 = inoutParam.begin(); it84 != inoutParam.end(); ++it84) {
                    if (!reply.WriteParcelable(&(*it84))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it85 = result.begin(); it85 != result.end(); ++it85) {
                    if (!reply.WriteParcelable(&(*it85))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC: {
            std::vector<sptr<myinterface>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i86 = 0; i86 < inParamSize; ++i86) {
                sptr<myinterface> value86 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value86 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(value86);
            }
            std::vector<sptr<myinterface>> outParam;
            std::vector<sptr<myinterface>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i87 = 0; i87 < inoutParamSize; ++i87) {
                sptr<myinterface> value87 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value87 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(value87);
            }
            std::vector<sptr<myinterface>> result;
            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it88 = outParam.begin(); it88 != outParam.end(); ++it88) {
                    if ((*it88) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it88)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it89 = inoutParam.begin(); it89 != inoutParam.end(); ++it89) {
                    if ((*it89) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it89)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it90 = result.begin(); it90 != result.end(); ++it90) {
                    if ((*it90) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it90)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
