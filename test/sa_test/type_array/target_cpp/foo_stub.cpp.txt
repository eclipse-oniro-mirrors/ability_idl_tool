/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {
int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (code) {
        case COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case COMMAND_BOOL_TEST_FUNC: {
            std::vector<bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i34 = 0; i34 < inParamSize; ++i34) {
                bool value34 = data.ReadInt32() == 1 ? true : false;
                inParam.push_back(value34);
            }
            std::vector<bool> outParam;
            std::vector<bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i35 = 0; i35 < inoutParamSize; ++i35) {
                bool value35 = data.ReadInt32() == 1 ? true : false;
                inoutParam.push_back(value35);
            }
            std::vector<bool> result;
            ErrCode errCode = bool_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((*it) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((*it) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((*it) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_BYTE_TEST_FUNC: {
            std::vector<int8_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i36 = 0; i36 < inParamSize; ++i36) {
                int8_t value36 = (int8_t)data.ReadInt32();
                inParam.push_back(value36);
            }
            std::vector<int8_t> outParam;
            std::vector<int8_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i37 = 0; i37 < inoutParamSize; ++i37) {
                int8_t value37 = (int8_t)data.ReadInt32();
                inoutParam.push_back(value37);
            }
            std::vector<int8_t> result;
            ErrCode errCode = byte_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SHORT_TEST_FUNC: {
            std::vector<short> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i38 = 0; i38 < inParamSize; ++i38) {
                short value38 = (short)data.ReadInt32();
                inParam.push_back(value38);
            }
            std::vector<short> outParam;
            std::vector<short> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i39 = 0; i39 < inoutParamSize; ++i39) {
                short value39 = (short)data.ReadInt32();
                inoutParam.push_back(value39);
            }
            std::vector<short> result;
            ErrCode errCode = short_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_INT_TEST_FUNC: {
            std::vector<int32_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i40 = 0; i40 < inParamSize; ++i40) {
                int32_t value40 = data.ReadInt32();
                inParam.push_back(value40);
            }
            std::vector<int32_t> outParam;
            std::vector<int32_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i41 = 0; i41 < inoutParamSize; ++i41) {
                int32_t value41 = data.ReadInt32();
                inoutParam.push_back(value41);
            }
            std::vector<int32_t> result;
            ErrCode errCode = int_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_LONG_TEST_FUNC: {
            std::vector<int64_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i42 = 0; i42 < inParamSize; ++i42) {
                int64_t value42 = data.ReadInt64();
                inParam.push_back(value42);
            }
            std::vector<int64_t> outParam;
            std::vector<int64_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i43 = 0; i43 < inoutParamSize; ++i43) {
                int64_t value43 = data.ReadInt64();
                inoutParam.push_back(value43);
            }
            std::vector<int64_t> result;
            ErrCode errCode = long_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt64((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt64((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt64((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_STRING_TEST_FUNC: {
            std::vector<std::string> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i44 = 0; i44 < inParamSize; ++i44) {
                std::string value44 = Str16ToStr8(data.ReadString16());
                inParam.push_back(value44);
            }
            std::vector<std::string> outParam;
            std::vector<std::string> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i45 = 0; i45 < inoutParamSize; ++i45) {
                std::string value45 = Str16ToStr8(data.ReadString16());
                inoutParam.push_back(value45);
            }
            std::vector<std::string> result;
            ErrCode errCode = string_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((*it)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((*it)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((*it)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_FLOAT_TEST_FUNC: {
            std::vector<float> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i46 = 0; i46 < inParamSize; ++i46) {
                float value46 = data.ReadFloat();
                inParam.push_back(value46);
            }
            std::vector<float> outParam;
            std::vector<float> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i47 = 0; i47 < inoutParamSize; ++i47) {
                float value47 = data.ReadFloat();
                inoutParam.push_back(value47);
            }
            std::vector<float> result;
            ErrCode errCode = float_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteFloat((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteFloat((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteFloat((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_DOUBLE_TEST_FUNC: {
            std::vector<double> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i48 = 0; i48 < inParamSize; ++i48) {
                double value48 = data.ReadDouble();
                inParam.push_back(value48);
            }
            std::vector<double> outParam;
            std::vector<double> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i49 = 0; i49 < inoutParamSize; ++i49) {
                double value49 = data.ReadDouble();
                inoutParam.push_back(value49);
            }
            std::vector<double> result;
            ErrCode errCode = double_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteDouble((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteDouble((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteDouble((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_CHAR_TEST_FUNC: {
            std::vector<zchar> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i50 = 0; i50 < inParamSize; ++i50) {
                zchar value50 = (zchar)data.ReadInt32();
                inParam.push_back(value50);
            }
            std::vector<zchar> outParam;
            std::vector<zchar> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i51 = 0; i51 < inoutParamSize; ++i51) {
                zchar value51 = (zchar)data.ReadInt32();
                inoutParam.push_back(value51);
            }
            std::vector<zchar> result;
            ErrCode errCode = char_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SEQ_TEST_FUNC: {
            std::vector<myseq> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i52 = 0; i52 < inParamSize; ++i52) {
                std::unique_ptr<myseq> value52(data.ReadParcelable<myseq>());

                if (!value52) {
                    return ERR_INVALID_DATA;
                }
                inParam.push_back(*value52);
            }
            std::vector<myseq> outParam;
            std::vector<myseq> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i53 = 0; i53 < inoutParamSize; ++i53) {
                std::unique_ptr<myseq> value53(data.ReadParcelable<myseq>());

                if (!value53) {
                    return ERR_INVALID_DATA;
                }
                inoutParam.push_back(*value53);
            }
            std::vector<myseq> result;
            ErrCode errCode = seq_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteParcelable(&(*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteParcelable(&(*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteParcelable(&(*it))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_INTERFACE_TEST_FUNC: {
            std::vector<sptr<myinterface>> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i54 = 0; i54 < inParamSize; ++i54) {
                sptr<myinterface> value54 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value54 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inParam.push_back(value54);
            }
            std::vector<sptr<myinterface>> outParam;
            std::vector<sptr<myinterface>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i55 = 0; i55 < inoutParamSize; ++i55) {
                sptr<myinterface> value55 = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value55 == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inoutParam.push_back(value55);
            }
            std::vector<sptr<myinterface>> result;
            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if ((*it) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if ((*it) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if ((*it) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((*it)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
