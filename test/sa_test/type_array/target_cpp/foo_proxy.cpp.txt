/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {

ErrCode FooProxy::void_test_func()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_VOID_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}

ErrCode FooProxy::bool_test_func(
    const std::vector<bool>& inParam,
    std::vector<bool>& outParam,
    std::vector<bool>& inoutParam,
    std::vector<bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it1 = inParam.begin(); it1 != inParam.end(); ++it1) {
        if (!data.WriteInt32((*it1) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it2 = inoutParam.begin(); it2 != inoutParam.end(); ++it2) {
        if (!data.WriteInt32((*it2) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BOOL_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i3 = 0; i3 < outParamSize; ++i3) {
        bool value3 = reply.ReadInt32() == 1 ? true : false;
        outParam.push_back(value3);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i4 = 0; i4 < inoutParamSize; ++i4) {
        bool value4 = reply.ReadInt32() == 1 ? true : false;
        inoutParam.push_back(value4);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i5 = 0; i5 < funcResultSize; ++i5) {
        bool value5 = reply.ReadInt32() == 1 ? true : false;
        funcResult.push_back(value5);
    }
    return ERR_OK;
}

ErrCode FooProxy::byte_test_func(
    const std::vector<int8_t>& inParam,
    std::vector<int8_t>& outParam,
    std::vector<int8_t>& inoutParam,
    std::vector<int8_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it6 = inParam.begin(); it6 != inParam.end(); ++it6) {
        if (!data.WriteInt32((*it6))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it7 = inoutParam.begin(); it7 != inoutParam.end(); ++it7) {
        if (!data.WriteInt32((*it7))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BYTE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i8 = 0; i8 < outParamSize; ++i8) {
        int8_t value8 = (int8_t)reply.ReadInt32();
        outParam.push_back(value8);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i9 = 0; i9 < inoutParamSize; ++i9) {
        int8_t value9 = (int8_t)reply.ReadInt32();
        inoutParam.push_back(value9);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i10 = 0; i10 < funcResultSize; ++i10) {
        int8_t value10 = (int8_t)reply.ReadInt32();
        funcResult.push_back(value10);
    }
    return ERR_OK;
}

ErrCode FooProxy::short_test_func(
    const std::vector<short>& inParam,
    std::vector<short>& outParam,
    std::vector<short>& inoutParam,
    std::vector<short>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it11 = inParam.begin(); it11 != inParam.end(); ++it11) {
        if (!data.WriteInt32((*it11))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it12 = inoutParam.begin(); it12 != inoutParam.end(); ++it12) {
        if (!data.WriteInt32((*it12))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SHORT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i13 = 0; i13 < outParamSize; ++i13) {
        short value13 = (short)reply.ReadInt32();
        outParam.push_back(value13);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i14 = 0; i14 < inoutParamSize; ++i14) {
        short value14 = (short)reply.ReadInt32();
        inoutParam.push_back(value14);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i15 = 0; i15 < funcResultSize; ++i15) {
        short value15 = (short)reply.ReadInt32();
        funcResult.push_back(value15);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_test_func(
    const std::vector<int32_t>& inParam,
    std::vector<int32_t>& outParam,
    std::vector<int32_t>& inoutParam,
    std::vector<int32_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it16 = inParam.begin(); it16 != inParam.end(); ++it16) {
        if (!data.WriteInt32((*it16))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it17 = inoutParam.begin(); it17 != inoutParam.end(); ++it17) {
        if (!data.WriteInt32((*it17))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i18 = 0; i18 < outParamSize; ++i18) {
        int32_t value18 = reply.ReadInt32();
        outParam.push_back(value18);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i19 = 0; i19 < inoutParamSize; ++i19) {
        int32_t value19 = reply.ReadInt32();
        inoutParam.push_back(value19);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i20 = 0; i20 < funcResultSize; ++i20) {
        int32_t value20 = reply.ReadInt32();
        funcResult.push_back(value20);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_2_test_func(
    const std::vector<std::vector<int32_t>>& inParam,
    std::vector<std::vector<int32_t>>& outParam,
    std::vector<std::vector<int32_t>>& inoutParam,
    std::vector<std::vector<int32_t>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it21 = inParam.begin(); it21 != inParam.end(); ++it21) {
        if ((*it21).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it21).size());
        for (auto it22 = (*it21).begin(); it22 != (*it21).end(); ++it22) {
            if (!data.WriteInt32((*it22))) {
                return ERR_INVALID_DATA;
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it23 = inoutParam.begin(); it23 != inoutParam.end(); ++it23) {
        if ((*it23).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it23).size());
        for (auto it24 = (*it23).begin(); it24 != (*it23).end(); ++it24) {
            if (!data.WriteInt32((*it24))) {
                return ERR_INVALID_DATA;
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_2_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i25 = 0; i25 < outParamSize; ++i25) {
        std::vector<int32_t> value25;
        int32_t value25Size = reply.ReadInt32();
        if (value25Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i26 = 0; i26 < value25Size; ++i26) {
            int32_t value26 = reply.ReadInt32();
            value25.push_back(value26);
        }
        outParam.push_back(value25);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i27 = 0; i27 < inoutParamSize; ++i27) {
        std::vector<int32_t> value27;
        int32_t value27Size = reply.ReadInt32();
        if (value27Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i28 = 0; i28 < value27Size; ++i28) {
            int32_t value28 = reply.ReadInt32();
            value27.push_back(value28);
        }
        inoutParam.push_back(value27);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i29 = 0; i29 < funcResultSize; ++i29) {
        std::vector<int32_t> value29;
        int32_t value29Size = reply.ReadInt32();
        if (value29Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i30 = 0; i30 < value29Size; ++i30) {
            int32_t value30 = reply.ReadInt32();
            value29.push_back(value30);
        }
        funcResult.push_back(value29);
    }
    return ERR_OK;
}

ErrCode FooProxy::int_3_test_func(
    const std::vector<std::vector<std::vector<int32_t>>>& inParam,
    std::vector<std::vector<std::vector<int32_t>>>& outParam,
    std::vector<std::vector<std::vector<int32_t>>>& inoutParam,
    std::vector<std::vector<std::vector<int32_t>>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it31 = inParam.begin(); it31 != inParam.end(); ++it31) {
        if ((*it31).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it31).size());
        for (auto it32 = (*it31).begin(); it32 != (*it31).end(); ++it32) {
            if ((*it32).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((*it32).size());
            for (auto it33 = (*it32).begin(); it33 != (*it32).end(); ++it33) {
                if (!data.WriteInt32((*it33))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it34 = inoutParam.begin(); it34 != inoutParam.end(); ++it34) {
        if ((*it34).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        data.WriteInt32((*it34).size());
        for (auto it35 = (*it34).begin(); it35 != (*it34).end(); ++it35) {
            if ((*it35).size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            data.WriteInt32((*it35).size());
            for (auto it36 = (*it35).begin(); it36 != (*it35).end(); ++it36) {
                if (!data.WriteInt32((*it36))) {
                    return ERR_INVALID_DATA;
                }
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_3_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i37 = 0; i37 < outParamSize; ++i37) {
        std::vector<std::vector<int32_t>> value37;
        int32_t value37Size = reply.ReadInt32();
        if (value37Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i38 = 0; i38 < value37Size; ++i38) {
            std::vector<int32_t> value38;
            int32_t value38Size = reply.ReadInt32();
            if (value38Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i39 = 0; i39 < value38Size; ++i39) {
                int32_t value39 = reply.ReadInt32();
                value38.push_back(value39);
            }
            value37.push_back(value38);
        }
        outParam.push_back(value37);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i40 = 0; i40 < inoutParamSize; ++i40) {
        std::vector<std::vector<int32_t>> value40;
        int32_t value40Size = reply.ReadInt32();
        if (value40Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i41 = 0; i41 < value40Size; ++i41) {
            std::vector<int32_t> value41;
            int32_t value41Size = reply.ReadInt32();
            if (value41Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i42 = 0; i42 < value41Size; ++i42) {
                int32_t value42 = reply.ReadInt32();
                value41.push_back(value42);
            }
            value40.push_back(value41);
        }
        inoutParam.push_back(value40);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i43 = 0; i43 < funcResultSize; ++i43) {
        std::vector<std::vector<int32_t>> value43;
        int32_t value43Size = reply.ReadInt32();
        if (value43Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }
        for (int32_t i44 = 0; i44 < value43Size; ++i44) {
            std::vector<int32_t> value44;
            int32_t value44Size = reply.ReadInt32();
            if (value44Size > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i45 = 0; i45 < value44Size; ++i45) {
                int32_t value45 = reply.ReadInt32();
                value44.push_back(value45);
            }
            value43.push_back(value44);
        }
        funcResult.push_back(value43);
    }
    return ERR_OK;
}

ErrCode FooProxy::map_test_func(
    const std::vector<std::unordered_map<int32_t, int32_t>>& inParam,
    std::vector<std::unordered_map<int32_t, int32_t>>& outParam,
    std::vector<std::unordered_map<int32_t, int32_t>>& inoutParam,
    std::vector<std::unordered_map<int32_t, int32_t>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it46 = inParam.begin(); it46 != inParam.end(); ++it46) {
        if ((*it46).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }

        data.WriteInt32((*it46).size());
        for (auto it47 = (*it46).begin(); it47 != (*it46).end(); ++it47) {
            if (!data.WriteInt32((it47->first))) {
                return ERR_INVALID_DATA;
            }
            if (!data.WriteInt32((it47->second))) {
                return ERR_INVALID_DATA;
            }
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it48 = inoutParam.begin(); it48 != inoutParam.end(); ++it48) {
        if ((*it48).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
            return ERR_INVALID_DATA;
        }

        data.WriteInt32((*it48).size());
        for (auto it49 = (*it48).begin(); it49 != (*it48).end(); ++it49) {
            if (!data.WriteInt32((it49->first))) {
                return ERR_INVALID_DATA;
            }
            if (!data.WriteInt32((it49->second))) {
                return ERR_INVALID_DATA;
            }
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_MAP_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i50 = 0; i50 < outParamSize; ++i50) {
        std::unordered_map<int32_t, int32_t> value50;
        int32_t value50Size = reply.ReadInt32();
        for (int32_t i51 = 0; i51 < value50Size; ++i51) {
            int32_t key51 = reply.ReadInt32();
            int32_t value51 = reply.ReadInt32();
            value50[key51] = value51;
        }
        outParam.push_back(value50);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i52 = 0; i52 < inoutParamSize; ++i52) {
        std::unordered_map<int32_t, int32_t> value52;
        int32_t value52Size = reply.ReadInt32();
        for (int32_t i53 = 0; i53 < value52Size; ++i53) {
            int32_t key53 = reply.ReadInt32();
            int32_t value53 = reply.ReadInt32();
            value52[key53] = value53;
        }
        inoutParam.push_back(value52);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i54 = 0; i54 < funcResultSize; ++i54) {
        std::unordered_map<int32_t, int32_t> value54;
        int32_t value54Size = reply.ReadInt32();
        for (int32_t i55 = 0; i55 < value54Size; ++i55) {
            int32_t key55 = reply.ReadInt32();
            int32_t value55 = reply.ReadInt32();
            value54[key55] = value55;
        }
        funcResult.push_back(value54);
    }
    return ERR_OK;
}

ErrCode FooProxy::long_test_func(
    const std::vector<int64_t>& inParam,
    std::vector<int64_t>& outParam,
    std::vector<int64_t>& inoutParam,
    std::vector<int64_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it56 = inParam.begin(); it56 != inParam.end(); ++it56) {
        if (!data.WriteInt64((*it56))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it57 = inoutParam.begin(); it57 != inoutParam.end(); ++it57) {
        if (!data.WriteInt64((*it57))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_LONG_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i58 = 0; i58 < outParamSize; ++i58) {
        int64_t value58 = reply.ReadInt64();
        outParam.push_back(value58);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i59 = 0; i59 < inoutParamSize; ++i59) {
        int64_t value59 = reply.ReadInt64();
        inoutParam.push_back(value59);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i60 = 0; i60 < funcResultSize; ++i60) {
        int64_t value60 = reply.ReadInt64();
        funcResult.push_back(value60);
    }
    return ERR_OK;
}

ErrCode FooProxy::string_test_func(
    const std::vector<std::string>& inParam,
    std::vector<std::string>& outParam,
    std::vector<std::string>& inoutParam,
    std::vector<std::string>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it61 = inParam.begin(); it61 != inParam.end(); ++it61) {
        if (!data.WriteString16(Str8ToStr16((*it61)))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it62 = inoutParam.begin(); it62 != inoutParam.end(); ++it62) {
        if (!data.WriteString16(Str8ToStr16((*it62)))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_STRING_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i63 = 0; i63 < outParamSize; ++i63) {
        std::string value63 = Str16ToStr8(reply.ReadString16());
        outParam.push_back(value63);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i64 = 0; i64 < inoutParamSize; ++i64) {
        std::string value64 = Str16ToStr8(reply.ReadString16());
        inoutParam.push_back(value64);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i65 = 0; i65 < funcResultSize; ++i65) {
        std::string value65 = Str16ToStr8(reply.ReadString16());
        funcResult.push_back(value65);
    }
    return ERR_OK;
}

ErrCode FooProxy::float_test_func(
    const std::vector<float>& inParam,
    std::vector<float>& outParam,
    std::vector<float>& inoutParam,
    std::vector<float>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it66 = inParam.begin(); it66 != inParam.end(); ++it66) {
        if (!data.WriteFloat((*it66))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it67 = inoutParam.begin(); it67 != inoutParam.end(); ++it67) {
        if (!data.WriteFloat((*it67))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_FLOAT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i68 = 0; i68 < outParamSize; ++i68) {
        float value68 = reply.ReadFloat();
        outParam.push_back(value68);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i69 = 0; i69 < inoutParamSize; ++i69) {
        float value69 = reply.ReadFloat();
        inoutParam.push_back(value69);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i70 = 0; i70 < funcResultSize; ++i70) {
        float value70 = reply.ReadFloat();
        funcResult.push_back(value70);
    }
    return ERR_OK;
}

ErrCode FooProxy::double_test_func(
    const std::vector<double>& inParam,
    std::vector<double>& outParam,
    std::vector<double>& inoutParam,
    std::vector<double>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it71 = inParam.begin(); it71 != inParam.end(); ++it71) {
        if (!data.WriteDouble((*it71))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it72 = inoutParam.begin(); it72 != inoutParam.end(); ++it72) {
        if (!data.WriteDouble((*it72))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i73 = 0; i73 < outParamSize; ++i73) {
        double value73 = reply.ReadDouble();
        outParam.push_back(value73);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i74 = 0; i74 < inoutParamSize; ++i74) {
        double value74 = reply.ReadDouble();
        inoutParam.push_back(value74);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i75 = 0; i75 < funcResultSize; ++i75) {
        double value75 = reply.ReadDouble();
        funcResult.push_back(value75);
    }
    return ERR_OK;
}

ErrCode FooProxy::char_test_func(
    const std::vector<char>& inParam,
    std::vector<char>& outParam,
    std::vector<char>& inoutParam,
    std::vector<char>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it76 = inParam.begin(); it76 != inParam.end(); ++it76) {
        if (!data.WriteInt32((*it76))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it77 = inoutParam.begin(); it77 != inoutParam.end(); ++it77) {
        if (!data.WriteInt32((*it77))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CHAR_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i78 = 0; i78 < outParamSize; ++i78) {
        char value78 = (char)reply.ReadInt32();
        outParam.push_back(value78);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i79 = 0; i79 < inoutParamSize; ++i79) {
        char value79 = (char)reply.ReadInt32();
        inoutParam.push_back(value79);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i80 = 0; i80 < funcResultSize; ++i80) {
        char value80 = (char)reply.ReadInt32();
        funcResult.push_back(value80);
    }
    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const std::vector<myseq>& inParam,
    std::vector<myseq>& outParam,
    std::vector<myseq>& inoutParam,
    std::vector<myseq>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it81 = inParam.begin(); it81 != inParam.end(); ++it81) {
        if (!data.WriteParcelable(&(*it81))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it82 = inoutParam.begin(); it82 != inoutParam.end(); ++it82) {
        if (!data.WriteParcelable(&(*it82))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SEQ_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i83 = 0; i83 < outParamSize; ++i83) {
        std::unique_ptr<myseq> value83(reply.ReadParcelable<myseq>());
        if (!value83) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(*value83);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i84 = 0; i84 < inoutParamSize; ++i84) {
        std::unique_ptr<myseq> value84(reply.ReadParcelable<myseq>());
        if (!value84) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(*value84);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i85 = 0; i85 < funcResultSize; ++i85) {
        std::unique_ptr<myseq> value85(reply.ReadParcelable<myseq>());
        if (!value85) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(*value85);
    }
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const std::vector<sptr<myinterface>>& inParam,
    std::vector<sptr<myinterface>>& outParam,
    std::vector<sptr<myinterface>>& inoutParam,
    std::vector<sptr<myinterface>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it86 = inParam.begin(); it86 != inParam.end(); ++it86) {
        if ((*it86) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it86)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it87 = inoutParam.begin(); it87 != inoutParam.end(); ++it87) {
        if ((*it87) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((*it87)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i88 = 0; i88 < outParamSize; ++i88) {
        sptr<myinterface> value88 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value88 == nullptr) {
            return ERR_INVALID_DATA;
        }

        outParam.push_back(value88);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i89 = 0; i89 < inoutParamSize; ++i89) {
        sptr<myinterface> value89 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value89 == nullptr) {
            return ERR_INVALID_DATA;
        }

        inoutParam.push_back(value89);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i90 = 0; i90 < funcResultSize; ++i90) {
        sptr<myinterface> value90 = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value90 == nullptr) {
            return ERR_INVALID_DATA;
        }

        funcResult.push_back(value90);
    }
    return ERR_OK;
}
} // namespace test
