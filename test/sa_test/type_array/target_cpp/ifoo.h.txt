/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_IFOO_H
#define TEST_IFOO_H

#include <cstdint>
#include <unordered_map>
#include <vector>
#include <iremote_broker.h>
#include <string_ex.h>
#include "myinterface.h"
#include "myseq.h"

using test::myseq;
using test::myinterface;

namespace test {

enum class IFooIpcCode {
    COMMAND_VOID_TEST_FUNC = MIN_TRANSACTION_ID,
    COMMAND_BOOL_TEST_FUNC,
    COMMAND_BYTE_TEST_FUNC,
    COMMAND_SHORT_TEST_FUNC,
    COMMAND_INT_TEST_FUNC,
    COMMAND_INT_2_TEST_FUNC,
    COMMAND_INT_3_TEST_FUNC,
    COMMAND_MAP_TEST_FUNC,
    COMMAND_LONG_TEST_FUNC,
    COMMAND_STRING_TEST_FUNC,
    COMMAND_FLOAT_TEST_FUNC,
    COMMAND_DOUBLE_TEST_FUNC,
    COMMAND_CHAR_TEST_FUNC,
    COMMAND_SEQ_TEST_FUNC,
    COMMAND_INTERFACE_TEST_FUNC,
};

class IFoo : public IRemoteBroker {
public:
    DECLARE_INTERFACE_DESCRIPTOR(u"test.IFoo");

    virtual ErrCode void_test_func() = 0;

    virtual ErrCode bool_test_func(
        const std::vector<bool>& inParam,
        std::vector<bool>& outParam,
        std::vector<bool>& inoutParam,
        std::vector<bool>& funcResult) = 0;

    virtual ErrCode byte_test_func(
        const std::vector<int8_t>& inParam,
        std::vector<int8_t>& outParam,
        std::vector<int8_t>& inoutParam,
        std::vector<int8_t>& funcResult) = 0;

    virtual ErrCode short_test_func(
        const std::vector<short>& inParam,
        std::vector<short>& outParam,
        std::vector<short>& inoutParam,
        std::vector<short>& funcResult) = 0;

    virtual ErrCode int_test_func(
        const std::vector<int32_t>& inParam,
        std::vector<int32_t>& outParam,
        std::vector<int32_t>& inoutParam,
        std::vector<int32_t>& funcResult) = 0;

    virtual ErrCode int_2_test_func(
        const std::vector<std::vector<int32_t>>& inParam,
        std::vector<std::vector<int32_t>>& outParam,
        std::vector<std::vector<int32_t>>& inoutParam,
        std::vector<std::vector<int32_t>>& funcResult) = 0;

    virtual ErrCode int_3_test_func(
        const std::vector<std::vector<std::vector<int32_t>>>& inParam,
        std::vector<std::vector<std::vector<int32_t>>>& outParam,
        std::vector<std::vector<std::vector<int32_t>>>& inoutParam,
        std::vector<std::vector<std::vector<int32_t>>>& funcResult) = 0;

    virtual ErrCode map_test_func(
        const std::vector<std::unordered_map<int32_t, int32_t>>& inParam,
        std::vector<std::unordered_map<int32_t, int32_t>>& outParam,
        std::vector<std::unordered_map<int32_t, int32_t>>& inoutParam,
        std::vector<std::unordered_map<int32_t, int32_t>>& funcResult) = 0;

    virtual ErrCode long_test_func(
        const std::vector<int64_t>& inParam,
        std::vector<int64_t>& outParam,
        std::vector<int64_t>& inoutParam,
        std::vector<int64_t>& funcResult) = 0;

    virtual ErrCode string_test_func(
        const std::vector<std::string>& inParam,
        std::vector<std::string>& outParam,
        std::vector<std::string>& inoutParam,
        std::vector<std::string>& funcResult) = 0;

    virtual ErrCode float_test_func(
        const std::vector<float>& inParam,
        std::vector<float>& outParam,
        std::vector<float>& inoutParam,
        std::vector<float>& funcResult) = 0;

    virtual ErrCode double_test_func(
        const std::vector<double>& inParam,
        std::vector<double>& outParam,
        std::vector<double>& inoutParam,
        std::vector<double>& funcResult) = 0;

    virtual ErrCode char_test_func(
        const std::vector<char>& inParam,
        std::vector<char>& outParam,
        std::vector<char>& inoutParam,
        std::vector<char>& funcResult) = 0;

    virtual ErrCode seq_test_func(
        const std::vector<myseq>& inParam,
        std::vector<myseq>& outParam,
        std::vector<myseq>& inoutParam,
        std::vector<myseq>& funcResult) = 0;

    virtual ErrCode interface_test_func(
        const std::vector<sptr<myinterface>>& inParam,
        std::vector<sptr<myinterface>>& outParam,
        std::vector<sptr<myinterface>>& inoutParam,
        std::vector<sptr<myinterface>>& funcResult) = 0;
protected:
    const int VECTOR_MAX_SIZE = 102400;
    const int LIST_MAX_SIZE = 102400;
    const int SET_MAX_SIZE = 102400;
    const int MAP_MAX_SIZE = 102400;
};
} // namespace test
#endif // TEST_IFOO_H

