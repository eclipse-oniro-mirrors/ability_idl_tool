/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {void_test_funcCallback} from "./i_foo_ts";
import {bool_test_funcCallback} from "./i_foo_ts";
import {byte_test_funcCallback} from "./i_foo_ts";
import {short_test_funcCallback} from "./i_foo_ts";
import {int_test_funcCallback} from "./i_foo_ts";
import {long_test_funcCallback} from "./i_foo_ts";
import {string_test_funcCallback} from "./i_foo_ts";
import {float_test_funcCallback} from "./i_foo_ts";
import {double_test_funcCallback} from "./i_foo_ts";
import {seq_test_funcCallback} from "./i_foo_ts";
import {interface_test_funcCallback} from "./i_foo_ts";
import IFooTs from "./i_foo_ts";
import rpc from "@ohos.rpc";
import myseq from "./myseq";
import myinterface from "./myinterface";
import myinterfaceStub from "./myinterface_stub";

export default class FooTsStub extends rpc.RemoteObject implements IFooTs {
    constructor(des: string) {
        super(des);
    }

    async onRemoteMessageRequest(code: number, data:rpc.MessageSequence, reply:rpc.MessageSequence, option:rpc.MessageOption): Promise<boolean> {
        let localDescriptor = this.getDescriptor();
        let remoteDescriptor = data.readInterfaceToken();
        if (localDescriptor != remoteDescriptor) {
            console.log("invalid interfaceToken");
            return false;
        }
        console.log("onRemoteMessageRequest called, code = " + code);
        switch(code) {
            case FooTsStub.COMMAND_VOID_TEST_FUNC: {
                let promise = new Promise<void>((resolve,reject) => { 
                    this.void_test_func((errCode) => {
                        reply.writeInt(errCode);
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_BOOL_TEST_FUNC: {
                let inParamVar = data.readBooleanArray();
                let inoutParamVar = data.readBooleanArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.bool_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeBooleanArray(outParam);
                            reply.writeBooleanArray(inoutParam);
                            reply.writeBooleanArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_BYTE_TEST_FUNC: {
                let inParamVar = data.readByteArray();
                let inoutParamVar = data.readByteArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.byte_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeByteArray(outParam);
                            reply.writeByteArray(inoutParam);
                            reply.writeByteArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_SHORT_TEST_FUNC: {
                let inParamVar = data.readShortArray();
                let inoutParamVar = data.readShortArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.short_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeShortArray(outParam);
                            reply.writeShortArray(inoutParam);
                            reply.writeShortArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_INT_TEST_FUNC: {
                let inParamVar = data.readIntArray();
                let inoutParamVar = data.readIntArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.int_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeIntArray(outParam);
                            reply.writeIntArray(inoutParam);
                            reply.writeIntArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_LONG_TEST_FUNC: {
                let inParamVar = data.readLongArray();
                let inoutParamVar = data.readLongArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.long_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeLongArray(outParam);
                            reply.writeLongArray(inoutParam);
                            reply.writeLongArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_STRING_TEST_FUNC: {
                let inParamVar = data.readStringArray();
                let inoutParamVar = data.readStringArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.string_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeStringArray(outParam);
                            reply.writeStringArray(inoutParam);
                            reply.writeStringArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_FLOAT_TEST_FUNC: {
                let inParamVar = data.readFloatArray();
                let inoutParamVar = data.readFloatArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.float_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeFloatArray(outParam);
                            reply.writeFloatArray(inoutParam);
                            reply.writeFloatArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_DOUBLE_TEST_FUNC: {
                let inParamVar = data.readDoubleArray();
                let inoutParamVar = data.readDoubleArray();
                let promise = new Promise<void>((resolve,reject) => { 
                    this.double_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            reply.writeDoubleArray(outParam);
                            reply.writeDoubleArray(inoutParam);
                            reply.writeDoubleArray(returnValue);
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_SEQ_TEST_FUNC: {
                let inParamVarSize = data.readInt();
                let inParamVar:Array<myseq> = [];
                for (let index = 0; index < inParamVarSize; index++) {
                    let inParamVarValue = new myseq();
                    data.readSequenceable(inParamVarValue);
                    inParamVar.push(inParamVarValue);
                }
                let inoutParamVarSize = data.readInt();
                let inoutParamVar:Array<myseq> = [];
                for (let index = 0; index < inoutParamVarSize; index++) {
                    let inoutParamVarValue = new myseq();
                    data.readSequenceable(inoutParamVarValue);
                    inoutParamVar.push(inoutParamVarValue);
                }
                let promise = new Promise<void>((resolve,reject) => { 
                    this.seq_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                            let outParamArray:Array<myseq> = outParam;
                            reply.writeInt(outParamArray.length);
                            for (let index = 0; index < outParamArray.length; index++) {
                                reply.writeSequenceable(outParam[index]);
                            }
                            let inoutParamArray:Array<myseq> = inoutParam;
                            reply.writeInt(inoutParamArray.length);
                            for (let index = 0; index < inoutParamArray.length; index++) {
                                reply.writeSequenceable(inoutParam[index]);
                            }
                            let returnValueArray:Array<myseq> = returnValue;
                            reply.writeInt(returnValueArray.length);
                            for (let index = 0; index < returnValueArray.length; index++) {
                                reply.writeSequenceable(returnValue[index]);
                            }
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            case FooTsStub.COMMAND_INTERFACE_TEST_FUNC: {
                let promise = new Promise<void>((resolve,reject) => { 
                    this.interface_test_func(inParamVar, inoutParamVar, (errCode, returnValue, outParam, inoutParam) => {
                        reply.writeInt(errCode);
                        if (errCode == 0) {
                        }
                        resolve();
                    });
                });
                await promise;
                return true;
            }
            default: {
                console.log("invalid request code" + code);
                break;
            }
        }
        return false;
    }

    void_test_func(callback: void_test_funcCallback): void{}
    bool_test_func(inParam: boolean[], inoutParam: boolean[], callback: bool_test_funcCallback): void{}
    byte_test_func(inParam: number[], inoutParam: number[], callback: byte_test_funcCallback): void{}
    short_test_func(inParam: number[], inoutParam: number[], callback: short_test_funcCallback): void{}
    int_test_func(inParam: number[], inoutParam: number[], callback: int_test_funcCallback): void{}
    long_test_func(inParam: number[], inoutParam: number[], callback: long_test_funcCallback): void{}
    string_test_func(inParam: string[], inoutParam: string[], callback: string_test_funcCallback): void{}
    float_test_func(inParam: number[], inoutParam: number[], callback: float_test_funcCallback): void{}
    double_test_func(inParam: number[], inoutParam: number[], callback: double_test_funcCallback): void{}
    seq_test_func(inParam: myseq[], inoutParam: myseq[], callback: seq_test_funcCallback): void{}
    interface_test_func(inParam: myinterface[], inoutParam: myinterface[], callback: interface_test_funcCallback): void{}

    static readonly COMMAND_VOID_TEST_FUNC = 1;
    static readonly COMMAND_BOOL_TEST_FUNC = 2;
    static readonly COMMAND_BYTE_TEST_FUNC = 3;
    static readonly COMMAND_SHORT_TEST_FUNC = 4;
    static readonly COMMAND_INT_TEST_FUNC = 5;
    static readonly COMMAND_LONG_TEST_FUNC = 6;
    static readonly COMMAND_STRING_TEST_FUNC = 7;
    static readonly COMMAND_FLOAT_TEST_FUNC = 8;
    static readonly COMMAND_DOUBLE_TEST_FUNC = 9;
    static readonly COMMAND_SEQ_TEST_FUNC = 10;
    static readonly COMMAND_INTERFACE_TEST_FUNC = 11;
}

