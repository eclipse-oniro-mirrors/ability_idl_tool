/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace test {

ErrCode FooProxy::void_test_func()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_VOID_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}

ErrCode FooProxy::bool_test_func(
    const std::unordered_map<bool, bool>& inParam,
    std::unordered_map<bool, bool>& outParam,
    std::unordered_map<bool, bool>& inoutParam,
    std::unordered_map<bool, bool>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((it->first) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((it->first) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second) ? 1 : 0)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BOOL_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        bool key = reply.ReadInt32() == 1 ? true : false;
        bool value = reply.ReadInt32() == 1 ? true : false;
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        bool key = reply.ReadInt32() == 1 ? true : false;
        bool value = reply.ReadInt32() == 1 ? true : false;
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        bool key = reply.ReadInt32() == 1 ? true : false;
        bool value = reply.ReadInt32() == 1 ? true : false;
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::byte_test_func(
    const std::unordered_map<int8_t, int8_t>& inParam,
    std::unordered_map<int8_t, int8_t>& outParam,
    std::unordered_map<int8_t, int8_t>& inoutParam,
    std::unordered_map<int8_t, int8_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_BYTE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        int8_t key = (int8_t)reply.ReadInt32();
        int8_t value = (int8_t)reply.ReadInt32();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        int8_t key = (int8_t)reply.ReadInt32();
        int8_t value = (int8_t)reply.ReadInt32();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        int8_t key = (int8_t)reply.ReadInt32();
        int8_t value = (int8_t)reply.ReadInt32();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::short_test_func(
    const std::unordered_map<short, short>& inParam,
    std::unordered_map<short, short>& outParam,
    std::unordered_map<short, short>& inoutParam,
    std::unordered_map<short, short>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SHORT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        short key = (short)reply.ReadInt32();
        short value = (short)reply.ReadInt32();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        short key = (short)reply.ReadInt32();
        short value = (short)reply.ReadInt32();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        short key = (short)reply.ReadInt32();
        short value = (short)reply.ReadInt32();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::int_test_func(
    const std::unordered_map<int32_t, int32_t>& inParam,
    std::unordered_map<int32_t, int32_t>& outParam,
    std::unordered_map<int32_t, int32_t>& inoutParam,
    std::unordered_map<int32_t, int32_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        int32_t key = reply.ReadInt32();
        int32_t value = reply.ReadInt32();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        int32_t key = reply.ReadInt32();
        int32_t value = reply.ReadInt32();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        int32_t key = reply.ReadInt32();
        int32_t value = reply.ReadInt32();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::long_test_func(
    const std::unordered_map<int64_t, int64_t>& inParam,
    std::unordered_map<int64_t, int64_t>& outParam,
    std::unordered_map<int64_t, int64_t>& inoutParam,
    std::unordered_map<int64_t, int64_t>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt64((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt64((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt64((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt64((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_LONG_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        int64_t key = reply.ReadInt64();
        int64_t value = reply.ReadInt64();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        int64_t key = reply.ReadInt64();
        int64_t value = reply.ReadInt64();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        int64_t key = reply.ReadInt64();
        int64_t value = reply.ReadInt64();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::string_test_func(
    const std::unordered_map<std::string, std::string>& inParam,
    std::unordered_map<std::string, std::string>& outParam,
    std::unordered_map<std::string, std::string>& inoutParam,
    std::unordered_map<std::string, std::string>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteString16(Str8ToStr16((it->first)))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteString16(Str8ToStr16((it->second)))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteString16(Str8ToStr16((it->first)))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteString16(Str8ToStr16((it->second)))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_STRING_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        std::string key = Str16ToStr8(reply.ReadString16());
        std::string value = Str16ToStr8(reply.ReadString16());
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        std::string key = Str16ToStr8(reply.ReadString16());
        std::string value = Str16ToStr8(reply.ReadString16());
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        std::string key = Str16ToStr8(reply.ReadString16());
        std::string value = Str16ToStr8(reply.ReadString16());
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::float_test_func(
    const std::unordered_map<float, float>& inParam,
    std::unordered_map<float, float>& outParam,
    std::unordered_map<float, float>& inoutParam,
    std::unordered_map<float, float>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteFloat((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteFloat((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteFloat((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteFloat((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_FLOAT_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        float key = reply.ReadFloat();
        float value = reply.ReadFloat();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        float key = reply.ReadFloat();
        float value = reply.ReadFloat();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        float key = reply.ReadFloat();
        float value = reply.ReadFloat();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::double_test_func(
    const std::unordered_map<double, double>& inParam,
    std::unordered_map<double, double>& outParam,
    std::unordered_map<double, double>& inoutParam,
    std::unordered_map<double, double>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteDouble((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteDouble((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteDouble((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteDouble((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        double key = reply.ReadDouble();
        double value = reply.ReadDouble();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        double key = reply.ReadDouble();
        double value = reply.ReadDouble();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        double key = reply.ReadDouble();
        double value = reply.ReadDouble();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::char_test_func(
    const std::unordered_map<zchar, zchar>& inParam,
    std::unordered_map<zchar, zchar>& outParam,
    std::unordered_map<zchar, zchar>& inoutParam,
    std::unordered_map<zchar, zchar>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteInt32((it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteInt32((it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_CHAR_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        zchar key = (zchar)reply.ReadInt32();
        zchar value = (zchar)reply.ReadInt32();
        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        zchar key = (zchar)reply.ReadInt32();
        zchar value = (zchar)reply.ReadInt32();
        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        zchar key = (zchar)reply.ReadInt32();
        zchar value = (zchar)reply.ReadInt32();
        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::seq_test_func(
    const std::unordered_map<const myseq&, const myseq&>& inParam,
    std::unordered_map<const myseq&, const myseq&>& outParam,
    std::unordered_map<const myseq&, const myseq&>& inoutParam,
    std::unordered_map<const myseq&, const myseq&>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if (!data.WriteParcelable(&(it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteParcelable(&(it->second))) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if (!data.WriteParcelable(&(it->first))) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteParcelable(&(it->second))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_SEQ_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        std::unique_ptr<myseq> key(reply.ReadParcelable<myseq>());
        if (!key) {
            return ERR_INVALID_DATA;
        }

        std::unique_ptr<myseq> value(reply.ReadParcelable<myseq>());
        if (!value) {
            return ERR_INVALID_DATA;
        }

        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        std::unique_ptr<myseq> key(reply.ReadParcelable<myseq>());
        if (!key) {
            return ERR_INVALID_DATA;
        }

        std::unique_ptr<myseq> value(reply.ReadParcelable<myseq>());
        if (!value) {
            return ERR_INVALID_DATA;
        }

        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        std::unique_ptr<myseq> key(reply.ReadParcelable<myseq>());
        if (!key) {
            return ERR_INVALID_DATA;
        }

        std::unique_ptr<myseq> value(reply.ReadParcelable<myseq>());
        if (!value) {
            return ERR_INVALID_DATA;
        }

        funcResult[key] = value;
    }
    return ERR_OK;
}

ErrCode FooProxy::interface_test_func(
    const std::unordered_map<sptr<myinterface>, sptr<myinterface>>& inParam,
    std::unordered_map<sptr<myinterface>, sptr<myinterface>>& outParam,
    std::unordered_map<sptr<myinterface>, sptr<myinterface>>& inoutParam,
    std::unordered_map<sptr<myinterface>, sptr<myinterface>>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it = inParam.begin(); it != inParam.end(); ++it) {
        if ((it->first) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((it->first)->AsObject())) {
            return ERR_INVALID_DATA;
        }
        if ((it->second) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((it->second)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
        if ((it->first) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((it->first)->AsObject())) {
            return ERR_INVALID_DATA;
        }
        if ((it->second) == nullptr) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRemoteObject((it->second)->AsObject())) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < outParamSize; ++i) {
        sptr<myinterface> key = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (key == nullptr) {
            return ERR_INVALID_DATA;
        }

        sptr<myinterface> value = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value == nullptr) {
            return ERR_INVALID_DATA;
        }

        outParam[key] = value;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i = 0; i < inoutParamSize; ++i) {
        sptr<myinterface> key = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (key == nullptr) {
            return ERR_INVALID_DATA;
        }

        sptr<myinterface> value = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value == nullptr) {
            return ERR_INVALID_DATA;
        }

        inoutParam[key] = value;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i = 0; i < funcResultSize; ++i) {
        sptr<myinterface> key = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (key == nullptr) {
            return ERR_INVALID_DATA;
        }

        sptr<myinterface> value = iface_cast<myinterface>(reply.ReadRemoteObject());
        if (value == nullptr) {
            return ERR_INVALID_DATA;
        }

        funcResult[key] = value;
    }
    return ERR_OK;
}
} // namespace test
