/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {
int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (code) {
        case COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case COMMAND_BOOL_TEST_FUNC: {
            std::unordered_map<bool, bool> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                bool key = data.ReadInt32() == 1 ? true : false;
                bool value = data.ReadInt32() == 1 ? true : false;
                inParam[key] = value;
            }
            std::unordered_map<bool, bool> outParam;
            std::unordered_map<bool, bool> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                bool key = data.ReadInt32() == 1 ? true : false;
                bool value = data.ReadInt32() == 1 ? true : false;
                inoutParam[key] = value;
            }
            std::unordered_map<bool, bool> result;
            ErrCode errCode = bool_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((it->first) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second) ? 1 : 0)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_BYTE_TEST_FUNC: {
            std::unordered_map<int8_t, int8_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                int8_t key = (int8_t)data.ReadInt32();
                int8_t value = (int8_t)data.ReadInt32();
                inParam[key] = value;
            }
            std::unordered_map<int8_t, int8_t> outParam;
            std::unordered_map<int8_t, int8_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                int8_t key = (int8_t)data.ReadInt32();
                int8_t value = (int8_t)data.ReadInt32();
                inoutParam[key] = value;
            }
            std::unordered_map<int8_t, int8_t> result;
            ErrCode errCode = byte_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SHORT_TEST_FUNC: {
            std::unordered_map<short, short> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                short key = (short)data.ReadInt32();
                short value = (short)data.ReadInt32();
                inParam[key] = value;
            }
            std::unordered_map<short, short> outParam;
            std::unordered_map<short, short> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                short key = (short)data.ReadInt32();
                short value = (short)data.ReadInt32();
                inoutParam[key] = value;
            }
            std::unordered_map<short, short> result;
            ErrCode errCode = short_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_INT_TEST_FUNC: {
            std::unordered_map<int32_t, int32_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                int32_t key = data.ReadInt32();
                int32_t value = data.ReadInt32();
                inParam[key] = value;
            }
            std::unordered_map<int32_t, int32_t> outParam;
            std::unordered_map<int32_t, int32_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                int32_t key = data.ReadInt32();
                int32_t value = data.ReadInt32();
                inoutParam[key] = value;
            }
            std::unordered_map<int32_t, int32_t> result;
            ErrCode errCode = int_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_LONG_TEST_FUNC: {
            std::unordered_map<int64_t, int64_t> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                int64_t key = data.ReadInt64();
                int64_t value = data.ReadInt64();
                inParam[key] = value;
            }
            std::unordered_map<int64_t, int64_t> outParam;
            std::unordered_map<int64_t, int64_t> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                int64_t key = data.ReadInt64();
                int64_t value = data.ReadInt64();
                inoutParam[key] = value;
            }
            std::unordered_map<int64_t, int64_t> result;
            ErrCode errCode = long_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt64((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt64((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt64((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt64((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt64((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt64((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_STRING_TEST_FUNC: {
            std::unordered_map<std::string, std::string> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                std::string key = Str16ToStr8(data.ReadString16());
                std::string value = Str16ToStr8(data.ReadString16());
                inParam[key] = value;
            }
            std::unordered_map<std::string, std::string> outParam;
            std::unordered_map<std::string, std::string> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                std::string key = Str16ToStr8(data.ReadString16());
                std::string value = Str16ToStr8(data.ReadString16());
                inoutParam[key] = value;
            }
            std::unordered_map<std::string, std::string> result;
            ErrCode errCode = string_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((it->first)))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteString16(Str8ToStr16((it->second)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((it->first)))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteString16(Str8ToStr16((it->second)))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteString16(Str8ToStr16((it->first)))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteString16(Str8ToStr16((it->second)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_FLOAT_TEST_FUNC: {
            std::unordered_map<float, float> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                float key = data.ReadFloat();
                float value = data.ReadFloat();
                inParam[key] = value;
            }
            std::unordered_map<float, float> outParam;
            std::unordered_map<float, float> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                float key = data.ReadFloat();
                float value = data.ReadFloat();
                inoutParam[key] = value;
            }
            std::unordered_map<float, float> result;
            ErrCode errCode = float_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteFloat((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteFloat((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteFloat((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteFloat((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteFloat((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteFloat((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_DOUBLE_TEST_FUNC: {
            std::unordered_map<double, double> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                double key = data.ReadDouble();
                double value = data.ReadDouble();
                inParam[key] = value;
            }
            std::unordered_map<double, double> outParam;
            std::unordered_map<double, double> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                double key = data.ReadDouble();
                double value = data.ReadDouble();
                inoutParam[key] = value;
            }
            std::unordered_map<double, double> result;
            ErrCode errCode = double_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteDouble((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteDouble((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteDouble((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteDouble((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteDouble((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteDouble((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_CHAR_TEST_FUNC: {
            std::unordered_map<zchar, zchar> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                zchar key = (zchar)data.ReadInt32();
                zchar value = (zchar)data.ReadInt32();
                inParam[key] = value;
            }
            std::unordered_map<zchar, zchar> outParam;
            std::unordered_map<zchar, zchar> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                zchar key = (zchar)data.ReadInt32();
                zchar value = (zchar)data.ReadInt32();
                inoutParam[key] = value;
            }
            std::unordered_map<zchar, zchar> result;
            ErrCode errCode = char_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteInt32((it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteInt32((it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_SEQ_TEST_FUNC: {
            std::unordered_map<const myseq&, const myseq&> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                std::unique_ptr<myseq> key(data.ReadParcelable<myseq>());

                if (!key) {
                    return ERR_INVALID_DATA;
                }
                std::unique_ptr<myseq> value(data.ReadParcelable<myseq>());

                if (!value) {
                    return ERR_INVALID_DATA;
                }
                inParam[key] = value;
            }
            std::unordered_map<const myseq&, const myseq&> outParam;
            std::unordered_map<const myseq&, const myseq&> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                std::unique_ptr<myseq> key(data.ReadParcelable<myseq>());

                if (!key) {
                    return ERR_INVALID_DATA;
                }
                std::unique_ptr<myseq> value(data.ReadParcelable<myseq>());

                if (!value) {
                    return ERR_INVALID_DATA;
                }
                inoutParam[key] = value;
            }
            std::unordered_map<const myseq&, const myseq&> result;
            ErrCode errCode = seq_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if (!reply.WriteParcelable(&(it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteParcelable(&(it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if (!reply.WriteParcelable(&(it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteParcelable(&(it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if (!reply.WriteParcelable(&(it->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteParcelable(&(it->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case COMMAND_INTERFACE_TEST_FUNC: {
            std::unordered_map<sptr<myinterface>, sptr<myinterface>> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inParamSize; ++i) {
                sptr<myinterface> key = iface_cast<myinterface>(data.ReadRemoteObject());
                if (key == nullptr) {
                    return ERR_INVALID_DATA;
                }

                sptr<myinterface> value = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inParam[key] = value;
            }
            std::unordered_map<sptr<myinterface>, sptr<myinterface>> outParam;
            std::unordered_map<sptr<myinterface>, sptr<myinterface>> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i = 0; i < inoutParamSize; ++i) {
                sptr<myinterface> key = iface_cast<myinterface>(data.ReadRemoteObject());
                if (key == nullptr) {
                    return ERR_INVALID_DATA;
                }

                sptr<myinterface> value = iface_cast<myinterface>(data.ReadRemoteObject());
                if (value == nullptr) {
                    return ERR_INVALID_DATA;
                }

                inoutParam[key] = value;
            }
            std::unordered_map<sptr<myinterface>, sptr<myinterface>> result;
            ErrCode errCode = interface_test_func(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it = outParam.begin(); it != outParam.end(); ++it) {
                    if ((it->first) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->first)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                    if ((it->second) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->second)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it = inoutParam.begin(); it != inoutParam.end(); ++it) {
                    if ((it->first) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->first)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                    if ((it->second) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->second)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it = result.begin(); it != result.end(); ++it) {
                    if ((it->first) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->first)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                    if ((it->second) == nullptr) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRemoteObject((it->second)->AsObject())) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
