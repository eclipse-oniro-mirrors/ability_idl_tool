/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable test.myseq;
interface test.myinterface;

interface test.IFoo {
    void void_test_func();
    boolean bool_test_func([in] boolean inParam, [out] boolean outParam, [inout] boolean inoutParam);
    byte byte_test_func([in] byte inParam, [out] byte outParam, [inout] byte inoutParam);
    short short_test_func([in] short inParam, [out] short outParam, [inout] short inoutParam);
    int int_test_func([in] int inParam, [out] int outParam, [inout] int inoutParam);
    long long_test_func([in] long inParam, [out] long outParam, [inout] long inoutParam);
    String string_test_func([in] String inParam, [out] String outParam, [inout] String inoutParam);
    float float_test_func([in] float inParam, [out] float outParam, [inout] float inoutParam);
    double double_test_func([in] double inParam, [out] double outParam, [inout] double inoutParam);
    char char_test_func([in] char inParam, [out] char outParam, [inout] char inoutParam);  // Ts不支持
    myseq seq_test_func([in] myseq inParam, [out] myseq outParam, [inout] myseq inoutParam);
    myinterface interface_test_func([in] myinterface inParam, [out] myinterface outParam, [inout] myinterface inoutParam);
    Map<boolean, boolean> map_bool_test_func([in] Map<boolean, boolean> inParam, [out] Map<boolean, boolean> outParam, [inout] Map<boolean, boolean> inoutParam);
    Map<byte, byte> map_byte_test_func([in] Map<byte, byte> inParam, [out] Map<byte, byte> outParam, [inout] Map<byte, byte> inoutParam);
    Map<short, short> map_short_test_func([in] Map<short, short> inParam, [out] Map<short, short> outParam, [inout] Map<short, short> inoutParam);
    Map<int, int> map_int_test_func([in] Map<int, int> inParam, [out] Map<int, int> outParam, [inout] Map<int, int> inoutParam);
    Map<long, long> map_long_test_func([in] Map<long, long> inParam, [out] Map<long, long> outParam, [inout] Map<long, long> inoutParam);
    Map<String, String> map_string_test_func([in] Map<String, String> inParam, [out] Map<String, String> outParam, [inout] Map<String, String> inoutParam);
    Map<float, float> map_float_test_func([in] Map<float, float> inParam, [out] Map<float, float> outParam, [inout] Map<float, float> inoutParam);
    Map<double, double> map_double_test_func([in] Map<double, double> inParam, [out] Map<double, double> outParam, [inout] Map<double, double> inoutParam);
    Map<char, char> map_char_test_func([in] Map<char, char> inParam, [out] Map<char, char> outParam, [inout] Map<char, char> inoutParam); //Ts不支持char
    Map<myseq, myseq> map_seq_test_func([in] Map<myseq, myseq> inParam, [out] Map<myseq, myseq> outParam, [inout] Map<myseq, myseq> inoutParam);
    Map<myinterface, myinterface> map_interface_test_func([in] Map<myinterface, myinterface> inParam, [out] Map<myinterface, myinterface> outParam, [inout] Map<myinterface, myinterface> inoutParam);
    List<boolean> list_bool_test_func([in] List<boolean> inParam, [out] List<boolean> outParam, [inout] List<boolean> inoutParam);
    List<boolean> list_byte_test_func([in] List<boolean> inParam, [out] List<boolean> outParam, [inout] List<boolean> inoutParam);
    List<short> list_short_test_func([in] List<short> inParam, [out] List<short> outParam, [inout] List<short> inoutParam);
    List<int> list_int_test_func([in] List<int> inParam, [out] List<int> outParam, [inout] List<int> inoutParam);
    List<long> list_long_test_func([in] List<long> inParam, [out] List<long> outParam, [inout] List<long> inoutParam);
    List<String> list_string_test_func([in] List<String> inParam, [out] List<String> outParam, [inout] List<String> inoutParam);
    List<float> list_float_test_func([in] List<float> inParam, [out] List<float> outParam, [inout] List<float> inoutParam);
    List<double> list_double_test_func([in] List<double> inParam, [out] List<double> outParam, [inout] List<double> inoutParam);
    List<char> list_char_test_func([in] List<char> inParam, [out] List<char> outParam, [inout] List<char> inoutParam);
    List<myseq> list_seq_test_func([in] List<myseq> inParam, [out] List<myseq> outParam, [inout] List<myseq> inoutParam);
    List<myinterface> list_interface_test_func([in] List<myinterface> inParam, [out] List<myinterface> outParam, [inout] List<myinterface> inoutParam);
    boolean[] array_bool_test_func([in] boolean[] inParam, [out] boolean[] outParam, [inout] boolean[] inoutParam);
    byte[] array_byte_test_func([in] byte[] inParam, [out] byte[] outParam, [inout] byte[] inoutParam);
    short[] array_short_test_func([in] short[] inParam, [out] short[] outParam, [inout] short[] inoutParam);
    int[] array_int_test_func([in] int[] inParam, [out] int[] outParam, [inout] int[] inoutParam);
    long[] array_long_test_func([in] long[] inParam, [out] long[] outParam, [inout] long[] inoutParam);
    String[] array_string_test_func([in] String[] inParam, [out] String[] outParam, [inout] String[] inoutParam);
    float[] array_float_test_func([in] float[] inParam, [out] float[] outParam, [inout] float[] inoutParam);
    double[] array_double_test_func([in] double[] inParam, [out] double[] outParam, [inout] double[] inoutParam);
    char[] array_char_test_func([in] char[] inParam, [out] char[] outParam, [inout] char[] inoutParam);
    myseq[] array_seq_test_func([in] myseq[] inParam, [out] myseq[] outParam, [inout] myseq[] inoutParam);
    myinterface[] array_interface_test_func([in] myinterface[] inParam, [out] myinterface[] outParam, [inout] myinterface[] inoutParam);
}
