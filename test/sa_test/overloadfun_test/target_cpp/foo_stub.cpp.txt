/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace overload {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
#ifndef WATCHER
        case IFooIpcCode::COMMAND_OVERLOADFUN: {
            ErrCode errCode = overloadfun();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
#endif
#ifdef DEVICE
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_UNSIGNED_CHAR: {
            uint8_t inParam = data.ReadUint8();
            ErrCode errCode = overloadfun(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
#endif
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_UNSIGNED_INT: {
            uint32_t outParam;
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteUint32(outParam)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_MAP_INT_STRING: {
            std::unordered_map<int32_t, std::string> outParam;
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it1 = outParam.begin(); it1 != outParam.end(); ++it1) {
                    if (!reply.WriteInt32((it1->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteString16(Str8ToStr16((it1->second)))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_MAP_INT_U16STRING: {
            std::unordered_map<int32_t, std::u16string> outParam;
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it2 = outParam.begin(); it2 != outParam.end(); ++it2) {
                    if (!reply.WriteInt32((it2->first))) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteString16((it2->second))) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_UNSIGNED_INT_VECTOR: {
            std::vector<uint32_t> outParam;
            int32_t outParamSize = data.ReadInt32();
            if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i3 = 0; i3 < outParamSize; ++i3) {
                uint32_t value3 = data.ReadUint32();
                outParam.push_back(value3);
            }
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_LIST_MAP_INT_STRING: {
            std::vector<std::unordered_map<int32_t, std::string>> outParam;
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it4 = outParam.begin(); it4 != outParam.end(); ++it4) {
                    if ((*it4).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it4).size());
                    for (auto it5 = (*it4).begin(); it5 != (*it4).end(); ++it5) {
                        if (!reply.WriteInt32((it5->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteString16(Str8ToStr16((it5->second)))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_FILEDESCRIPTOR_OUT_STRING: {
            int outParam;
            std::string result;
            ErrCode errCode = overloadfun(outParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteFileDescriptor(outParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteString16(Str8ToStr16(result))) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_LIST_MAP_INT_U16STRING: {
            std::vector<std::unordered_map<int32_t, std::u16string>> outParam;
            ErrCode errCode = overloadfun(outParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it6 = outParam.begin(); it6 != outParam.end(); ++it6) {
                    if ((*it6).size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                        return ERR_INVALID_DATA;
                    }

                    reply.WriteInt32((*it6).size());
                    for (auto it7 = (*it6).begin(); it7 != (*it6).end(); ++it7) {
                        if (!reply.WriteInt32((it7->first))) {
                            return ERR_INVALID_DATA;
                        }
                        if (!reply.WriteString16((it7->second))) {
                            return ERR_INVALID_DATA;
                        }
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_OUT_FILEDESCRIPTOR_OUT_U16STRING: {
            int outParam;
            std::u16string result;
            ErrCode errCode = overloadfun(outParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteFileDescriptor(outParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteString16(result)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_U16STRING_OUT_U16STRING_INOUT_U16STRING_OUT_U16STRING: {
            std::u16string inParam = data.ReadString16();
            std::u16string outParam;
            std::u16string inoutParam = data.ReadString16();
            std::u16string result;
            ErrCode errCode = overloadfun(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteString16(outParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteString16(inoutParam)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteString16(result)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_MYRAWDATA_OUT_MYRAWDATA_INOUT_MYRAWDATA_OUT_MYRAWDATA: {
            myrawdata inParam;
            if (!data.ReadUint32(inParam.size)) {
                return ERR_INVALID_DATA;
            }
            auto readinParam =  data.ReadRawData(inParam.size);
            if (readinParam == nullptr) {
                return ERR_INVALID_DATA;
            }
            inParam.data = readinParam;
            myrawdata outParam;
            myrawdata inoutParam;
            if (!data.ReadUint32(inoutParam.size)) {
                return ERR_INVALID_DATA;
            }
            auto readinoutParam =  data.ReadRawData(inoutParam.size);
            if (readinoutParam == nullptr) {
                return ERR_INVALID_DATA;
            }
            inoutParam.data = readinoutParam;
            myrawdata result;
            ErrCode errCode = overloadfun(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (!reply.WriteUint32(outParam.size)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRawData(outParam.data, outParam.size)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUint32(inoutParam.size)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRawData(inoutParam.data, inoutParam.size)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteUint32(result.size)) {
                    return ERR_INVALID_DATA;
                }
                if (!reply.WriteRawData(result.data, result.size)) {
                    return ERR_INVALID_DATA;
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_LIST_MYRAWDATA_OUT_LIST_MYRAWDATA_INOUT_LIST_MYRAWDATA_OUT_LIST_MYRAWDATA: {
            std::vector<myrawdata> inParam;
            int32_t inParamSize = data.ReadInt32();
            if (inParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i8 = 0; i8 < inParamSize; ++i8) {
                myrawdata value8;
                if (!data.ReadUint32(value8.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readvalue8 =  data.ReadRawData(value8.size);
                if (readvalue8 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                value8.data = readvalue8;
                inParam.push_back(value8);
            }
            std::vector<myrawdata> outParam;
            std::vector<myrawdata> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
                return ERR_INVALID_DATA;
            }
            for (int32_t i9 = 0; i9 < inoutParamSize; ++i9) {
                myrawdata value9;
                if (!data.ReadUint32(value9.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readvalue9 =  data.ReadRawData(value9.size);
                if (readvalue9 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                value9.data = readvalue9;
                inoutParam.push_back(value9);
            }
            std::vector<myrawdata> result;
            ErrCode errCode = overloadfun(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(outParam.size());
                for (auto it10 = outParam.begin(); it10 != outParam.end(); ++it10) {
                    if (!reply.WriteUint32((*it10).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((*it10).data, (*it10).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(inoutParam.size());
                for (auto it11 = inoutParam.begin(); it11 != inoutParam.end(); ++it11) {
                    if (!reply.WriteUint32((*it11).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((*it11).data, (*it11).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }
                reply.WriteInt32(result.size());
                for (auto it12 = result.begin(); it12 != result.end(); ++it12) {
                    if (!reply.WriteUint32((*it12).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((*it12).data, (*it12).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_OVERLOADFUN_IN_MAP_MYRAWDATA_MYRAWDATA_OUT_MAP_MYRAWDATA_MYRAWDATA_INOUT_MAP_MYRAWDATA_MYRAWDATA_OUT_MAP_MYRAWDATA_MYRAWDATA: {
            std::unordered_map<myrawdata, myrawdata> inParam;
            int32_t inParamSize = data.ReadInt32();
            for (int32_t i13 = 0; i13 < inParamSize; ++i13) {
                myrawdata key13;
                if (!data.ReadUint32(key13.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readkey13 =  data.ReadRawData(key13.size);
                if (readkey13 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                key13.data = readkey13;
                myrawdata value13;
                if (!data.ReadUint32(value13.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readvalue13 =  data.ReadRawData(value13.size);
                if (readvalue13 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                value13.data = readvalue13;
                inParam[key13] = value13;
            }
            std::unordered_map<myrawdata, myrawdata> outParam;
            std::unordered_map<myrawdata, myrawdata> inoutParam;
            int32_t inoutParamSize = data.ReadInt32();
            for (int32_t i14 = 0; i14 < inoutParamSize; ++i14) {
                myrawdata key14;
                if (!data.ReadUint32(key14.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readkey14 =  data.ReadRawData(key14.size);
                if (readkey14 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                key14.data = readkey14;
                myrawdata value14;
                if (!data.ReadUint32(value14.size)) {
                    return ERR_INVALID_DATA;
                }
                auto readvalue14 =  data.ReadRawData(value14.size);
                if (readvalue14 == nullptr) {
                    return ERR_INVALID_DATA;
                }
                value14.data = readvalue14;
                inoutParam[key14] = value14;
            }
            std::unordered_map<myrawdata, myrawdata> result;
            ErrCode errCode = overloadfun(inParam, outParam, inoutParam, result);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            if (SUCCEEDED(errCode)) {
                if (outParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(outParam.size());
                for (auto it15 = outParam.begin(); it15 != outParam.end(); ++it15) {
                    if (!reply.WriteUint32((it15->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it15->first).data, (it15->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteUint32((it15->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it15->second).data, (it15->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(inoutParam.size());
                for (auto it16 = inoutParam.begin(); it16 != inoutParam.end(); ++it16) {
                    if (!reply.WriteUint32((it16->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it16->first).data, (it16->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteUint32((it16->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it16->second).data, (it16->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
                if (result.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
                    return ERR_INVALID_DATA;
                }

                reply.WriteInt32(result.size());
                for (auto it17 = result.begin(); it17 != result.end(); ++it17) {
                    if (!reply.WriteUint32((it17->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it17->first).data, (it17->first).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteUint32((it17->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                    if (!reply.WriteRawData((it17->second).data, (it17->second).size)) {
                        return ERR_INVALID_DATA;
                    }
                }
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace overload
