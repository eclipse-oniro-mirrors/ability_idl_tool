/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OVERLOAD_FOOPROXY_H
#define OVERLOAD_FOOPROXY_H

#include <iremote_proxy.h>
#include "ifoo.h"

namespace overload {

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

#ifndef WATCHER
    ErrCode overloadfun() override;
#endif

#ifdef DEVICE
    ErrCode overloadfun(
        uint8_t inParam) override;
#endif

    ErrCode overloadfun(
        uint32_t& outParam) override;

    ErrCode overloadfun(
        std::unordered_map<int32_t, std::string>& outParam) override;

    ErrCode overloadfun(
        const std::vector<uint32_t>& outParam) override;

    ErrCode overloadfun(
        std::vector<std::unordered_map<int32_t, std::string>>& outParam) override;

    ErrCode overloadfun(
        int& outParam,
        std::string& funcResult) override;

    ErrCode overloadfun(
        const myrawdata& inParam,
        myrawdata& outParam,
        myrawdata& inoutParam,
        myrawdata& funcResult) override;

    ErrCode overloadfun(
        const std::vector<myrawdata>& inParam,
        std::vector<myrawdata>& outParam,
        std::vector<myrawdata>& inoutParam,
        std::vector<myrawdata>& funcResult) override;

    ErrCode overloadfun(
        const std::unordered_map<myrawdata, myrawdata>& inParam,
        std::unordered_map<myrawdata, myrawdata>& outParam,
        std::unordered_map<myrawdata, myrawdata>& inoutParam,
        std::unordered_map<myrawdata, myrawdata>& funcResult) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace overload
#endif // OVERLOAD_FOOPROXY_H

