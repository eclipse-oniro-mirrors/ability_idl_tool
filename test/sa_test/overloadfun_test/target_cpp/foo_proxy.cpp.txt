/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_proxy.h"

namespace overload {

#ifndef WATCHER
ErrCode FooProxy::overloadfun()
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}
#endif

#ifdef DEVICE
ErrCode FooProxy::overloadfun(
    uint8_t inParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteUint8(inParam)) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_UNSIGNED_CHAR), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}
#endif

ErrCode FooProxy::overloadfun(
    uint32_t& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_UNSIGNED_INT), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = reply.ReadUint32();
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    std::unordered_map<int32_t, std::string>& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_MAP_INT_STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i1 = 0; i1 < outParamSize; ++i1) {
        int32_t key1 = reply.ReadInt32();
        std::string value1 = Str16ToStr8(reply.ReadString16());
        outParam[key1] = value1;
    }
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    std::unordered_map<int32_t, std::u16string>& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_MAP_INT_U16STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i2 = 0; i2 < outParamSize; ++i2) {
        int32_t key2 = reply.ReadInt32();
        std::u16string value2 = reply.ReadString16();
        outParam[key2] = value2;
    }
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    const std::vector<uint32_t>& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (outParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(outParam.size());
    for (auto it3 = outParam.begin(); it3 != outParam.end(); ++it3) {
        if (!data.WriteUint32((*it3))) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_UNSIGNED_INT_VECTOR), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    std::vector<std::unordered_map<int32_t, std::string>>& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_LIST_MAP_INT_STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i4 = 0; i4 < outParamSize; ++i4) {
        std::unordered_map<int32_t, std::string> value4;
        int32_t value4Size = reply.ReadInt32();
        for (int32_t i5 = 0; i5 < value4Size; ++i5) {
            int32_t key5 = reply.ReadInt32();
            std::string value5 = Str16ToStr8(reply.ReadString16());
            value4[key5] = value5;
        }
        outParam.push_back(value4);
    }
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    int& outParam,
    std::string& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_FILEDESCRIPTOR_OUT_STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = reply.ReadFileDescriptor();
    funcResult = Str16ToStr8(reply.ReadString16());
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    std::vector<std::unordered_map<int32_t, std::u16string>>& outParam)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_LIST_MAP_INT_U16STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i6 = 0; i6 < outParamSize; ++i6) {
        std::unordered_map<int32_t, std::u16string> value6;
        int32_t value6Size = reply.ReadInt32();
        for (int32_t i7 = 0; i7 < value6Size; ++i7) {
            int32_t key7 = reply.ReadInt32();
            std::u16string value7 = reply.ReadString16();
            value6[key7] = value7;
        }
        outParam.push_back(value6);
    }
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    int& outParam,
    std::u16string& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }


    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_OUT_FILEDESCRIPTOR_OUT_U16STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = reply.ReadFileDescriptor();
    funcResult = reply.ReadString16();
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    const std::u16string& inParam,
    std::u16string& outParam,
    std::u16string& inoutParam,
    std::u16string& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteString16(inParam)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteString16(inoutParam)) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_U16STRING_OUT_U16STRING_INOUT_U16STRING_OUT_U16STRING), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    outParam = reply.ReadString16();
    inoutParam = reply.ReadString16();
    funcResult = reply.ReadString16();
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    const myrawdata& inParam,
    myrawdata& outParam,
    myrawdata& inoutParam,
    myrawdata& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (!data.WriteUint32(inParam.size)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRawData(inParam.data, inParam.size)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteUint32(inoutParam.size)) {
        return ERR_INVALID_DATA;
    }
    if (!data.WriteRawData(inoutParam.data, inoutParam.size)) {
        return ERR_INVALID_DATA;
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_MYRAWDATA_OUT_MYRAWDATA_INOUT_MYRAWDATA_OUT_MYRAWDATA), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    if (!reply.ReadUint32(outParam.size)) {
        return ERR_INVALID_DATA;
    }
    auto readoutParam =  reply.ReadRawData(outParam.size);
    if (readoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    outParam.data = readoutParam;
    if (!reply.ReadUint32(inoutParam.size)) {
        return ERR_INVALID_DATA;
    }
    auto readinoutParam =  reply.ReadRawData(inoutParam.size);
    if (readinoutParam == nullptr) {
        return ERR_INVALID_DATA;
    }
    inoutParam.data = readinoutParam;
    if (!reply.ReadUint32(funcResult.size)) {
        return ERR_INVALID_DATA;
    }
    auto readfuncResult =  reply.ReadRawData(funcResult.size);
    if (readfuncResult == nullptr) {
        return ERR_INVALID_DATA;
    }
    funcResult.data = readfuncResult;
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    const std::vector<myrawdata>& inParam,
    std::vector<myrawdata>& outParam,
    std::vector<myrawdata>& inoutParam,
    std::vector<myrawdata>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inParam.size());
    for (auto it8 = inParam.begin(); it8 != inParam.end(); ++it8) {
        if (!data.WriteUint32((*it8).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((*it8).data, (*it8).size)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    data.WriteInt32(inoutParam.size());
    for (auto it9 = inoutParam.begin(); it9 != inoutParam.end(); ++it9) {
        if (!data.WriteUint32((*it9).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((*it9).data, (*it9).size)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_LIST_MYRAWDATA_OUT_LIST_MYRAWDATA_INOUT_LIST_MYRAWDATA_OUT_LIST_MYRAWDATA), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    if (outParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i10 = 0; i10 < outParamSize; ++i10) {
        myrawdata value10;
        if (!reply.ReadUint32(value10.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue10 =  reply.ReadRawData(value10.size);
        if (readvalue10 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value10.data = readvalue10;
        outParam.push_back(value10);
    }
    int32_t inoutParamSize = reply.ReadInt32();
    if (inoutParamSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i11 = 0; i11 < inoutParamSize; ++i11) {
        myrawdata value11;
        if (!reply.ReadUint32(value11.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue11 =  reply.ReadRawData(value11.size);
        if (readvalue11 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value11.data = readvalue11;
        inoutParam.push_back(value11);
    }
    int32_t funcResultSize = reply.ReadInt32();
    if (funcResultSize > static_cast<int32_t>(VECTOR_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }
    for (int32_t i12 = 0; i12 < funcResultSize; ++i12) {
        myrawdata value12;
        if (!reply.ReadUint32(value12.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue12 =  reply.ReadRawData(value12.size);
        if (readvalue12 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value12.data = readvalue12;
        funcResult.push_back(value12);
    }
    return ERR_OK;
}

ErrCode FooProxy::overloadfun(
    const std::unordered_map<myrawdata, myrawdata>& inParam,
    std::unordered_map<myrawdata, myrawdata>& outParam,
    std::unordered_map<myrawdata, myrawdata>& inoutParam,
    std::unordered_map<myrawdata, myrawdata>& funcResult)
{
    MessageParcel data;
    MessageParcel reply;
    MessageOption option(MessageOption::TF_SYNC);

    if (!data.WriteInterfaceToken(GetDescriptor())) {
        return ERR_INVALID_VALUE;
    }

    if (inParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inParam.size());
    for (auto it13 = inParam.begin(); it13 != inParam.end(); ++it13) {
        if (!data.WriteUint32((it13->first).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((it13->first).data, (it13->first).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteUint32((it13->second).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((it13->second).data, (it13->second).size)) {
            return ERR_INVALID_DATA;
        }
    }
    if (inoutParam.size() > static_cast<size_t>(MAP_MAX_SIZE)) {
        return ERR_INVALID_DATA;
    }

    data.WriteInt32(inoutParam.size());
    for (auto it14 = inoutParam.begin(); it14 != inoutParam.end(); ++it14) {
        if (!data.WriteUint32((it14->first).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((it14->first).data, (it14->first).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteUint32((it14->second).size)) {
            return ERR_INVALID_DATA;
        }
        if (!data.WriteRawData((it14->second).data, (it14->second).size)) {
            return ERR_INVALID_DATA;
        }
    }

    sptr<IRemoteObject> remote = Remote();
    if (!remote) {
        return ERR_INVALID_DATA;
    }
    int32_t result = remote->SendRequest(
        static_cast<uint32_t>(IFooIpcCode::COMMAND_OVERLOADFUN_IN_MAP_MYRAWDATA_MYRAWDATA_OUT_MAP_MYRAWDATA_MYRAWDATA_INOUT_MAP_MYRAWDATA_MYRAWDATA_OUT_MAP_MYRAWDATA_MYRAWDATA), data, reply, option);
    if (FAILED(result)) {
        return result;
    }

    ErrCode errCode = reply.ReadInt32();
    if (FAILED(errCode)) {
        return errCode;
    }

    int32_t outParamSize = reply.ReadInt32();
    for (int32_t i15 = 0; i15 < outParamSize; ++i15) {
        myrawdata key15;
        if (!reply.ReadUint32(key15.size)) {
            return ERR_INVALID_DATA;
        }
        auto readkey15 =  reply.ReadRawData(key15.size);
        if (readkey15 == nullptr) {
            return ERR_INVALID_DATA;
        }
        key15.data = readkey15;
        myrawdata value15;
        if (!reply.ReadUint32(value15.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue15 =  reply.ReadRawData(value15.size);
        if (readvalue15 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value15.data = readvalue15;
        outParam[key15] = value15;
    }
    int32_t inoutParamSize = reply.ReadInt32();
    for (int32_t i16 = 0; i16 < inoutParamSize; ++i16) {
        myrawdata key16;
        if (!reply.ReadUint32(key16.size)) {
            return ERR_INVALID_DATA;
        }
        auto readkey16 =  reply.ReadRawData(key16.size);
        if (readkey16 == nullptr) {
            return ERR_INVALID_DATA;
        }
        key16.data = readkey16;
        myrawdata value16;
        if (!reply.ReadUint32(value16.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue16 =  reply.ReadRawData(value16.size);
        if (readvalue16 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value16.data = readvalue16;
        inoutParam[key16] = value16;
    }
    int32_t funcResultSize = reply.ReadInt32();
    for (int32_t i17 = 0; i17 < funcResultSize; ++i17) {
        myrawdata key17;
        if (!reply.ReadUint32(key17.size)) {
            return ERR_INVALID_DATA;
        }
        auto readkey17 =  reply.ReadRawData(key17.size);
        if (readkey17 == nullptr) {
            return ERR_INVALID_DATA;
        }
        key17.data = readkey17;
        myrawdata value17;
        if (!reply.ReadUint32(value17.size)) {
            return ERR_INVALID_DATA;
        }
        auto readvalue17 =  reply.ReadRawData(value17.size);
        if (readvalue17 == nullptr) {
            return ERR_INVALID_DATA;
        }
        value17.data = readvalue17;
        funcResult[key17] = value17;
    }
    return ERR_OK;
}
} // namespace overload
