/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_IFOO_H
#define TEST_IFOO_H

#include <cstdint>
#include <unordered_map>
#include <vector>
#include <iremote_broker.h>
#include <string_ex.h>

namespace test {

enum class IFooIpcCode {
    COMMAND_OVERLOADFUN = MIN_TRANSACTION_ID,
    COMMAND_OVERLOADFUN_IN_UNSIGNED_CHAR,
    COMMAND_OVERLOADFUN_OUT_UNSIGNED_INT,
    COMMAND_OVERLOADFUN_OUT_MAP_INT_STRING,
    COMMAND_OVERLOADFUN_IN_UNSIGNED_INT_VECTOR,
    COMMAND_OVERLOADFUN_OUT_LIST_MAP_INT_STRING,
    COMMAND_OVERLOADFUN_OUT_FILEDESCRIPTOR_OUT_STRING,
};

class IFoo : public IRemoteBroker {
public:
    DECLARE_INTERFACE_DESCRIPTOR(u"test.IFoo");

#ifndef WATCHER
    virtual ErrCode overloadfun() = 0;
#endif

#ifdef DEVICE
    virtual ErrCode overloadfun(
        uint8_t inParam) = 0;
#endif

    virtual ErrCode overloadfun(
        uint32_t& outParam) = 0;

    virtual ErrCode overloadfun(
        std::unordered_map<int32_t, std::string>& outParam) = 0;

    virtual ErrCode overloadfun(
        const std::vector<uint32_t>& outParam) = 0;

    virtual ErrCode overloadfun(
        std::vector<std::unordered_map<int32_t, std::string>>& outParam) = 0;

    virtual ErrCode overloadfun(
        int& outParam,
        std::string& funcResult) = 0;
protected:
    const int VECTOR_MAX_SIZE = 102400;
    const int LIST_MAX_SIZE = 102400;
    const int MAP_MAX_SIZE = 102400;
};
} // namespace test
#endif // TEST_IFOO_H

