/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TEST_FOOPROXY_H
#define TEST_FOOPROXY_H

#include <iremote_proxy.h>
#include "ifoo.h"

namespace test {

class FooProxy : public IRemoteProxy<IFoo> {
public:
    explicit FooProxy(
        const sptr<IRemoteObject>& remote)
        : IRemoteProxy<IFoo>(remote)
    {}

    virtual ~FooProxy()
    {}

    ErrCode void_test_func() override;

    ErrCode bool_test_func(
        bool inParam) override;

    ErrCode byte_test_func(
        int8_t inParam) override;

    ErrCode short_test_func(
        short inParam) override;

    ErrCode int_test_func(
        int32_t inParam) override;

    ErrCode long_test_func(
        int64_t inParam) override;

    ErrCode string_test_func(
        const std::string& inParam) override;

    ErrCode float_test_func(
        float inParam) override;

    ErrCode double_test_func(
        double inParam) override;

    ErrCode char_test_func(
        zchar inParam) override;

    ErrCode seq_test_func(
        const myseq& inParam) override;

    ErrCode interface_test_func(
        const sptr<myinterface>& inParam) override;

private:
    static inline BrokerDelegator<FooProxy> delegator_;
};
} // namespace test
#endif // TEST_FOOPROXY_H

