/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "foo_stub.h"

namespace test {

int32_t FooStub::OnRemoteRequest(
    uint32_t code,
    MessageParcel& data,
    MessageParcel& reply,
    MessageOption& option)
{
    std::u16string localDescriptor = GetDescriptor();
    std::u16string remoteDescriptor = data.ReadInterfaceToken();
    if (localDescriptor != remoteDescriptor) {
        return ERR_TRANSACTION_FAILED;
    }
    switch (static_cast<IFooIpcCode>(code)) {
        case IFooIpcCode::COMMAND_VOID_TEST_FUNC: {
            ErrCode errCode = void_test_func();
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BOOL_TEST_FUNC: {
            bool inParam = data.ReadInt32() == 1;
            ErrCode errCode = bool_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_BYTE_TEST_FUNC: {
            auto inParam = static_cast<int8_t>(data.ReadInt32());
            ErrCode errCode = byte_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SHORT_TEST_FUNC: {
            auto inParam = static_cast<short>(data.ReadInt32());
            ErrCode errCode = short_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INT_TEST_FUNC: {
            int32_t inParam = data.ReadInt32();
            ErrCode errCode = int_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_LONG_TEST_FUNC: {
            int64_t inParam = data.ReadInt64();
            ErrCode errCode = long_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_STRING_TEST_FUNC: {
            std::string inParam = Str16ToStr8(data.ReadString16());
            ErrCode errCode = string_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_FLOAT_TEST_FUNC: {
            float inParam = data.ReadFloat();
            ErrCode errCode = float_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_DOUBLE_TEST_FUNC: {
            double inParam = data.ReadDouble();
            ErrCode errCode = double_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_CHAR_TEST_FUNC: {
            char inParam = (char)data.ReadInt32();
            ErrCode errCode = char_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_SEQ_TEST_FUNC: {
            std::unique_ptr<myseq> inParamInfo(data.ReadParcelable<myseq>());
            if (!inParamInfo) {
                return ERR_INVALID_DATA;
            }
            myseq inParam(*inParamInfo);

            ErrCode errCode = seq_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        case IFooIpcCode::COMMAND_INTERFACE_TEST_FUNC: {
            sptr<myinterface> inParam = iface_cast<myinterface>(data.ReadRemoteObject());
            if (inParam == nullptr) {
                return ERR_INVALID_DATA;
            }

            ErrCode errCode = interface_test_func(inParam);
            if (!reply.WriteInt32(errCode)) {
                return ERR_INVALID_VALUE;
            }
            return ERR_NONE;
        }
        default:
            return IPCObjectStub::OnRemoteRequest(code, data, reply, option);
    }

    return ERR_TRANSACTION_FAILED;
}
} // namespace test
