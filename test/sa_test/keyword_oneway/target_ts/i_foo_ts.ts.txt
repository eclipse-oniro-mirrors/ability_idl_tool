/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import myseq from "./myseq";
import myinterface from "./myinterface";

export default interface IFooTs {
    void_test_func(callback: void_test_funcCallback): void;
    bool_test_func(inParam: boolean, callback: bool_test_funcCallback): void;
    byte_test_func(inParam: number, callback: byte_test_funcCallback): void;
    short_test_func(inParam: number, callback: short_test_funcCallback): void;
    int_test_func(inParam: number, callback: int_test_funcCallback): void;
    long_test_func(inParam: number, callback: long_test_funcCallback): void;
    string_test_func(inParam: string, callback: string_test_funcCallback): void;
    float_test_func(inParam: number, callback: float_test_funcCallback): void;
    double_test_func(inParam: number, callback: double_test_funcCallback): void;
    seq_test_func(inParam: myseq, callback: seq_test_funcCallback): void;
    interface_test_func(inParam: myinterface, callback: interface_test_funcCallback): void;
}
export type void_test_funcCallback = (errCode: number) => void;
export type bool_test_funcCallback = (errCode: number) => void;
export type byte_test_funcCallback = (errCode: number) => void;
export type short_test_funcCallback = (errCode: number) => void;
export type int_test_funcCallback = (errCode: number) => void;
export type long_test_funcCallback = (errCode: number) => void;
export type string_test_funcCallback = (errCode: number) => void;
export type float_test_funcCallback = (errCode: number) => void;
export type double_test_funcCallback = (errCode: number) => void;
export type seq_test_funcCallback = (errCode: number) => void;
export type interface_test_funcCallback = (errCode: number) => void;

