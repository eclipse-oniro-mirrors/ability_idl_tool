/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable test.myseq;
interface test.myinterface;
rawdata test.myrawdata;
import ICallback;
import IFooCustom;
option_stub_hooks on;
interface_token test.ipcCodeTest.IFoo;

interface test.IFoo {
    [macrodef DEVICE] void void_test_func1();
    [oneway, cacheable 100] void void_test_func2();
    [macrondef WATCHER] boolean bool_test_func([in] boolean inParam, [out] boolean outParam, [inout] boolean inoutParam);
    [cacheable 0]byte byte_test_func([in] byte inParam, [out] byte outParam, [inout] byte inoutParam);
    [cacheable 100, ipcincapacity 2]short short_test_func([in] short inParam, [out] short outParam, [inout] short inoutParam);
    [ipccode 20] int int_test_func([in] int inParam, [out] int outParam, [inout] int inoutParam);
    [ipcincapacity 1] long long_test_func([in] long inParam, [out] long outParam, [inout] long inoutParam);
    [ipcincapacity 131071] float float_test_func([in] float inParam, [out] float outParam, [inout] float inoutParam);
    [ipcoutcapacity 131071] double double_test_func([in] double inParam, [out] double outParam, [inout] double inoutParam);
    [ipcoutcapacity 1] char char_test_func([in] char inParam, [out] char outParam, [inout] char inoutParam);  // Ts不支持
    [ipcincapacity 2, ipcoutcapacity 1234] String string_test_func([in] String inParam, [out] String outParam, [inout] String inoutParam);
    [customMsgOption flags=MessageOption::TF_ASYNC | MessageOption::TF_ASYNC_WAKEUP_LATER and waitTime=MessageOption::TF_WAIT_TIME, ipcincapacity 10] unsigned char uchar_test_func([in] unsigned char inParam, [out] unsigned char outParam, [inout] unsigned char inoutParam);
    unsigned short ushort_test_func([in] unsigned short inParam, [out] unsigned short outParam, [inout] unsigned short inoutParam);
    unsigned int uint_test_func([in] unsigned int inParam, [out] unsigned int outParam, [inout] unsigned int inoutParam);
    unsigned long ulong_test_func([in] unsigned long inParam, [out] unsigned long outParam, [inout] unsigned long inoutParam);
    FileDescriptor fd_test_func([in] FileDescriptor inParam, [out] FileDescriptor outParam, [inout] FileDescriptor inoutParam);
    void cstring_test_func([in] CString inParam);

    boolean[] array_bool_test_func([in] boolean[] inParam, [out] boolean[] outParam, [inout] boolean[] inoutParam);
    byte[] array_byte_test_func([in] byte[] inParam, [out] byte[] outParam, [inout] byte[] inoutParam);
    short[] array_short_test_func([in] short[] inParam, [out] short[] outParam, [inout] short[] inoutParam);
    int[] array_int_test_func([in] int[] inParam, [out] int[] outParam, [inout] int[] inoutParam);
    long[] array_long_test_func([in] long[] inParam, [out] long[] outParam, [inout] long[] inoutParam);
    String[] array_string_test_func([in] String[] inParam, [out] String[] outParam, [inout] String[] inoutParam);
    float[] array_float_test_func([in] float[] inParam, [out] float[] outParam, [inout] float[] inoutParam);
    double[] array_double_test_func([in] double[] inParam, [out] double[] outParam, [inout] double[] inoutParam);
    char[] array_char_test_func([in] char[] inParam, [out] char[] outParam, [inout] char[] inoutParam);
    myseq[] array_seq_test_func([in] myseq[] inParam, [out] myseq[] outParam, [inout] myseq[] inoutParam);
    myinterface[] array_interface_test_func([in] myinterface[] inParam, [out] myinterface[] outParam, [inout] myinterface[] inoutParam);
    List<boolean> list_bool_test_func([in] List<boolean> inParam, [out] List<boolean> outParam, [inout] List<boolean> inoutParam);
    List<boolean> list_byte_test_func([in] List<boolean> inParam, [out] List<boolean> outParam, [inout] List<boolean> inoutParam);
    List<short> list_short_test_func([in] List<short> inParam, [out] List<short> outParam, [inout] List<short> inoutParam);
    List<int> list_int_test_func([in] List<int> inParam, [out] List<int> outParam, [inout] List<int> inoutParam);
    List<long> list_long_test_func([in] List<long> inParam, [out] List<long> outParam, [inout] List<long> inoutParam);
    List<String> list_string_test_func([in] List<String> inParam, [out] List<String> outParam, [inout] List<String> inoutParam);
    List<float> list_float_test_func([in] List<float> inParam, [out] List<float> outParam, [inout] List<float> inoutParam);
    List<double> list_double_test_func([in] List<double> inParam, [out] List<double> outParam, [inout] List<double> inoutParam);
    List<char> list_char_test_func([in] List<char> inParam, [out] List<char> outParam, [inout] List<char> inoutParam);
    List<myseq> list_seq_test_func([in] List<myseq> inParam, [out] List<myseq> outParam, [inout] List<myseq> inoutParam);
    List<myinterface> list_interface_test_func([in] List<myinterface> inParam, [out] List<myinterface> outParam, [inout] List<myinterface> inoutParam);
    Set<boolean> bool_test_func([in] Set<boolean> inParam, [out] Set<boolean> outParam, [inout] Set<boolean> inoutParam);
    Set<boolean> byte_test_func([in] Set<boolean> inParam, [out] Set<boolean> outParam, [inout] Set<boolean> inoutParam);
    Set<short> short_test_func([in] Set<short> inParam, [out] Set<short> outParam, [inout] Set<short> inoutParam);
    Set<int> int_test_func([in] Set<int> inParam, [out] Set<int> outParam, [inout] Set<int> inoutParam);
    Set<int[]> int_2_test_func([in] Set<int[]> inParam, [out] Set<int[]> outParam, [inout] Set<int[]> inoutParam);
    Set<int[][]> int_3_test_func([in] Set<int[][]> inParam, [out] Set<int[][]> outParam, [inout] Set<int[][]> inoutParam);
    Set<long> long_test_func([in] Set<long> inParam, [out] Set<long> outParam, [inout] Set<long> inoutParam);
    Set<String> string_test_func([in] Set<String> inParam, [out] Set<String> outParam, [inout] Set<String> inoutParam);
    Set<float> float_test_func([in] Set<float> inParam, [out] Set<float> outParam, [inout] Set<float> inoutParam);
    Set<double> double_test_func([in] Set<double> inParam, [out] Set<double> outParam, [inout] Set<double> inoutParam);
    Set<char> char_test_func([in] Set<char> inParam, [out] Set<char> outParam, [inout] Set<char> inoutParam);
    Set<Map<int, int[]>> map_test_func([in] Set<Map<int, int[]>> inParam, [out] Set<Map<int, int[]>> outParam, [inout] Set<Map<int, int[]>> inoutParam);
    Set<myseq> seq_test_func([in] Set<myseq> inParam, [out] Set<myseq> outParam, [inout] Set<myseq> inoutParam);
    Set<myinterface> interface_test_func([in] Set<myinterface> inParam, [out] Set<myinterface> outParam, [inout] Set<myinterface> inoutParam);
    Set<IRemoteObject> remoteobject_test_func([in] Set<IRemoteObject> inParam, [out] Set<IRemoteObject> outParam, [inout] Set<IRemoteObject> inoutParam);
    OrderedMap<boolean, boolean> bool_test_func([in] OrderedMap<boolean, boolean> inParam, [out] OrderedMap<boolean, boolean> outParam, [inout] OrderedMap<boolean, boolean> inoutParam);
    OrderedMap<byte, byte> byte_test_func([in] OrderedMap<byte, byte> inParam, [out] OrderedMap<byte, byte> outParam, [inout] OrderedMap<byte, byte> inoutParam);
    OrderedMap<short, short> short_test_func([in] OrderedMap<short, short> inParam, [out] OrderedMap<short, short> outParam, [inout] OrderedMap<short, short> inoutParam);
    OrderedMap<int, int> int_test_func([in] OrderedMap<int, int> inParam, [out] OrderedMap<int, int> outParam, [inout] OrderedMap<int, int> inoutParam);
    OrderedMap<long, long> long_test_func([in] OrderedMap<long, long> inParam, [out] OrderedMap<long, long> outParam, [inout] OrderedMap<long, long> inoutParam);
    OrderedMap<String, String> string_test_func([in] OrderedMap<String, String> inParam, [out] OrderedMap<String, String> outParam, [inout] OrderedMap<String, String> inoutParam);
    OrderedMap<float, float> float_test_func([in] OrderedMap<float, float> inParam, [out] OrderedMap<float, float> outParam, [inout] OrderedMap<float, float> inoutParam);
    OrderedMap<double, double> double_test_func([in] OrderedMap<double, double> inParam, [out] OrderedMap<double, double> outParam, [inout] OrderedMap<double, double> inoutParam);
    OrderedMap<char, char> char_test_func([in] OrderedMap<char, char> inParam, [out] OrderedMap<char, char> outParam, [inout] OrderedMap<char, char> inoutParam); //Ts不支持char
    OrderedMap<myseq, myseq> seq_test_func([in] OrderedMap<myseq, myseq> inParam, [out] OrderedMap<myseq, myseq> outParam, [inout] OrderedMap<myseq, myseq> inoutParam);
    OrderedMap<myinterface, myinterface> interface_test_func([in] OrderedMap<myinterface, myinterface> inParam, [out] OrderedMap<myinterface, myinterface> outParam, [inout] OrderedMap<myinterface, myinterface> inoutParam);
    OrderedMap<int, int[]> int_2_test_func([in] OrderedMap<int, int[]> inParam, [out] OrderedMap<int, int[]> outParam, [inout] OrderedMap<int, int[]> inoutParam);
    OrderedMap<int, OrderedMap<int, int[]>> OrderedMap_test_func([in] OrderedMap<int, OrderedMap<int, int[]>> inParam, [out] OrderedMap<int, OrderedMap<int, int[]>> outParam, [inout] OrderedMap<int, OrderedMap<int, int[]>> inoutParam);
    OrderedMap<int[], int[]> int_2_test_func([in] OrderedMap<int[], int[]> inParam, [out] OrderedMap<int[], int[]> outParam, [inout] OrderedMap<int[], int[]> inoutParam);
    OrderedMap<int, OrderedMap<int[], int[]>> OrderedMap_test_func([in] OrderedMap<int, OrderedMap<int[], int[]>> inParam, [out] OrderedMap<int, OrderedMap<int[], int[]>> outParam, [inout] OrderedMap<int, OrderedMap<int[], int[]>> inoutParam);
    OrderedMap<IRemoteObject, IRemoteObject> IRemoteObject_test_func([in] OrderedMap<IRemoteObject, IRemoteObject> inParam, [out] OrderedMap<IRemoteObject, IRemoteObject> outParam, [inout] OrderedMap<IRemoteObject, IRemoteObject> inoutParam);
    Map<boolean, boolean> map_bool_test_func([in] Map<boolean, boolean> inParam, [out] Map<boolean, boolean> outParam, [inout] Map<boolean, boolean> inoutParam);
    Map<byte, byte> map_byte_test_func([in] Map<byte, byte> inParam, [out] Map<byte, byte> outParam, [inout] Map<byte, byte> inoutParam);
    Map<short, short> map_short_test_func([in] Map<short, short> inParam, [out] Map<short, short> outParam, [inout] Map<short, short> inoutParam);
    Map<int, int> map_int_test_func([in] Map<int, int> inParam, [out] Map<int, int> outParam, [inout] Map<int, int> inoutParam);
    Map<long, long> map_long_test_func([in] Map<long, long> inParam, [out] Map<long, long> outParam, [inout] Map<long, long> inoutParam);
    Map<String, String> map_string_test_func([in] Map<String, String> inParam, [out] Map<String, String> outParam, [inout] Map<String, String> inoutParam);
    Map<float, float> map_float_test_func([in] Map<float, float> inParam, [out] Map<float, float> outParam, [inout] Map<float, float> inoutParam);
    Map<double, double> map_double_test_func([in] Map<double, double> inParam, [out] Map<double, double> outParam, [inout] Map<double, double> inoutParam);
    Map<char, char> map_char_test_func([in] Map<char, char> inParam, [out] Map<char, char> outParam, [inout] Map<char, char> inoutParam); //Ts不支持char
    Map<myseq, myseq> map_seq_test_func([in] Map<myseq, myseq> inParam, [out] Map<myseq, myseq> outParam, [inout] Map<myseq, myseq> inoutParam);
    Map<myinterface, myinterface> map_interface_test_func([in] Map<myinterface, myinterface> inParam, [out] Map<myinterface, myinterface> outParam, [inout] Map<myinterface, myinterface> inoutParam);

    sharedptr<myseq> sharedptr_seq_func([in] sharedptr<myseq> inParam, [inout] sharedptr<myseq> inoutParam, [out] sharedptr<myseq> outParam);
    uniqueptr<myseq> uniqueptr_seq_func([in] uniqueptr<myseq> inParam, [inout] uniqueptr<myseq> inoutParam, [out] uniqueptr<myseq> outParam);
    sptr<myseq> sptr_seq_func([in] sptr<myseq> inParam, [inout] sptr<myseq> inoutParam, [out] sptr<myseq> outParam);
    null_sharedptr<myseq> nullsharedptr_seq_func([in] null_sharedptr<myseq> inParam, [inout] null_sharedptr<myseq> inoutParam, [out] null_sharedptr<myseq> outParam);
    null_uniqueptr<myseq> nulluniqueptr_seq_func([in] null_uniqueptr<myseq> inParam, [inout] null_uniqueptr<myseq> inoutParam, [out] null_uniqueptr<myseq> outParam);
    null_sptr<myseq> nullsptr_seq_func([in] null_sptr<myseq> inParam, [inout] null_sptr<myseq> inoutParam, [out] null_sptr<myseq> outParam);
    IRemoteObject remote_object_test_func([in] IRemoteObject inParam, [out] IRemoteObject outParam, [inout] IRemoteObject inoutParam);

    FileDescriptorSan fdsan_test_func([in] FileDescriptorSan inParam, [out] FileDescriptorSan outParam, [inout] FileDescriptorSan inoutParam);
    myseq seq_test_func([in] myseq inParam, [out] myseq outParam, [inout] myseq inoutParam);
    myinterface interface_test_func([in] myinterface inParam, [out] myinterface outParam, [inout] myinterface inoutParam);
    ICallback callback_test_func2([in] ICallback inParam, [out] ICallback outParam, [inout] ICallback inoutParam);
    FooEnum enum_test_func([in] FooEnum inParam, [out] FooEnum outParam, [inout] FooEnum inoutParam);
    FooStruct struct_test_func([in] FooStruct inParam, [out] FooStruct outParam, [inout] RequestInfo inoutParam);
    FooUnion union_test_func([in] FooUnion inParam, [out] FooUnion outParam, [inout] FooUnion inoutParam);
    myrawdata rawdata_test_func([in] myrawdata inParam, [out] myrawdata outParam, [inout] myrawdata inoutParam);
}